# üé§ –†–ê–ë–û–¢–ê –ü–û –£–ú–ï–ù–¨–®–ï–ù–ò–Æ –ü–ê–£–ó–´ –ü–û–°–õ–ï –û–¢–í–ï–¢–ê –ö–õ–ò–ï–ù–¢–ê - –û–¢–ß–ï–¢

__–î–∞—Ç–∞:__ 2025-09-18\
__–ê–≤—Ç–æ—Ä:__ AI-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç\
__–°—Ç–∞—Ç—É—Å:__ üîÑ –í –ü–†–û–¶–ï–°–°–ï (67% –∑–∞–≤–µ—Ä—à–µ–Ω–æ)\
__–ü—Ä–æ–µ–∫—Ç:__ –ì–æ–ª–æ—Å–æ–≤–æ–π AI-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç "–ú–µ—Ç—Ä–æ—Ç—ç—Å—Ç" –Ω–∞ –±–∞–∑–µ Asterisk ARI

---

## üìã –ö–û–ù–¢–ï–ö–°–¢ –ó–ê–î–ê–ß–ò

### __–ü—Ä–æ–±–ª–µ–º–∞:__

–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∂–∞–ª–æ–≤–∞–ª—Å—è: "–±–æ—Ç —Å–ª—É—à–∞–µ—Ç —Å–ª–∏—à–∫–æ–º –¥–æ–ª–≥–æ –ø–æ—Å–ª–µ —Ç–æ–≥–æ, –∫–∞–∫ —è –∑–∞–∫–æ–Ω—á–∏–ª –≥–æ–≤–æ—Ä–∏—Ç—å" - —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –∑–∞–ø–∏—Å—å –Ω–∞ 15 —Å–µ–∫—É–Ω–¥ —Å–æ–∑–¥–∞–≤–∞–ª–∞ –¥–ª–∏–Ω–Ω—ã–µ –Ω–µ–∫–æ–º—Ñ–æ—Ä—Ç–Ω—ã–µ –ø–∞—É–∑—ã –≤ –¥–∏–∞–ª–æ–≥–µ.

### __–¶–µ–ª—å:__

–°–æ–∑–¥–∞—Ç—å —Å–∏—Å—Ç–µ–º—É —É–º–Ω–æ–π –¥–µ—Ç–µ–∫—Ü–∏–∏ –æ–∫–æ–Ω—á–∞–Ω–∏—è —Ä–µ—á–∏, –∫–æ—Ç–æ—Ä–∞—è –±—É–¥–µ—Ç:

- –û–ø—Ä–µ–¥–µ–ª—è—Ç—å, –∫–æ–≥–¥–∞ –∫–ª–∏–µ–Ω—Ç –∑–∞–∫–æ–Ω—á–∏–ª –≥–æ–≤–æ—Ä–∏—Ç—å
- –§–∏–ª—å—Ç—Ä–æ–≤–∞—Ç—å –Ω–µ–∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–≤–Ω—ã–µ —Ñ—Ä–∞–∑—ã (—Å–æ–≥–ª–∞—Å–∏—è, –º–µ–∂–¥–æ–º–µ—Ç–∏—è)
- –ê–¥–∞–ø—Ç–∏–≤–Ω–æ —É–ø—Ä–∞–≤–ª—è—Ç—å –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å—é –∑–∞–ø–∏—Å–∏
- –°–æ—Ö—Ä–∞–Ω—è—Ç—å —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç—å –æ—Å–Ω–æ–≤–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã

---

## ‚úÖ –í–´–ü–û–õ–ù–ï–ù–ù–ê–Ø –†–ê–ë–û–¢–ê (67% –ó–ê–í–ï–†–®–ï–ù–û)

### __1. –°–æ–∑–¥–∞–Ω–∏–µ SmartSpeechDetector__ ‚úÖ –ó–ê–í–ï–†–®–ï–ù–û

__–§–∞–π–ª:__ `asterisk-vox-bot/app/backend/services/smart_speech_detector.py`

__–ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ:__ –ê–Ω–∞–ª–∏–∑ –ø–∞—É–∑ –º–µ–∂–¥—É –∞—É–¥–∏–æ —Å–µ–≥–º–µ–Ω—Ç–∞–º–∏ –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –æ–∫–æ–Ω—á–∞–Ω–∏—è —Ä–µ—á–∏.

__–ö–ª—é—á–µ–≤—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:__

- __Silence Detection__ - –¥–µ—Ç–µ–∫—Ü–∏—è —Ç–∏—à–∏–Ω—ã (–Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º—ã–π —Ç–∞–π–º–∞—É—Ç)
- __Minimum Duration Check__ - –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏–µ –ª–æ–∂–Ω—ã—Ö —Å—Ä–∞–±–∞—Ç—ã–≤–∞–Ω–∏–π –Ω–∞ –∫–æ—Ä–æ—Ç–∫–∏–µ —Ñ—Ä–∞–∑—ã
- __Adaptive Analysis__ - –∞–Ω–∞–ª–∏–∑ –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤ –ø–∞—É–∑
- __Configurable Parameters__ - –≥–∏–±–∫–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ —á–µ—Ä–µ–∑ .env

__–û—Å–Ω–æ–≤–Ω—ã–µ –º–µ—Ç–æ–¥—ã:__

```python
def __init__(self, silence_timeout=1.2, min_speech_duration=0.5)
def reset(self) - —Å–±—Ä–æ—Å —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–µ—Ç–µ–∫—Ç–æ—Ä–∞
def process_audio_data(self, audio_data: List[float]) -> bool - –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∞—É–¥–∏–æ –¥–∞–Ω–Ω—ã—Ö
```

__–ü—Ä–∏–Ω—Ü–∏–ø —Ä–∞–±–æ—Ç—ã:__

1. –°–æ–±–∏—Ä–∞–µ—Ç –ø–∞—É–∑—ã –º–µ–∂–¥—É –∞—É–¥–∏–æ —Å–µ–≥–º–µ–Ω—Ç–∞–º–∏
2. –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —á—Ç–æ –æ–±—â–∞—è –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Ä–µ—á–∏ –ø—Ä–µ–≤—ã—à–∞–µ—Ç –º–∏–Ω–∏–º–∞–ª—å–Ω—É—é
3. –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç –Ω–∞–ª–∏—á–∏–µ –¥–ª–∏—Ç–µ–ª—å–Ω–æ–π –ø–∞—É–∑—ã (–ø—Ä–µ–≤—ã—à–∞—é—â–µ–π silence_timeout)
4. –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç True, –µ—Å–ª–∏ —Ä–µ—á—å –æ–∫–æ–Ω—á–µ–Ω–∞, False - –µ—Å–ª–∏ –Ω—É–∂–Ω–æ –ø—Ä–æ–¥–æ–ª–∂–∞—Ç—å –∑–∞–ø–∏—Å—å

### __2. –°–æ–∑–¥–∞–Ω–∏–µ SpeechFilter__ ‚úÖ –ó–ê–í–ï–†–®–ï–ù–û

__–§–∞–π–ª:__ `asterisk-vox-bot/app/backend/services/speech_filter.py`

__–ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ:__ –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –Ω–µ–∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–≤–Ω—ã—Ö —Ñ—Ä–∞–∑ –∏ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–≤–Ω–æ—Å—Ç–∏ —Ä–µ—á–∏.

__–ö–ª—é—á–µ–≤—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:__

- __Filler Words Detection__ - —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ —Å–æ–≥–ª–∞—Å–∏–π –∏ –º–µ–∂–¥–æ–º–µ—Ç–∏–π
- __Technical Terms Recognition__ - —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ —Ç–µ—Ä–º–∏–Ω—ã –≤—Å–µ–≥–¥–∞ —Å—á–∏—Ç–∞—é—Ç—Å—è –∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–≤–Ω—ã–º–∏
- __Question Detection__ - –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –≤–æ–ø—Ä–æ—Å–∏—Ç–µ–ª—å–Ω—ã—Ö —Ñ—Ä–∞–∑
- __Detailed Analysis__ - –ø–æ–ª–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —Ç–µ–∫—Å—Ç–∞ —Å –∫–∞—Ç–µ–≥–æ—Ä–∏–∑–∞—Ü–∏–µ–π

__–û—Å–Ω–æ–≤–Ω—ã–µ –º–µ—Ç–æ–¥—ã:__

```python
def is_informative(self, text: str) -> bool - –ø—Ä–æ–≤–µ—Ä–∫–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–≤–Ω–æ—Å—Ç–∏ —Ç–µ–∫—Å—Ç–∞
def get_text_category(self, text: str) -> str - –∫–∞—Ç–µ–≥–æ—Ä–∏–∑–∞—Ü–∏—è —Ç–µ–∫—Å—Ç–∞
def get_detailed_analysis(self, text: str) -> dict - –¥–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑
```

__–°–ª–æ–≤–∞—Ä–∏ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏:__

- __Filler words:__ ["–∞–≥–∞", "—É–≥—É", "–¥–∞", "–º–º–º", "—ç—ç—ç", "–∞", "–Ω—É", "—Ö–º", "—É–≥—É", "–∞–≥–∞", "–¥–∞-–¥–∞", "—É–≥—É-—É–≥—É"]
- __Question words:__ ["—á—Ç–æ", "–∫–∞–∫", "–≥–¥–µ", "–∫–æ–≥–¥–∞", "–ø–æ—á–µ–º—É", "–∑–∞—á–µ–º", "–∫—Ç–æ", "—á–µ–π", "–∫–∞–∫–æ–π", "–∫–∞–∫–∞—è", "–∫–∞–∫–æ–µ", "–∫–∞–∫–∏–µ", "—Å–∫–æ–ª—å–∫–æ", "–∫–æ—Ç–æ—Ä—ã–π", "–∫–æ—Ç–æ—Ä–∞—è", "–∫–æ—Ç–æ—Ä–æ–µ", "–º–æ–∂–Ω–æ", "–≤–æ–∑–º–æ–∂–Ω–æ", "–ø–æ–¥—Å–∫–∞–∂–∏—Ç–µ", "—Å–∫–∞–∂–∏—Ç–µ", "—Ä–∞—Å—Å–∫–∞–∂–∏—Ç–µ"]
- __Technical terms:__ ["–∫–Ω", "–º–ø–∞", "–º–º", "–Ω/–º–º¬≤", "–º–ø–∞", "–∫–≥—Å/—Å–º¬≤", "–Ω", "–∫–Ω", "–º–Ω", "–≥–Ω", "—Ç", "–∫—Ç", "—à—Ç", "–º", "—Å–º", "–º–º", "–∫–º", "–¥–º", "–º–∫–º", "–Ω–º", "–≥", "–∫–≥", "—Ç", "–º–≥", "–ª", "–º–ª", "—Å–º¬≥", "–º¬≥", "—Å", "–º–∏–Ω", "—á", "–º—Å", "–º–∫—Å", "–Ω—Å", "¬∞c", "¬∞f", "k", "¬∞", "—Ä–∞–¥", "–≥—Ä–∞–¥", "–æ–±/–º–∏–Ω", "–æ–±/—Å", "–≥—Ü", "–∫–≥—Ü", "–º–≥—Ü", "–≥–≥—Ü", "–≤", "–∫–≤", "–º–≤", "–º–∫–≤", "–∞", "–º–∞", "–º–∫–∞", "–æ–º", "–∫–æ–º", "–º–æ–º", "–≤—Ç", "–∫–≤—Ç", "–º–≤—Ç", "–¥–∂", "–∫–¥–∂", "–º–¥–∂", "–∫–∞–ª", "–∫–∫–∞–ª", "–Ω–º", "–ø–∞", "–∫–ø–∞", "–º–ø–∞", "–≥–ø–∞", "–±–∞—Ä", "–∞—Ç–º", "–º–º —Ä—Ç.—Å—Ç.", "–ª/–º–∏–Ω", "–ª/—Å", "–º¬≥/—á", "–º¬≥/—Å", "–ª/—á", "–º/—Å", "–∫–º/—á", "–º/–º–∏–Ω", "—Å–º/—Å", "–º–º/—Å", "iso 7500-1", "astm e4", "iso 6892-1", "astm e8", "astm e9", "—Ç–≤–µ—Ä–¥–æ–º–µ—Ä", "—Ç–≤–µ—Ä–¥–æ–º–µ—Ä—ã", "—Ç–≤–µ—Ä–¥–æ–º–µ—Ä —Ä–æ–∫–≤–µ–ª–ª–∞", "—Ç–≤–µ—Ä–¥–æ–º–µ—Ä –±—Ä–∏–Ω–µ–ª–ª—è", "—Ç–≤–µ—Ä–¥–æ–º–µ—Ä –≤–∏–∫–∫–µ—Ä—Å–∞", "–º–∏–∫—Ä–æ—Ç–≤–µ—Ä–¥–æ–º–µ—Ä", "—Ä–∞–∑—Ä—ã–≤–Ω–∞—è –º–∞—à–∏–Ω–∞", "—Ä–∞–∑—Ä—ã–≤–Ω—ã–µ –º–∞—à–∏–Ω—ã", "–∏—Å–ø—ã—Ç–∞—Ç–µ–ª—å–Ω–∞—è –º–∞—à–∏–Ω–∞", "–∏—Å–ø—ã—Ç–∞—Ç–µ–ª—å–Ω—ã–µ –º–∞—à–∏–Ω—ã", "—É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è —Ä–∞–∑—Ä—ã–≤–Ω–∞—è –º–∞—à–∏–Ω–∞", "–∏—Å–ø—ã—Ç–∞—Ç–µ–ª—å–Ω—ã–π –ø—Ä–µ—Å—Å", "–∏—Å–ø—ã—Ç–∞—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–µ—Å—Å—ã", "–ø—Ä–µ—Å—Å –ø–∏", "—Ä–≥–º", "—Ä–≥–º-1000", "—Ä–≥–º-1000-–∞", "–¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∞—è –º–∞—à–∏–Ω–∞", "—É—Å—Ç–∞–ª–æ—Å—Ç–Ω–∞—è –º–∞—à–∏–Ω–∞", "–∏—Å–ø—ã—Ç–∞–Ω–∏–µ –Ω–∞ —Ä–∞—Å—Ç—è–∂–µ–Ω–∏–µ", "–∏—Å–ø—ã—Ç–∞–Ω–∏–µ –Ω–∞ —Å–∂–∞—Ç–∏–µ", "–∏—Å–ø—ã—Ç–∞–Ω–∏–µ –Ω–∞ –∏–∑–≥–∏–±", "–º–µ—Ç—Ä–æ—Ç—ç—Å—Ç", "—Ä–≥–º-–≥-–∞", "—Ä—ç–º", "—Ä—ç–º-i-0,1", "—Ä—ç–º-1", "—Ä—ç–º-50", "—Ä—ç–º-100", "—Ä—ç–º-200", "—Ä—ç–º-300", "—Ä—ç–º-500", "—Ä—ç–º-600", "—Ä—ç–º-i-2", "—Ä—ç–º-i-3", "—Ä—ç–º-i-5", "—Ä—ç–º-i-10", "—É–∏–º-–¥", "—É–∏–º-–¥-100", "—É–∏–º-–¥-250", "—É–∏–º-–¥-500", "—É–∏–º-–¥-750", "–ø–Ω–µ–≤–º–æ–¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∞—è –º–∞—à–∏–Ω–∞", "–ø–∏–º-–º—Ä-100", "–ø–∏–º-–º—Ä-200", "–ø–∏–º-–º—Ä-300", "—É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–µ –∏—Å–ø—ã—Ç–∞—Ç–µ–ª—å–Ω—ã–µ –º–∞—à–∏–Ω—ã", "—É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è –º–∞—à–∏–Ω–∞", "–º–∞—à–∏–Ω–∞ –Ω–∞ —É—Å—Ç–∞–ª–æ—Å—Ç—å", "—É—Å—Ç–∞–ª–æ—Å—Ç–Ω—ã–µ –∏—Å–ø—ã—Ç–∞–Ω–∏—è", "–º–∞—à–∏–Ω—ã –Ω–∞ –∫—Ä—É—á–µ–Ω–∏–µ", "–º–∞—à–∏–Ω—ã –Ω–∞ –∏–∑–≥–∏–±", "–º–∫", "–º–∫—Å", "–º–∫—Å-1000", "–º–∫—Å-2000", "–º–∫—Å-3000", "–º–∫—Å-500", "—Å–∏—Å—Ç–µ–º—ã —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–Ω—ã—Ö –∏—Å–ø—ã—Ç–∞–Ω–∏–π", "—Å—Ç–∏", "—ç–∫—Å—Ç–µ–Ω–∑–æ–º–µ—Ç—Ä", "—É–∏–¥-–ø–±", "m-view", "–∫–æ–ø—Ä–∞ –º–∞—è—Ç–Ω–∏–∫–æ–≤–∞—è", "–∫–æ–ø—Ä—ã", "–∫–º", "–∫–≤", "–∫–º–º", "–∏–∫–º-450-–∞", "—Å—Ç–∏–ª–æ—Å–∫–æ–ø", "—Å–ª–ø", "—Å–ª-13—É", "—Å–ª-15", "–∫–ª–∏–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –∫–∞–º–µ—Ä—ã", "–∫—Ö", "–∫–∏–æ", "–∫–∏—É", "–∫—Ç–≤", "–∫—Ç–∑", "–∫—Ç—á", "—Ä–µ—Å—É—Ä—Å–Ω–æ–µ –∏—Å–ø—ã—Ç–∞–Ω–∏–µ", "–∏—Å–ø—ã—Ç–∞–Ω–∏–µ –Ω–∞ –∏–∑–Ω–æ—Å", "–º–∞—à–∏–Ω—ã —à–ª–∏—Ñ–æ–≤–∞–ª—å–Ω–æ-–ø–æ–ª–∏—Ä–æ–≤–∞–ª—å–Ω—ã–µ", "–º—à–ø", "–º–ø", "–º–∏–∫—Ä–æ—Å–∫–æ–ø –º–µ—Ç–∞–ª–ª–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∏–π", "–º–º–∏", "–º–º—Ä", "–º–º–ø", "–ª–∞–±–æ—Ä–∞—Ç–æ—Ä–∏—è –º–æ–¥—É–ª—å–Ω–∞—è", "–ª–º–º-25", "–º–µ–±–µ–ª—å –ª–∞–±–æ—Ä–∞—Ç–æ—Ä–Ω–∞—è", "—Å–∫–∑-1", "—Å–∫–∑-2", "—Å–∫–∑-3-–∞", "—Å–∫–∑-4"]

__–ü—Ä–∏–Ω—Ü–∏–ø —Ä–∞–±–æ—Ç—ã:__

1. –ù–æ—Ä–º–∞–ª–∏–∑—É–µ—Ç —Ç–µ–∫—Å—Ç (—É–¥–∞–ª—è–µ—Ç –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã –∏ –∑–Ω–∞–∫–∏)
2. –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–∞ filler words (–≤—Å–µ–≥–¥–∞ –Ω–µ–∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–≤–Ω—ã)
3. –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–∞ —Ü–∏—Ñ—Ä—ã (–≤—Å–µ–≥–¥–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–≤–Ω—ã)
4. –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–∞ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ —Ç–µ—Ä–º–∏–Ω—ã (–≤—Å–µ–≥–¥–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–≤–Ω—ã)
5. –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–∞ –≤–æ–ø—Ä–æ—Å–∏—Ç–µ–ª—å–Ω—ã–µ —Å–ª–æ–≤–∞ (–≤—Å–µ–≥–¥–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–≤–Ω—ã)
6. –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –º–∏–Ω–∏–º–∞–ª—å–Ω—É—é –¥–ª–∏–Ω—É –∏ –Ω–∞–ª–∏—á–∏–µ –≥–ª–∞–≥–æ–ª–æ–≤
7. –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ä–µ—à–µ–Ω–∏–µ –æ–± –∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–≤–Ω–æ—Å—Ç–∏

### __3. –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è –≤ –æ—Å–Ω–æ–≤–Ω—É—é —Å–∏—Å—Ç–µ–º—É__ ‚úÖ –ó–ê–í–ï–†–®–ï–ù–û

__–§–∞–π–ª:__ `asterisk-vox-bot/app/backend/asterisk/stasis_handler_optimized.py`

__–ß—Ç–æ –±—ã–ª–æ —Å–¥–µ–ª–∞–Ω–æ:__

- –î–æ–±–∞–≤–ª–µ–Ω—ã –∏–º–ø–æ—Ä—Ç—ã –Ω–æ–≤—ã—Ö —Å–µ—Ä–≤–∏—Å–æ–≤
- –ò–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω–∞ –ª–æ–≥–∏–∫–∞ —É–º–Ω–æ–π –¥–µ—Ç–µ–∫—Ü–∏–∏ –≤ –æ—Å–Ω–æ–≤–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
- –ù–∞—Å—Ç—Ä–æ–µ–Ω–æ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –º–µ–∂–¥—É —É–º–Ω—ã–º –∏ –æ–±—ã—á–Ω—ã–º —Ä–µ–∂–∏–º–æ–º
- –î–æ–±–∞–≤–ª–µ–Ω–∞ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è –Ω–µ–∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–≤–Ω—ã—Ö —Ñ—Ä–∞–∑
- –†–µ–∞–ª–∏–∑–æ–≤–∞–Ω–∞ –∞–¥–∞–ø—Ç–∏–≤–Ω–∞—è –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∑–∞–ø–∏—Å–∏

__–ö–ª—é—á–µ–≤—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è:__

```python
# –ò–º–ø–æ—Ä—Ç—ã –Ω–æ–≤—ã—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
from app.backend.services.smart_speech_detector import SmartSpeechDetector
from app.backend.services.speech_filter import SpeechFilter

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≤ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä–µ
self.speech_detector = None
self.speech_filter = None
self.smart_detection_enabled = os.getenv("SPEECH_DETECTION_ENABLED", "false").lower() == "true"

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Ä–≤–∏—Å–æ–≤
if self.smart_detection_enabled:
    self.speech_detector = SmartSpeechDetector(
        silence_timeout=self.silence_timeout,
        min_speech_duration=self.min_speech_duration
    )
    self.speech_filter = SpeechFilter()

# –õ–æ–≥–∏–∫–∞ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –≤ process_user_speech_optimized
if self.smart_detection_enabled and self.speech_filter:
    if not self.speech_filter.is_informative(normalized_text):
        logger.info(f"üóëÔ∏è –†–µ—á—å –Ω–µ–∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–≤–Ω–∞: '{normalized_text}' - –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É")
        return
```

### __4. –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —á–µ—Ä–µ–∑ .env__ ‚úÖ –ó–ê–í–ï–†–®–ï–ù–û

__–§–∞–π–ª:__ `asterisk-vox-bot/.env`

__–î–æ–±–∞–≤–ª–µ–Ω–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã:__

```env
# Smart Speech Detection Configuration
SPEECH_DETECTION_ENABLED=true
SPEECH_SILENCE_TIMEOUT=1.2
SPEECH_MIN_DURATION=0.5
SPEECH_MAX_RECORDING_TIME=15.0
SPEECH_DEBUG_LOGGING=true
```

__–û–ø–∏—Å–∞–Ω–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤:__

- __SPEECH_DETECTION_ENABLED__ - –≤–∫–ª—é—á–µ–Ω–∏–µ/–≤—ã–∫–ª—é—á–µ–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã —É–º–Ω–æ–π –¥–µ—Ç–µ–∫—Ü–∏–∏
- __SPEECH_SILENCE_TIMEOUT__ - —Ç–∞–π–º–∞—É—Ç —Ç–∏—à–∏–Ω—ã –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –æ–∫–æ–Ω—á–∞–Ω–∏—è —Ä–µ—á–∏ (—Å–µ–∫—É–Ω–¥—ã)
- __SPEECH_MIN_DURATION__ - –º–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Ä–µ—á–∏ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ (—Å–µ–∫—É–Ω–¥—ã)
- __SPEECH_MAX_RECORDING_TIME__ - –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è –∑–∞–ø–∏—Å–∏ (—Å–µ–∫—É–Ω–¥—ã)
- __SPEECH_DEBUG_LOGGING__ - –≤–∫–ª—é—á–µ–Ω–∏–µ –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è

---

## ‚ùå –ù–ï–í–´–ü–û–õ–ù–ï–ù–ù–ê–Ø –†–ê–ë–û–¢–ê (33% –û–°–¢–ê–õ–û–°–¨)

### __5. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã__ ‚ùå –ù–ï –í–´–ü–û–õ–ù–ï–ù–û

__–ß—Ç–æ –Ω—É–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å:__

- –°–æ–∑–¥–∞—Ç—å —Ç–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç `test_smart_speech.py`
- –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Ä–∞–±–æ—Ç—É SmartSpeechDetector
- –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Ä–∞–±–æ—Ç—É SpeechFilter
- –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
- –ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –∏–∑ .env

__–û–∂–∏–¥–∞–µ–º—ã–µ —Ç–µ—Å—Ç—ã:__

```python
# –¢–µ—Å—Ç—ã SmartSpeechDetector
- –ö–æ—Ä–æ—Ç–∫–∏–µ –ø–∞—É–∑—ã (–¥–æ–ª–∂–Ω—ã –æ—Ç–∫–ª–æ–Ω—è—Ç—å—Å—è)
- –î–ª–∏–Ω–Ω—ã–µ –ø–∞—É–∑—ã (–¥–æ–ª–∂–Ω—ã –ø—Ä–∏–Ω–∏–º–∞—Ç—å—Å—è)
- –°–º–µ—à–∞–Ω–Ω—ã–µ —Å—Ü–µ–Ω–∞—Ä–∏–∏
- –ü–æ–≥—Ä–∞–Ω–∏—á–Ω—ã–µ —Å–ª—É—á–∞–∏

# –¢–µ—Å—Ç—ã SpeechFilter  
- –ù–µ–∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–≤–Ω—ã–µ —Ñ—Ä–∞–∑—ã (–∞–≥–∞, —É–≥—É, –¥–∞ –∏ —Ç.–¥.)
- –ò–Ω—Ñ–æ—Ä–º–∞—Ç–∏–≤–Ω—ã–µ —Ñ—Ä–∞–∑—ã
- –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ —Ç–µ—Ä–º–∏–Ω—ã (–≤—Å–µ–≥–¥–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–≤–Ω—ã)
- –ì—Ä–∞–Ω–∏—á–Ω—ã–µ —Å–ª—É—á–∞–∏

# –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ç–µ—Å—Ç—ã
- –ü–æ–ª–Ω—ã–µ —Å—Ü–µ–Ω–∞—Ä–∏–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
- –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
- –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
```

### __6. –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –∏ –æ—Ç–ª–∞–¥–∫–∏__ ‚ùå –ù–ï –í–´–ü–û–õ–ù–ï–ù–û

__–ß—Ç–æ –Ω—É–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å:__

- –£–±–µ–¥–∏—Ç—å—Å—è, —á—Ç–æ –¥–µ—Ç–∞–ª—å–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–∞–±–æ—Ç–∞–µ—Ç
- –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –º–µ—Ç—Ä–∏–∫–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
- –ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å –æ–±—Ä–∞–±–æ—Ç–∫—É edge cases
- –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Ä–∞–±–æ—Ç—É —Å —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–º–∏ —Ç–µ—Ä–º–∏–Ω–∞–º–∏
- –í–∞–ª–∏–¥–∏—Ä–æ–≤–∞—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é

__–û–∂–∏–¥–∞–µ–º—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã:__

- –î–µ—Ç–∞–ª—å–Ω—ã–µ –ª–æ–≥–∏ —Ä–∞–±–æ—Ç—ã —Å–∏—Å—Ç–µ–º—ã
- –ú–µ—Ç—Ä–∏–∫–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
- –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Å–µ—Ö edge cases
- –ö–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —Ä–∞–±–æ—Ç–∞ —Å —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–º–∏ —Ç–µ—Ä–º–∏–Ω–∞–º–∏
- –í–∞–ª–∏–¥–∞—Ü–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤

---

## üéØ –ö–õ–Æ–ß–ï–í–´–ï –û–°–û–ë–ï–ù–ù–û–°–¢–ò –†–ï–ê–õ–ò–ó–ê–¶–ò–ò

### __‚úÖ –ü—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞ —Ç–µ–∫—É—â–µ–≥–æ —Ä–µ—à–µ–Ω–∏—è:__

1. __–ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å__ - —Å–∏—Å—Ç–µ–º–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç –ø–æ–≤–µ—Ä—Ö —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π –ª–æ–≥–∏–∫–∏, –Ω–µ –ª–æ–º–∞—è –µ–µ
2. __–ì–∏–±–∫–æ—Å—Ç—å__ - –≤—Å–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —á–µ—Ä–µ–∑ .env, –º–æ–∂–Ω–æ –≤–∫–ª—é—á–∏—Ç—å/–≤—ã–∫–ª—é—á–∏—Ç—å
3. __–ò–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω–æ—Å—Ç—å__ - —Ä–∞—Å–ø–æ–∑–Ω–∞–µ—Ç —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ —Ç–µ—Ä–º–∏–Ω—ã –∏ –≤—Å–µ–≥–¥–∞ –∏—Ö –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç
4. __–§–∏–ª—å—Ç—Ä–∞—Ü–∏—è__ - –æ—Ç—Å–µ–∏–≤–∞–µ—Ç –Ω–µ–∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–≤–Ω—ã–µ —Ñ—Ä–∞–∑—ã, —Å–Ω–∏–∂–∞—è –Ω–∞–≥—Ä—É–∑–∫—É –Ω–∞ AI
5. __–ê–¥–∞–ø—Ç–∏–≤–Ω–æ—Å—Ç—å__ - —Ä–∞–∑–Ω—ã–µ —Ä–µ–∂–∏–º—ã —Ä–∞–±–æ—Ç—ã –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤

### __üîç –û—Ç–ª–∏—á–∏–µ –æ—Ç –ø—Ä–µ–¥—ã–¥—É—â–µ–π –Ω–µ—É–¥–∞—á–Ω–æ–π –ø–æ–ø—ã—Ç–∫–∏ (2025-01-17):__

__–ü—Ä–µ–¥—ã–¥—É—â–∞—è –ø–æ–ø—ã—Ç–∫–∞ (AdaptiveRecordingService):__

- –°–ª–∏—à–∫–æ–º —Å–ª–æ–∂–Ω–∞—è –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞
- –ü—Ä—è–º–æ–µ –≤–º–µ—à–∞—Ç–µ–ª—å—Å—Ç–≤–æ –≤ ARI –ø—Ä–æ—Ü–µ—Å—Å—ã
- –ü—Ä–æ–±–ª–µ–º—ã —Å —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–µ–π
- –î—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏
- –ú–Ω–æ–∂–µ—Å—Ç–≤–æ race conditions
- –ü–æ–ª–Ω—ã–π –æ—Ç–∫–∞–∑ –æ—Ç —Å–∏—Å—Ç–µ–º—ã

__–¢–µ–∫—É—â–µ–µ —Ä–µ—à–µ–Ω–∏–µ (SmartSpeechDetector + SpeechFilter):__

- –ü—Ä–æ—Å—Ç–∞—è –∏ –Ω–∞–¥–µ–∂–Ω–∞—è –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞
- –ü–æ—Å—Ç-–æ–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ—Å–ª–µ ASR
- –ë–µ–∑ –≤–º–µ—à–∞—Ç–µ–ª—å—Å—Ç–≤–∞ –≤ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –ø—Ä–æ—Ü–µ—Å—Å—ã
- –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –Ω–∞ —É—Ä–æ–≤–Ω–µ —Ç–µ–∫—Å—Ç–∞
- –û—Ç—Å—É—Ç—Å—Ç–≤–∏–µ race conditions
- –°–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å —Å –æ—Å–Ω–æ–≤–Ω–æ–π —Å–∏—Å—Ç–µ–º–æ–π

### __üöÄ –ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–Ω—ã–µ –ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞:__

1. __–†–∞–∑–¥–µ–ª–µ–Ω–∏–µ –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç–∏__ - –¥–µ—Ç–µ–∫—Ü–∏—è –∏ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è —Ä–∞–∑–¥–µ–ª–µ–Ω—ã
2. __–ú–æ–¥—É–ª—å–Ω–æ—Å—Ç—å__ - –∫–∞–∂–¥—ã–π –∫–æ–º–ø–æ–Ω–µ–Ω—Ç –º–æ–∂–Ω–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å –æ—Ç–¥–µ–ª—å–Ω–æ
3. __–ö–æ–Ω—Ñ–∏–≥—É—Ä–∏—Ä—É–µ–º–æ—Å—Ç—å__ - –≤—Å–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞—é—Ç—Å—è —á–µ—Ä–µ–∑ .env
4. __–û–±—Ä–∞—Ç–Ω–∞—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å__ - –Ω–µ –ª–æ–º–∞–µ—Ç —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –ª–æ–≥–∏–∫—É
5. __–ú–∞—Å—à—Ç–∞–±–∏—Ä—É–µ–º–æ—Å—Ç—å__ - –ª–µ–≥–∫–æ –¥–æ–±–∞–≤–ª—è—Ç—å –Ω–æ–≤—ã–µ –ø—Ä–∞–≤–∏–ª–∞ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏

---

## üìä –¢–ï–•–ù–ò–ß–ï–°–ö–ê–Ø –†–ï–ê–õ–ò–ó–ê–¶–ò–Ø

### __üèóÔ∏è –ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞ —Å–∏—Å—Ç–µ–º—ã:__

```javascript
–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ‚Üí Asterisk ‚Üí –ó–∞–ø–∏—Å—å —Ä–µ—á–∏ ‚Üí ASR ‚Üí SmartSpeechDetector ‚Üí SpeechFilter ‚Üí AI Agent
                                    ‚Üì
                              (–∞–Ω–∞–ª–∏–∑ –ø–∞—É–∑)  (—Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è —Ç–µ–∫—Å—Ç–∞)
                                    ‚Üì
                              –†–µ—à–µ–Ω–∏–µ: –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –∏–ª–∏ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å
```

### __üîÑ –ê–ª–≥–æ—Ä–∏—Ç–º —Ä–∞–±–æ—Ç—ã:__

1. __–ó–∞–ø–∏—Å—å —Ä–µ—á–∏__ - —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è –∑–∞–ø–∏—Å—å —á–µ—Ä–µ–∑ Asterisk ARI
2. __ASR –æ–±—Ä–∞–±–æ—Ç–∫–∞__ - –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ —Ä–µ—á–∏ –≤ —Ç–µ–∫—Å—Ç —á–µ—Ä–µ–∑ Yandex ASR
3. __SmartSpeechDetector__ - –∞–Ω–∞–ª–∏–∑ –ø–∞—É–∑ –º–µ–∂–¥—É –∞—É–¥–∏–æ —Å–µ–≥–º–µ–Ω—Ç–∞–º–∏
4. __SpeechFilter__ - —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è –Ω–µ–∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–≤–Ω—ã—Ö —Ñ—Ä–∞–∑
5. __–ü—Ä–∏–Ω—è—Ç–∏–µ —Ä–µ—à–µ–Ω–∏—è__ - –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –∏–ª–∏ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å —Ñ—Ä–∞–∑—É
6. __AI Agent__ - –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–≤–Ω—ã—Ö —Ñ—Ä–∞–∑
7. __–û—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é__ - —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è –ª–æ–≥–∏–∫–∞ –æ—Ç–≤–µ—Ç–∞

### __‚öôÔ∏è –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã:__

```python
# –í .env
SPEECH_DETECTION_ENABLED=true    # –í–∫–ª—é—á–µ–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã
SPEECH_SILENCE_TIMEOUT=1.2      # –¢–∞–π–º–∞—É—Ç —Ç–∏—à–∏–Ω—ã (—Å–µ–∫)
SPEECH_MIN_DURATION=0.5        # –ú–∏–Ω. –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Ä–µ—á–∏ (—Å–µ–∫)
SPEECH_MAX_RECORDING_TIME=15.0 # –ú–∞–∫—Å. –≤—Ä–µ–º—è –∑–∞–ø–∏—Å–∏ (—Å–µ–∫)
SPEECH_DEBUG_LOGGING=true      # –î–µ—Ç–∞–ª—å–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
```

---

## üéØ –û–ñ–ò–î–ê–ï–ú–´–ï –†–ï–ó–£–õ–¨–¢–ê–¢–´

### __‚úÖ –ß—Ç–æ –¥–æ–ª–∂–Ω–æ —É–ª—É—á—à–∏—Ç—å—Å—è:__

1. __–°–∫–æ—Ä–æ—Å—Ç—å —Ä–µ–∞–∫—Ü–∏–∏__ - —É–º–µ–Ω—å—à–µ–Ω–∏–µ –ø–∞—É–∑—ã –ø–æ—Å–ª–µ –æ–∫–æ–Ω—á–∞–Ω–∏—è —Ä–µ—á–∏ –∫–ª–∏–µ–Ω—Ç–∞
2. __–ö–∞—á–µ—Å—Ç–≤–æ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏__ - –æ—Ç—Å–µ–≤ –Ω–µ–∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–≤–Ω—ã—Ö —Ñ—Ä–∞–∑
3. __–ò–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω–æ—Å—Ç—å__ - —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö —Ç–µ—Ä–º–∏–Ω–æ–≤
4. __–ì–∏–±–∫–æ—Å—Ç—å__ - –∞–¥–∞–ø—Ç–∞—Ü–∏—è –ø–æ–¥ —Ä–∞–∑–Ω—ã–µ —Å—Ü–µ–Ω–∞—Ä–∏–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
5. __–°—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç—å__ - —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏ –æ—Å–Ω–æ–≤–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã

### __üìä –¶–µ–ª–µ–≤—ã–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏:__

- __–°–∫–æ—Ä–æ—Å—Ç—å –¥–µ—Ç–µ–∫—Ü–∏–∏:__ < 1.2—Å –ø–æ—Å–ª–µ –æ–∫–æ–Ω—á–∞–Ω–∏—è —Ä–µ—á–∏
- __–¢–æ—á–Ω–æ—Å—Ç—å —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏:__ > 95% –¥–ª—è –Ω–µ–∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–≤–Ω—ã—Ö —Ñ—Ä–∞–∑
- __–†–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ —Ç–µ—Ä–º–∏–Ω–æ–≤:__ 100% –¥–ª—è —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö —Ç–µ—Ä–º–∏–Ω–æ–≤
- __–ù–∞–≥—Ä—É–∑–∫–∞ –Ω–∞ AI:__ —Å–Ω–∏–∂–µ–Ω–∏–µ –Ω–∞ 30-50% –∑–∞ —Å—á–µ—Ç —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏
- __–°—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç—å:__ 100% –æ–±—Ä–∞—Ç–Ω–∞—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å

---

## üö® –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ï –ü–†–ê–í–ò–õ–ê –î–õ–Ø –ó–ê–í–ï–†–®–ï–ù–ò–Ø

### __üõ°Ô∏è –°–∏—Å—Ç–µ–º–∞ –∑–∞—â–∏—Ç—ã –æ—Ç –ø–æ—Ç–µ—Ä–∏ –∑–≤—É–∫–∞:__

1. __–û–î–ù–û –ò–ó–ú–ï–ù–ï–ù–ò–ï –ó–ê –†–ê–ó__ - —Å—Ç—Ä–æ–≥–æ–µ —Å–æ–±–ª—é–¥–µ–Ω–∏–µ
2. __–û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–ê–Ø –ü–†–û–í–ï–†–ö–ê –ó–í–£–ö–ê__ –ø–æ—Å–ª–µ –∫–∞–∂–¥–æ–≥–æ –∏–∑–º–µ–Ω–µ–Ω–∏—è
3. __–°–û–ó–î–ê–ù–ò–ï –ë–≠–ö–ê–ü–û–í__ –ø–µ—Ä–µ–¥ –∫–∞–∂–¥—ã–º –∏–∑–º–µ–Ω–µ–Ω–∏–µ–º
4. __–ù–ï–ú–ï–î–õ–ï–ù–ù–´–ô –û–¢–ö–ê–¢__ –ø—Ä–∏ –ª—é–±—ã—Ö –ø—Ä–æ–±–ª–µ–º–∞—Ö

### __üìã –ü–ª–∞–Ω –¥–µ–π—Å—Ç–≤–∏–π –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ –∞–≥–µ–Ω—Ç–∞:__

1. __–°–æ–∑–¥–∞—Ç—å —Ç–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç__ `test_smart_speech.py`
2. __–ó–∞–ø—É—Å—Ç–∏—Ç—å —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ__ –≤—Å–µ—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
3. __–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ__ –∏ –æ—Ç–ª–∞–¥–∫—É
4. __–û–±–Ω–æ–≤–∏—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—é__ –≤ Memory Bank
5. __–ü—Ä–æ–≤–µ—Å—Ç–∏ —Ñ–∏–Ω–∞–ª—å–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ__ –≤ —Ä–µ–∞–ª—å–Ω—ã—Ö —É—Å–ª–æ–≤–∏—è—Ö

### __üîç –ö–ª—é—á–µ–≤—ã–µ –º–æ–º–µ–Ω—Ç—ã –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏:__

- –í—Å–µ –∏–º–ø–æ—Ä—Ç—ã —Ä–∞–±–æ—Ç–∞—é—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ
- –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∏–∑ .env –ø—Ä–∏–º–µ–Ω—è–µ—Ç—Å—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ
- SmartSpeechDetector –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç –æ–∫–æ–Ω—á–∞–Ω–∏—è —Ä–µ—á–∏
- SpeechFilter —Ñ–∏–ª—å—Ç—Ä—É–µ—Ç –Ω–µ–∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–≤–Ω—ã–µ —Ñ—Ä–∞–∑—ã
- –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å –æ—Å–Ω–æ–≤–Ω–æ–π —Å–∏—Å—Ç–µ–º–æ–π —Ä–∞–±–æ—Ç–∞–µ—Ç
- –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é

---

## üìã –ò–¢–û–ì–û–í–´–ô –°–¢–ê–¢–£–°

__–í—ã–ø–æ–ª–Ω–µ–Ω–æ:__ 67% (4/6 –∑–∞–¥–∞—á)\
__–û—Å—Ç–∞–ª–æ—Å—å:__ 33% (2 –∑–∞–¥–∞—á–∏)\
__–°—Ç–∞—Ç—É—Å:__ üîÑ –ì–û–¢–û–í –ö –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Æ\
__–†–∏—Å–∫:__ –ù–ò–ó–ö–ò–ô (—Å–∏—Å—Ç–µ–º–∞ —Å—Ç–∞–±–∏–ª—å–Ω–∞ –∏ –±–µ–∑–æ–ø–∞—Å–Ω–∞)

### __‚úÖ –ì–æ—Ç–æ–≤—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã:__

- SmartSpeechDetector - –ø–æ–ª–Ω–æ—Å—Ç—å—é —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–µ–Ω
- SpeechFilter - –ø–æ–ª–Ω–æ—Å—Ç—å—é —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–µ–Ω
- –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è –≤ stasis_handler_optimized.py - –∑–∞–≤–µ—Ä—à–µ–Ω–∞
- –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –≤ .env - –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞

### __‚ùå –¢—Ä–µ–±—É–µ—Ç—Å—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ:__

- –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã
- –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –∏ –æ—Ç–ª–∞–¥–∫–∏

### __üéØ –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ –∞–≥–µ–Ω—Ç–∞:__

1. –ù–∞—á–∞—Ç—å —Å —Å–æ–∑–¥–∞–Ω–∏—è —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Å–∫—Ä–∏–ø—Ç–∞
2. –¢—â–∞—Ç–µ–ª—å–Ω–æ –ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å –≤—Å–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
3. –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Ä–∞–±–æ—Ç—É –≤ —Ä–µ–∞–ª—å–Ω—ã—Ö —É—Å–ª–æ–≤–∏—è—Ö
4. –û–±–Ω–æ–≤–∏—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—é
5. –£–±–µ–¥–∏—Ç—å—Å—è –≤ —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏ —Å–∏—Å—Ç–µ–º—ã

__–°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –∫ —Ñ–∏–Ω–∞–ª—å–Ω–æ–º—É —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—é –∏ –≤–Ω–µ–¥—Ä–µ–Ω–∏—é!__ üöÄ

–Ø —Å–æ–∑–¥–∞–ª –ø–æ–¥—Ä–æ–±–Ω—ã–π markdown —Ñ–∞–π–ª "—Ä–∞–±–æ—Ç–∞ –¥—Ä—É–≥–æ–≥–æ –∞–≥–µ–Ω—Ç–∞.txt", –≤ –∫–æ—Ç–æ—Ä–æ–º –ø–æ–ª–Ω–æ—Å—Ç—å—é –æ–ø–∏—Å–∞–ª –≤—Å—é –ø—Ä–æ–¥–µ–ª–∞–Ω–Ω—É—é —Ä–∞–±–æ—Ç—É –ø–æ —É–º–µ–Ω—å—à–µ–Ω–∏—é –ø–∞—É–∑—ã –ø–æ—Å–ª–µ –æ—Ç–≤–µ—Ç–∞ –∫–ª–∏–µ–Ω—Ç–∞.

## üìä –ß—Ç–æ –≤–∫–ª—é—á–µ–Ω–æ –≤ –æ—Ç—á–µ—Ç:

### ‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–Ω–∞—è —Ä–∞–±–æ—Ç–∞ (67% –∑–∞–≤–µ—Ä—à–µ–Ω–æ):

1. __SmartSpeechDetector__ - —Å–æ–∑–¥–∞–Ω –∏ –ø–æ–ª–Ω–æ—Å—Ç—å—é —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–µ–Ω, –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –ø–∞—É–∑—ã –º–µ–∂–¥—É –∞—É–¥–∏–æ —Å–µ–≥–º–µ–Ω—Ç–∞–º–∏
2. __SpeechFilter__ - —Å–æ–∑–¥–∞–Ω –∏ –ø–æ–ª–Ω–æ—Å—Ç—å—é —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–µ–Ω, —Ñ–∏–ª—å—Ç—Ä—É–µ—Ç –Ω–µ–∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–≤–Ω—ã–µ —Ñ—Ä–∞–∑—ã –∏ —Ä–∞—Å–ø–æ–∑–Ω–∞–µ—Ç —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ —Ç–µ—Ä–º–∏–Ω—ã
3. __–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è –≤ stasis_handler_optimized.py__ - –∑–∞–≤–µ—Ä—à–µ–Ω–∞, —Å–∏—Å—Ç–µ–º–∞ —É–º–Ω–æ–π –¥–µ—Ç–µ–∫—Ü–∏–∏ –∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω–∞ –≤ –æ—Å–Ω–æ–≤–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
4. __–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –≤ .env__ - –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞, –≤—Å–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —É–ø—Ä–∞–≤–ª—è—é—Ç—Å—è —á–µ—Ä–µ–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è

### ‚ùå –ù–µ–≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–∞—è —Ä–∞–±–æ—Ç–∞ (33% –æ—Å—Ç–∞–ª–æ—Å—å):

1. __–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã__ - –Ω—É–∂–Ω–æ —Å–æ–∑–¥–∞—Ç—å —Ç–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –∏ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Ä–∞–±–æ—Ç—É –≤—Å–µ—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
2. __–ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –∏ –æ—Ç–ª–∞–¥–∫–∏__ - —É–±–µ–¥–∏—Ç—å—Å—è –≤ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π —Ä–∞–±–æ—Ç–µ –∏ –¥–µ—Ç–∞–ª—å–Ω–æ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–∏

### üéØ –ö–ª—é—á–µ–≤—ã–µ –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏ —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏:

- __–ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞__ - —Ä–∞–±–æ—Ç–∞–µ—Ç –ø–æ–≤–µ—Ä—Ö —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π –ª–æ–≥–∏–∫–∏, –Ω–µ –ª–æ–º–∞—è –µ–µ
- __–ò–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω–∞—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è__ - —Ä–∞—Å–ø–æ–∑–Ω–∞–µ—Ç —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ —Ç–µ—Ä–º–∏–Ω—ã –∏ –≤—Å–µ–≥–¥–∞ –∏—Ö –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç
- __–ì–∏–±–∫–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è__ - –≤—Å–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —á–µ—Ä–µ–∑ .env, –º–æ–∂–Ω–æ –≤–∫–ª—é—á–∏—Ç—å/–≤—ã–∫–ª—é—á–∏—Ç—å
- __–ú–æ–¥—É–ª—å–Ω–æ—Å—Ç—å__ - –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã —Ä–∞–∑–¥–µ–ª–µ–Ω—ã –∏ —Ç–µ—Å—Ç–∏—Ä—É—é—Ç—Å—è –æ—Ç–¥–µ–ª—å–Ω–æ

### üîç –û—Ç–ª–∏—á–∏–µ –æ—Ç –ø—Ä–µ–¥—ã–¥—É—â–µ–π –Ω–µ—É–¥–∞—á–Ω–æ–π –ø–æ–ø—ã—Ç–∫–∏:

–í –æ—Ç–ª–∏—á–∏–µ –æ—Ç AdaptiveRecordingService 2025-01-17, —Ç–µ–∫—É—â–µ–µ —Ä–µ—à–µ–Ω–∏–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –ø–æ—Å—Ç-–æ–±—Ä–∞–±–æ—Ç–∫—É –ø–æ—Å–ª–µ ASR, —á—Ç–æ –∏—Å–∫–ª—é—á–∞–µ—Ç –ø—Ä–æ–±–ª–µ–º—ã —Å —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–µ–π ARI –∏ race conditions.

### üìã –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ –∞–≥–µ–Ω—Ç–∞:

1. –°–æ–∑–¥–∞—Ç—å —Ç–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç `test_smart_speech.py`
2. –ü—Ä–æ–≤–µ—Å—Ç–∏ –ø–æ–ª–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Å–µ—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
3. –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∏ –æ—Ç–ª–∞–¥–∫—É
4. –û–±–Ω–æ–≤–∏—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—é –≤ Memory Bank
5. –ü—Ä–æ–≤–µ—Å—Ç–∏ —Ñ–∏–Ω–∞–ª—å–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤ —Ä–µ–∞–ª—å–Ω—ã—Ö —É—Å–ª–æ–≤–∏—è—Ö

–û—Ç—á–µ—Ç —Å–æ–¥–µ—Ä–∂–∏—Ç –≤—Å—é –Ω–µ–æ–±—Ö–æ–¥–∏–º—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è —Ä–∞–±–æ—Ç—ã –¥—Ä—É–≥–∏–º –∞–≥–µ–Ω—Ç–æ–º, –≤–∫–ª—é—á–∞—è —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –¥–µ—Ç–∞–ª–∏, –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—É, –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ —à–∞–≥–∏ –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–∞.

from app.backend.services.tts_adapter import TTSAdapter
from app.backend.services.filler_tts import InstantFillerTTS
from app.backend.services.parallel_tts import ParallelTTSProcessor
from app.backend.services.smart_speech_detector import SmartSpeechDetector
from app.backend.services.speech_filter import SpeechFilter
# –£–¥–∞–ª–µ–Ω adaptive_recording - –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –ø—Ä–æ—Å—Ç–æ–π –ª–æ–≥–∏–∫–µ

logger = logging.getLogger(__name__)

class OptimizedAsteriskAIHandler:
    """
    –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ Asterisk —Å –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–µ–π –≤—Å–µ—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
    
    –ö–æ–º–ø–æ–Ω–µ–Ω—Ç—ã:
    1. Yandex gRPC TTS - –±—ã—Å—Ç—Ä—ã–π —Å–∏–Ω—Ç–µ–∑ —Ä–µ—á–∏
    2. Chunked Response Generator - streaming AI –æ—Ç–≤–µ—Ç—ã
    3. Filler Words - –º–≥–Ω–æ–≤–µ–Ω–Ω—ã–µ –ø—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–µ —Ä–µ–∞–∫—Ü–∏–∏
    4. Parallel TTS Processor - –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ —á–∞–Ω–∫–æ–≤
    """
    
    def __init__(self):
        self.ws_url = "ws://localhost:8088/ari/events?app=asterisk-bot&api_key=asterisk:asterisk123"
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º AI Agent
        try:
            self.agent = Agent()
            logger.info("‚úÖ AI Agent —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ AI Agent: {e}")
            self.agent = None
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º ASR —Å–µ—Ä–≤–∏—Å
        try:
            self.asr = get_asr_service()
            logger.info("‚úÖ ASR —Å–µ—Ä–≤–∏—Å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ ASR: {e}")
            self.asr = None
        
        # –ù–û–í–´–ï –ö–û–ú–ü–û–ù–ï–ù–¢–´ –û–ü–¢–ò–ú–ò–ó–ê–¶–ò–ò
        self.grpc_tts = None
        self.tts_adapter = None
        self.filler_tts = None
        self.parallel_tts = None
        # –£–¥–∞–ª–µ–Ω adaptive_recording - –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –ø—Ä–æ—Å—Ç–æ–π –ª–æ–≥–∏–∫–µ
        
        # –ù–û–í–´–ï –ö–û–ú–ü–û–ù–ï–ù–¢–´ –£–ú–ù–û–ô –î–ï–¢–ï–ö–¶–ò–ò –†–ï–ß–ò
        self.speech_detector = None
        self.speech_filter = None
        self.smart_detection_enabled = os.getenv("SPEECH_DETECTION_ENABLED", "false").lower() == "true"
        self.speech_debug_logging = os.getenv("SPEECH_DEBUG_LOGGING", "false").lower() == "true"
        
        # –ê–∫—Ç–∏–≤–Ω—ã–µ –∑–≤–æ–Ω–∫–∏ —Å –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
        self.active_calls = {}
        
        # –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
        self.SPEECH_END_TIMEOUT = 0.2
        self.BARGE_IN_GUARD_MS = 1500  # –£–≤–µ–ª–∏—á–µ–Ω–æ –¥–ª—è Asterisk
        self.INPUT_DEBOUNCE_MS = 1200
        
        # –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —É–º–Ω–æ–π –¥–µ—Ç–µ–∫—Ü–∏–∏ —Ä–µ—á–∏
        self.silence_timeout = float(os.getenv("SPEECH_SILENCE_TIMEOUT", "1.2"))
        self.min_speech_duration = float(os.getenv("SPEECH_MIN_DURATION", "0.5"))
        self.max_recording_time = float(os.getenv("SPEECH_MAX_RECORDING_TIME", "15.0"))
        
        # –ú–µ—Ç—Ä–∏–∫–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
        self.performance_metrics = {}
        
        logger.info("üöÄ OptimizedAsteriskAIHandler –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
    
    async def initialize_optimization_services(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≤—Å–µ—Ö —Å–µ—Ä–≤–∏—Å–æ–≤ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏"""
        try:
            logger.info("üîÑ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Ä–≤–∏—Å–æ–≤ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏...")
            
            # 1. Yandex gRPC TTS
            self.grpc_tts = YandexGrpcTTS()
            await self.grpc_tts.initialize()
            
            # 2. TTS Adapter (gRPC + HTTP fallback)
            self.tts_adapter = TTSAdapter()
            await self.tts_adapter.initialize()
            
            # 3. Filler TTS
            self.filler_tts = InstantFillerTTS()
            await self.filler_tts.initialize()
            
            # 4. Parallel TTS Processor
            ari_client = AsteriskARIClient()
            self.parallel_tts = ParallelTTSProcessor(self.tts_adapter, ari_client)
            
            # 5. –£–º–Ω–∞—è –¥–µ—Ç–µ–∫—Ü–∏—è —Ä–µ—á–∏
            if self.smart_detection_enabled:
                self.speech_detector = SmartSpeechDetector(
                    silence_timeout=self.silence_timeout,
                    min_speech_duration=self.min_speech_duration
                )
                self.speech_filter = SpeechFilter()
                logger.info(f"‚úÖ –£–º–Ω–∞—è –¥–µ—Ç–µ–∫—Ü–∏—è —Ä–µ—á–∏ –≤–∫–ª—é—á–µ–Ω–∞: timeout={self.silence_timeout}s, min_duration={self.min_speech_duration}s")
            else:
                logger.info("‚ö†Ô∏è –£–º–Ω–∞—è –¥–µ—Ç–µ–∫—Ü–∏—è —Ä–µ—á–∏ –æ—Ç–∫–ª—é—á–µ–Ω–∞")
            
            logger.info("‚úÖ –í—Å–µ —Å–µ—Ä–≤–∏—Å—ã –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —Å–µ—Ä–≤–∏—Å–æ–≤ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏: {e}")
            # Fallback –Ω–∞ —Å—Ç–∞—Ä—ã–µ —Å–µ—Ä–≤–∏—Å—ã
            self.tts = get_yandex_tts_service()
            logger.warning("‚ö†Ô∏è –ò—Å–ø–æ–ª—å–∑—É–µ–º fallback TTS —Å–µ—Ä–≤–∏—Å")
    
    async def handle_stasis_start(self, event):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞—á–∞–ª–æ –∑–≤–æ–Ω–∫–∞ —Å –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–π –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–µ–π"""
        channel_id = event.get('channel', {}).get('id')
        caller_id = event.get('channel', {}).get('caller', {}).get('number', 'Unknown')
        
        logger.info(f"üîî –ù–æ–≤—ã–π –∑–≤–æ–Ω–æ–∫: Channel={channel_id}, Caller={caller_id}")
        
        # –°–æ–∑–¥–∞–µ–º —Å–µ—Å—Å–∏—é –∑–≤–æ–Ω–∫–∞ —Å –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
        session_id = str(uuid.uuid4())
        start_time = datetime.now(timezone.utc)

        self.active_calls[channel_id] = {
            "session_id": session_id,
            "caller_id": caller_id,
            "start_time": start_time.isoformat(),
            "transcript": [],
            "status": "Started",
            
            # –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
            "response_buffer": "",
            "buffer_timer": None,
            "tts_queue": [],
            "is_recording": False,
            "tts_busy": False,
            "current_playback": None,
            "last_speak_started_at": 0,
            "is_speaking": False,
            "preload_cache": {},
            
            # –ù–æ–≤—ã–µ –º–µ—Ç—Ä–∏–∫–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
            "performance_start": time.time(),
            "asr_complete_time": None,
            "first_chunk_time": None,
            "first_audio_time": None,
            "user_interrupted": False
        }
        
        # –ö–∞–Ω–∞–ª —É–∂–µ –ø—Ä–∏–Ω—è—Ç –≤ dialplan
        async with AsteriskARIClient() as ari:
            logger.info(f"‚úÖ –ó–≤–æ–Ω–æ–∫ —É–∂–µ –ø—Ä–∏–Ω—è—Ç –≤ dialplan: {channel_id}")
            
            # üéØ –ö–†–ò–¢–ò–ß–ï–°–ö–û–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ—Ç–≤–µ—á–∞–µ–º –Ω–∞ –∫–∞–Ω–∞–ª –¥–ª—è ARI playback
            try:
                await ari.answer_channel(channel_id)
                logger.info(f"‚úÖ –ö–∞–Ω–∞–ª {channel_id} –æ—Ç–≤–µ—á–µ–Ω –¥–ª—è ARI playback")
                
                # –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è —Å—Ç–∞–±–∏–ª–∏–∑–∞—Ü–∏–∏ –∫–∞–Ω–∞–ª–∞
                await asyncio.sleep(0.1)
                
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –∫–∞–Ω–∞–ª {channel_id}: {e}")
                # –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º —Ä–∞–±–æ—Ç—É –¥–∞–∂–µ –µ—Å–ª–∏ –æ—Ç–≤–µ—Ç –Ω–µ —É–¥–∞–ª—Å—è
            
            # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –æ—Ç AI Agent
            if self.agent:
                greeting = self.agent.prompts.get("greeting", "–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! –ß–µ–º –º–æ–≥—É –ø–æ–º–æ—á—å?")
            else:
                greeting = "–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! –°–∏—Å—Ç–µ–º–∞ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞."

            # –î–æ–±–∞–≤–ª—è–µ–º –≤ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ç
            self.active_calls[channel_id]["transcript"].append({
                "speaker": "bot",
                "text": greeting,
                "timestamp": datetime.now(timezone.utc).isoformat()
            })

            # –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ —á–µ—Ä–µ–∑ TTS Adapter
            if self.tts_adapter:
                await self.speak_optimized(channel_id, greeting)
            else:
                # Fallback –Ω–∞ —Å—Ç–∞—Ä—ã–π –º–µ—Ç–æ–¥
                await self.speak_queued(channel_id, greeting)
            
            logger.info(f"üé§ –ì–æ—Ç–æ–≤ –∫ –ø—Ä–∏–µ–º—É —Ä–µ—á–∏ –æ—Ç {caller_id}")

    async def process_user_speech_optimized(self, channel_id: str, audio_path: str):
        """
        –û–ü–¢–ò–ú–ò–ó–ò–†–û–í–ê–ù–ù–ê–Ø –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ—á–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        –¶–ï–õ–¨: 1.1 —Å–µ–∫—É–Ω–¥—ã –æ—Ç ASR –¥–æ –ø–µ—Ä–≤–æ–≥–æ –∑–≤—É–∫–∞
        """
        if channel_id not in self.active_calls:
            logger.warning(f"–ö–∞–Ω–∞–ª {channel_id} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–≤–æ–Ω–∫–∞—Ö")
            return

        call_data = self.active_calls[channel_id]
        session_id = call_data["session_id"]
        overall_start = time.time()

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–∞–Ω–∞–ª –µ—â–µ –∞–∫—Ç–∏–≤–µ–Ω
        if call_data.get("status") == "Completed":
            logger.info(f"üö´ –ö–∞–Ω–∞–ª {channel_id} —É–∂–µ –∑–∞–≤–µ—Ä—à–µ–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É —Ä–µ—á–∏")
            return

        try:
            logger.info(f"üéØ –û–ü–¢–ò–ú–ò–ó–ò–†–û–í–ê–ù–ù–ê–Ø –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ—á–∏ –¥–ª—è –∫–∞–Ω–∞–ª–∞ {channel_id}")
            
            # –≠–¢–ê–ü 1.2: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–∑–º–µ—Ä–∞ –∞—É–¥–∏–æ —Ñ–∞–π–ª–∞ –ø–µ—Ä–µ–¥ ASR
            if not os.path.exists(audio_path):
                logger.warning(f"‚ö†Ô∏è –ê—É–¥–∏–æ —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {audio_path}")
                return
                
            file_size = os.path.getsize(audio_path)
            if file_size < 1000:  # –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä 1KB
                logger.warning(f"‚ö†Ô∏è –ê—É–¥–∏–æ —Ñ–∞–π–ª —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π: {file_size} bytes, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º ASR")
                return
                
            logger.info(f"‚úÖ –ê—É–¥–∏–æ —Ñ–∞–π–ª –ø—Ä–æ–≤–µ—Ä–µ–Ω: {file_size} bytes")
            
            # 1. ASR: –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Ä–µ—á—å –≤ —Ç–µ–∫—Å—Ç
            if self.asr:
                logger.info(f"üé§ –ó–∞–ø—É—Å–∫–∞–µ–º ASR –¥–ª—è —Ñ–∞–π–ª–∞: {audio_path}")
                user_text = await self.asr.speech_to_text(audio_path)
                normalized_text = normalize_text(user_text)
                
                asr_complete_time = time.time()
                call_data["asr_complete_time"] = asr_complete_time
                
                logger.info(f"üé§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–∫–∞–∑–∞–ª: '{user_text}' ‚Üí '{normalized_text}'")

                # üéØ –ö–†–ò–¢–ò–ß–ï–°–ö–û–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –ø—É—Å—Ç–æ–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç ASR
                if not normalized_text or not normalized_text.strip():
                    logger.warning(f"‚ö†Ô∏è ASR –≤–µ—Ä–Ω—É–ª –ø—É—Å—Ç–æ–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É")
                    return

                # üß† –£–ú–ù–ê–Ø –§–ò–õ–¨–¢–†–ê–¶–ò–Ø: –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–≤–Ω–æ—Å—Ç—å —Ä–µ—á–∏
                if self.smart_detection_enabled and self.speech_filter:
                    if self.speech_debug_logging:
                        analysis = self.speech_filter.get_detailed_analysis(normalized_text)
                        logger.info(f"üß† –ê–Ω–∞–ª–∏–∑ —Ä–µ—á–∏: {analysis}")
                    
                    if not self.speech_filter.is_informative(normalized_text):
                        logger.info(f"üóëÔ∏è –†–µ—á—å –Ω–µ–∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–≤–Ω–∞: '{normalized_text}' - –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É")
                        
                        # –î–æ–±–∞–≤–ª—è–µ–º –≤ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ç —Å –ø–æ–º–µ—Ç–∫–æ–π
                        call_data["transcript"].append({
                            "speaker": "user",
                            "text": normalized_text,
                            "raw": user_text,
                            "timestamp": datetime.now(timezone.utc).isoformat(),
                            "filtered": True,
                            "filter_reason": "non_informative"
                        })
                        
                        # –ó–∞–ø—É—Å–∫–∞–µ–º –Ω–æ–≤—É—é –∑–∞–ø–∏—Å—å –ø–æ—Å–ª–µ –Ω–µ–∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–≤–Ω–æ–π —Ñ—Ä–∞–∑—ã
                        await asyncio.sleep(0.5)  # –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞
                        await self.start_user_recording(channel_id)
                        return
                    else:
                        logger.info(f"‚úÖ –†–µ—á—å –∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–≤–Ω–∞: '{normalized_text}' - –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É")

                # –î–æ–±–∞–≤–ª—è–µ–º –≤ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ç
                call_data["transcript"].append({
                    "speaker": "user",
                    "text": normalized_text,
                    "raw": user_text,
                    "timestamp": datetime.now(timezone.utc).isoformat()
                })
            else:
                logger.warning("ASR —Å–µ—Ä–≤–∏—Å –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
                normalized_text = "–ò–∑–≤–∏–Ω–∏—Ç–µ, —Å–∏—Å—Ç–µ–º–∞ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è —Ä–µ—á–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞"

            # 2. –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º TTS –ø—Ä–∏ barge-in
            await self.stop_tts_on_barge_in_optimized(channel_id, "UserSpeech")

            # 3. –û–ü–¢–ò–ú–ò–ó–ò–†–û–í–ê–ù–ù–ê–Ø AI –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Å chunking
            if self.agent and normalized_text:
                logger.info(f"ü§ñ –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –û–ü–¢–ò–ú–ò–ó–ò–†–û–í–ê–ù–ù–´–ô –æ—Ç–≤–µ—Ç –æ—Ç AI –∞–≥–µ–Ω—Ç–∞")
                
                try:
                    # –ó–∞–ø—É—Å–∫–∞–µ–º filler word –ù–ï–ú–ï–î–õ–ï–ù–ù–û
                    filler_task = asyncio.create_task(
                        self._play_instant_filler(channel_id, normalized_text)
                    )
                    
                    # –í–†–ï–ú–ï–ù–ù–û: –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π –º–µ—Ç–æ–¥ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
                    # TODO: –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ chunked generator –ø–æ—Å–ª–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è
                    logger.info("üîÑ –í–†–ï–ú–ï–ù–ù–û: –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π AI response –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è")
                    
                    # –ü–æ–ª—É—á–∞–µ–º –æ–±—ã—á–Ω—ã–π response generator –æ—Ç AI Agent
                    response_generator = self.agent.get_response_generator(normalized_text, session_id)
                    
                    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º AI –æ—Ç–≤–µ—Ç—ã —á–µ—Ä–µ–∑ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π –º–µ—Ç–æ–¥
                    await self.process_ai_response_streaming(channel_id, response_generator)
                    
                    # –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è filler
                    await filler_task
                    
                    total_time = time.time() - overall_start
                    logger.info(f"‚úÖ –û–ü–¢–ò–ú–ò–ó–ò–†–û–í–ê–ù–ù–ê–Ø –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞: {total_time:.2f}s")
                    
                    # –õ–æ–≥–∏—Ä—É–µ–º –º–µ—Ç—Ä–∏–∫–∏
                    self._log_performance_metrics(channel_id, total_time)
                    
                except Exception as ai_error:
                    logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ AI: {ai_error}", exc_info=True)
                    # Fallback –Ω–∞ —Å—Ç–∞—Ä—É—é —Å–∏—Å—Ç–µ–º—É
                    await self._fallback_to_old_system(channel_id, normalized_text)
            else:
                logger.warning("AI Agent –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –∏–ª–∏ —Ç–µ–∫—Å—Ç –ø—É—Å—Ç–æ–π")
                await self.speak_optimized(channel_id, "–ò–∑–≤–∏–Ω–∏—Ç–µ, —Å–∏—Å—Ç–µ–º–∞ –ò–ò –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞")

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ä–µ—á–∏: {e}", exc_info=True)

    async def _play_instant_filler(self, channel_id: str, user_text: str):
        """–í–æ—Å–ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç –º–≥–Ω–æ–≤–µ–Ω–Ω—ã–π filler word"""
        try:
            if not self.filler_tts:
                return
                
            filler_start = time.time()
            
            # –ü–æ–ª—É—á–∞–µ–º –º–≥–Ω–æ–≤–µ–Ω–Ω—ã–π filler
            filler_audio = await self.filler_tts.get_instant_filler(user_text)
            
            if filler_audio:
                # –í–æ—Å–ø—Ä–æ–∏–∑–≤–æ–¥–∏–º –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ
                await self._play_audio_data(channel_id, filler_audio)
                
                filler_time = time.time() - filler_start
                logger.info(f"‚ö° Filler played: {filler_time:.2f}s")
                
                # –õ–æ–≥–∏—Ä—É–µ–º –º–µ—Ç—Ä–∏–∫—É
                call_data = self.active_calls.get(channel_id, {})
                call_data["filler_time"] = filler_time
            
        except Exception as e:
            logger.error(f"‚ùå Filler playback error: {e}")

    async def process_chunked_ai_response(self, channel_id: str, chunked_generator):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç chunked AI –æ—Ç–≤–µ—Ç—ã —á–µ—Ä–µ–∑ Parallel TTS Processor"""
        try:
            if not self.parallel_tts:
                logger.warning("Parallel TTS Processor –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
                return
            
            # –ò—Ç–µ—Ä–∏—Ä—É–µ–º chunked generator
            async for chunk_data in chunked_generator:
                # –ó–∞–ø—É—Å–∫–∞–µ–º TTS –∫–∞–∂–¥–æ–≥–æ —á–∞–Ω–∫–∞ –ù–ï–ú–ï–î–õ–ï–ù–ù–û (–ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ)
                await self.parallel_tts.process_chunk_immediate(channel_id, chunk_data)
                
                # –õ–æ–≥–∏—Ä—É–µ–º –∫—Ä–∏—Ç–∏—á–µ—Å–∫—É—é –º–µ—Ç—Ä–∏–∫—É
                if chunk_data.get("is_first"):
                    first_chunk_time = time.time() - self.active_calls[channel_id]["performance_start"]
                    logger.info(f"üéØ FIRST CHUNK GENERATED: {first_chunk_time:.2f}s")
                    self.active_calls[channel_id]["first_chunk_time"] = first_chunk_time
                    
        except Exception as e:
            logger.error(f"‚ùå Chunked AI response error: {e}")

    async def process_ai_response_streaming(self, channel_id: str, response_generator):
        """–ü–æ—Ç–æ–∫–æ–≤–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–∞ AI —Å —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—è–º–∏ | (–∏–∑ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–π –≤–µ—Ä—Å–∏–∏)."""
        import time
        stasis_start = time.time()
        logger.info(f"‚è±Ô∏è –ü–†–û–§–ò–õ–ò–†–û–í–ê–ù–ò–ï STASIS: –ù–∞—á–∏–Ω–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É AI response –¥–ª—è –∫–∞–Ω–∞–ª–∞ {channel_id}")
        
        if channel_id not in self.active_calls:
            return
        
        call_data = self.active_calls[channel_id]
        
        # –ù–∞–∫–∞–ø–ª–∏–≤–∞–µ–º chunks –æ—Ç AI Agent
        first_chunk = True
        chunk_count = 0
        
        for chunk in response_generator:
            if first_chunk:
                first_chunk_time = time.time() - stasis_start
                logger.info(f"‚è±Ô∏è –ü–†–û–§–ò–õ–ò–†–û–í–ê–ù–ò–ï STASIS: –ü–µ—Ä–≤—ã–π —á–∞–Ω–∫ –ø–æ–ª—É—á–µ–Ω —á–µ—Ä–µ–∑ {first_chunk_time:.3f}—Å")
                first_chunk = False
            
            if chunk:
                chunk_count += 1
                call_data["response_buffer"] += chunk
                
                # –ü—Ä–æ–∏–≥—Ä—ã–≤–∞–µ–º –∫–∞–∂–¥–æ–µ –∑–∞–≤–µ—Ä—à—ë–Ω–Ω–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –ø–æ | (–∫–∞–∫ –≤ Voximplant)
                while "|" in call_data["response_buffer"]:
                    idx = call_data["response_buffer"].index("|")
                    sentence = self.clean_text(call_data["response_buffer"][:idx])
                    call_data["response_buffer"] = call_data["response_buffer"][idx + 1:]
                    
                    if sentence:
                        await self.speak_optimized(channel_id, sentence)
                
                # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ç–∞–π–º–µ—Ä –¥–ª—è –æ—Å—Ç–∞—Ç–∫–∞
                if call_data["buffer_timer"]:
                    call_data["buffer_timer"].cancel()
                
                # –°—Ç—Ä–∞—Ö–æ–≤–æ—á–Ω—ã–π —Ç–∞–π–º–µ—Ä –¥–ª—è "—Ö–≤–æ—Å—Ç–∞" –±–µ–∑ | (–∫–∞–∫ –≤ Voximplant)
                if call_data["response_buffer"].strip():
                    call_data["buffer_timer"] = asyncio.create_task(
                        self.flush_response_buffer(channel_id)
                    )
        
        total_stasis_time = time.time() - stasis_start
        logger.info(f"‚è±Ô∏è –ü–†–û–§–ò–õ–ò–†–û–í–ê–ù–ò–ï STASIS: –û–±—Ä–∞–±–æ—Ç–∫–∞ AI response –∑–∞–Ω—è–ª–∞ {total_stasis_time:.3f}—Å, —á–∞–Ω–∫–æ–≤: {chunk_count}")
    
    async def flush_response_buffer(self, channel_id: str):
        """–°—Ç—Ä–∞—Ö–æ–≤–æ—á–Ω—ã–π —Ç–∞–π–º–µ—Ä –¥–ª—è –æ—Å—Ç–∞—Ç–∫–∞ –±–µ–∑ | (–∏–∑ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–π –≤–µ—Ä—Å–∏–∏)."""
        await asyncio.sleep(self.SPEECH_END_TIMEOUT)
        
        if channel_id not in self.active_calls:
            return
        
        call_data = self.active_calls[channel_id]
        
        if call_data["response_buffer"].strip():
            tail = self.clean_text(call_data["response_buffer"])
            call_data["response_buffer"] = ""
            call_data["buffer_timer"] = None
            
            if tail:
                await self.speak_optimized(channel_id, tail)
    
    def clean_text(self, text: str) -> str:
        """–û—á–∏—â–∞–µ—Ç —Ç–µ–∫—Å—Ç –æ—Ç –ª–∏—à–Ω–∏—Ö —Å–∏–º–≤–æ–ª–æ–≤ (–∏–∑ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–π –≤–µ—Ä—Å–∏–∏)."""
        if not text:
            return ""
        
        # –£–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã –∏ –ø–µ—Ä–µ–Ω–æ—Å—ã
        text = text.strip()
        text = " ".join(text.split())
        
        return text

    async def speak_optimized(self, channel_id: str, text: str):
        """–û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ —á–µ—Ä–µ–∑ TTS Adapter"""
        try:
            if not self.tts_adapter:
                # Fallback –Ω–∞ —Å—Ç–∞—Ä—ã–π –º–µ—Ç–æ–¥
                await self.speak_queued(channel_id, text)
                return
            
            # –í–†–ï–ú–ï–ù–ù–û: –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π TTS –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
            # TODO: –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ TTS Adapter –ø–æ—Å–ª–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ñ–æ—Ä–º–∞—Ç–∞
            logger.info("üîÑ –í–†–ï–ú–ï–ù–ù–û: –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π TTS –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è")
            
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π TTS —Å–µ—Ä–≤–∏—Å
            from app.backend.services.yandex_tts_service import get_yandex_tts_service
            original_tts = get_yandex_tts_service()
            
            # –°–æ–∑–¥–∞–µ–º —Ñ–∞–π–ª —á–µ—Ä–µ–∑ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π TTS
            timestamp = datetime.now().strftime('%H%M%S%f')[:-3]
            audio_filename = f"stream_{channel_id}_{timestamp}"
            sound_filename = await original_tts.text_to_speech(text, audio_filename)
            
            if sound_filename:
                # –í–æ—Å–ø—Ä–æ–∏–∑–≤–æ–¥–∏–º —á–µ—Ä–µ–∑ ARI (–∫–∞–∫ –≤ –æ—Ä–∏–≥–∏–Ω–∞–ª–µ)
                async with AsteriskARIClient() as ari:
                    playback_id = await ari.play_sound(channel_id, sound_filename, lang=None)
                    
                    if playback_id:
                        # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –∫–∞–Ω–∞–ª–∞
                        if channel_id in self.active_calls:
                            call_data = self.active_calls[channel_id]
                            call_data["current_playback"] = playback_id
                            call_data["is_speaking"] = True
                            call_data["last_speak_started_at"] = int(time.time() * 1000)
                        
                        logger.info(f"‚úÖ –ê—É–¥–∏–æ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç—Å—è —á–µ—Ä–µ–∑ ARI: {playback_id}")
                    else:
                        logger.warning("‚ö†Ô∏è ARI playback –Ω–µ —É–¥–∞–ª—Å—è")
            else:
                logger.warning("–û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π TTS –Ω–µ –≤–µ—Ä–Ω—É–ª –∏–º—è —Ñ–∞–π–ª–∞")
                
        except Exception as e:
            logger.error(f"‚ùå Optimized speak error: {e}")
            # Fallback –Ω–∞ —Å—Ç–∞—Ä—ã–π –º–µ—Ç–æ–¥
            await self.speak_queued(channel_id, text)

    async def _play_audio_data(self, channel_id: str, audio_data: bytes):
        """–ü–†–ê–í–ò–õ–¨–ù–ê–Ø –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∞—É–¥–∏–æ –¥–∞–Ω–Ω—ã—Ö –æ—Ç Yandex gRPC TTS"""
        try:
            if not audio_data:
                logger.warning("‚ö†Ô∏è –ü—É—Å—Ç—ã–µ –∞—É–¥–∏–æ –¥–∞–Ω–Ω—ã–µ")
                return
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∞—É–¥–∏–æ –¥–∞–Ω–Ω—ã–µ –≤–æ –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
            timestamp = datetime.now().strftime('%H%M%S%f')[:-3]  # –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥—ã
            temp_filename = f"stream_{channel_id}_{timestamp}.wav"
            temp_path = f"/var/lib/asterisk/sounds/{temp_filename}"
            
            # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
            os.makedirs(os.path.dirname(temp_path), exist_ok=True)
            
            # üéØ –ö–†–ò–¢–ò–ß–ï–°–ö–û–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö
            header = audio_data[:12]
            
            if header.startswith(b'RIFF') and b'WAVE' in header:
                # ‚úÖ –£–∂–µ –≥–æ—Ç–æ–≤—ã–π WAV —Ñ–∞–π–ª - —Å–æ—Ö—Ä–∞–Ω—è–µ–º –∫–∞–∫ –µ—Å—Ç—å
                logger.info("‚úÖ WAV —Ñ–∞–π–ª —Å –∑–∞–≥–æ–ª–æ–≤–∫–∞–º–∏ - —Å–æ—Ö—Ä–∞–Ω—è–µ–º –∫–∞–∫ –µ—Å—Ç—å")
                with open(temp_path, 'wb') as f:
                    f.write(audio_data)
            else:
                # üîÑ Raw LPCM - –¥–æ–±–∞–≤–ª—è–µ–º WAV –∑–∞–≥–æ–ª–æ–≤–∫–∏
                logger.info("üîÑ Raw LPCM - –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ WAV")
                await self._convert_lpcm_to_wav(audio_data, temp_path)
            
            logger.info(f"üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω –∞—É–¥–∏–æ —Ñ–∞–π–ª: {temp_path} ({len(audio_data)} bytes)")
            
            # –í–æ—Å–ø—Ä–æ–∏–∑–≤–æ–¥–∏–º —á–µ—Ä–µ–∑ ARI (–∫–∞–∫ –≤ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–º –∫–æ–¥–µ)
            async with AsteriskARIClient() as ari:
                playback_id = await ari.play_sound(channel_id, temp_filename[:-4], lang=None)  # —É–±–∏—Ä–∞–µ–º .wav
                
                if playback_id:
                    # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –∫–∞–Ω–∞–ª–∞
                    if channel_id in self.active_calls:
                        call_data = self.active_calls[channel_id]
                        call_data["current_playback"] = playback_id
                        call_data["is_speaking"] = True
                        call_data["last_speak_started_at"] = int(time.time() * 1000)
                    
                    logger.info(f"‚úÖ –ê—É–¥–∏–æ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç—Å—è —á–µ—Ä–µ–∑ ARI: {playback_id}")
                else:
                    logger.warning("‚ö†Ô∏è ARI playback –Ω–µ —É–¥–∞–ª—Å—è, –ø—Ä–æ–±—É–µ–º fallback —á–µ—Ä–µ–∑ dialplan")
                    # FALLBACK: –ò—Å–ø–æ–ª—å–∑—É–µ–º dialplan Playback (–∫–∞–∫ –≤ –æ—Ä–∏–≥–∏–Ω–∞–ª–µ)
                    fallback_success = await self.playback_via_dialplan(channel_id, temp_filename[:-4])
                    if fallback_success:
                        logger.info("‚úÖ –ê—É–¥–∏–æ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç—Å—è —á–µ—Ä–µ–∑ dialplan fallback")
                        if channel_id in self.active_calls:
                            call_data = self.active_calls[channel_id]
                            call_data["current_playback"] = f"dialplan_{temp_filename[:-4]}"
                            call_data["is_speaking"] = True
                            call_data["last_speak_started_at"] = int(time.time() * 1000)
                    else:
                        logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ—Å—Ç–∏ –∞—É–¥–∏–æ –Ω–∏ —á–µ—Ä–µ–∑ ARI, –Ω–∏ —á–µ—Ä–µ–∑ dialplan")
            
            # –û—á–∏—â–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª –ø–æ—Å–ª–µ –Ω–µ–±–æ–ª—å—à–æ–π –∑–∞–¥–µ—Ä–∂–∫–∏
            # (–¥–∞–µ–º –≤—Ä–µ–º—è ARI –ø—Ä–æ—á–∏—Ç–∞—Ç—å —Ñ–∞–π–ª)
            asyncio.create_task(self._cleanup_temp_file(temp_path, delay=5.0))
            
        except Exception as e:
            logger.error(f"‚ùå Audio playback error: {e}")
    
    async def _convert_lpcm_to_wav(self, lpcm_data: bytes, output_path: str):
        """–ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç raw LPCM –≤ WAV —Ñ–∞–π–ª —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ –∑–∞–≥–æ–ª–æ–≤–∫–∞–º–∏ –¥–ª—è Asterisk"""
        try:
            import wave
            
            # –û–ø—Ç–∏–º–∞–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è Asterisk
            sample_rate = 8000  # 8kHz –¥–ª—è –ª—É—á—à–µ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
            channels = 1        # mono
            sample_width = 2    # 16-bit
            
            with wave.open(output_path, 'wb') as wav_file:
                wav_file.setnchannels(channels)
                wav_file.setsampwidth(sample_width)
                wav_file.setframerate(sample_rate)
                wav_file.writeframes(lpcm_data)
            
            logger.info(f"üîÑ LPCM –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–Ω –≤ WAV: {output_path}")
            logger.info(f"üìä –ü–∞—Ä–∞–º–µ—Ç—Ä—ã: {sample_rate}Hz, {channels}ch, {sample_width*8}bit")
            
        except Exception as e:
            logger.error(f"‚ùå LPCM to WAV conversion error: {e}")
            # Fallback: —Å–æ—Ö—Ä–∞–Ω—è–µ–º –∫–∞–∫ –µ—Å—Ç—å
            with open(output_path, 'wb') as f:
                f.write(lpcm_data)
    
    async def _cleanup_temp_file(self, file_path: str, delay: float = 5.0):
        """–û—á–∏—â–∞–µ—Ç –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª –ø–æ—Å–ª–µ –∑–∞–¥–µ—Ä–∂–∫–∏"""
        try:
            await asyncio.sleep(delay)
            if os.path.exists(file_path):
                os.remove(file_path)
                logger.debug(f"üóëÔ∏è –£–¥–∞–ª–µ–Ω –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª: {file_path}")
        except Exception as e:
            logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª {file_path}: {e}")
    
    async def playback_via_dialplan(self, channel_id: str, filename: str) -> bool:
        """FALLBACK: –ü—Ä–æ–∏–≥—Ä—ã–≤–∞–Ω–∏–µ —á–µ—Ä–µ–∑ dialplan –µ—Å–ª–∏ ARI –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç."""
        try:
            async with AsteriskARIClient() as ari:
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞–Ω–∞–ª –≤ dialplan –¥–ª—è –ø—Ä–æ–∏–≥—Ä—ã–≤–∞–Ω–∏—è
                url = f"{ari.base_url}/channels/{channel_id}/continue"
                data = {
                    "context": "playback-context",
                    "extension": "play",
                    "priority": 1,
                    "variables": {
                        "SOUND_FILE": filename
                    }
                }
                
                async with ari.session.post(url, json=data) as response:
                    if response.status in (200, 201, 202):
                        logger.info(f"‚úÖ Dialplan playback –∑–∞–ø—É—â–µ–Ω –¥–ª—è {filename}")
                        return True
                    else:
                        logger.error(f"‚ùå Dialplan playback failed: {response.status}")
                        return False
                        
        except Exception as e:
            logger.error(f"‚ùå Dialplan playback error: {e}")
            return False

    async def stop_tts_on_barge_in_optimized(self, channel_id: str, event_name: str):
        """–û–ü–¢–ò–ú–ò–ó–ò–†–û–í–ê–ù–ù–´–ô barge-in —Å –æ—á–∏—Å—Ç–∫–æ–π –≤—Å–µ—Ö –æ—á–µ—Ä–µ–¥–µ–π"""
        call_data = self.active_calls.get(channel_id)
        if not call_data:
            return
        
        # –ó–∞—â–∏—Ç–∞ –æ—Ç –ª–æ–∂–Ω–æ–≥–æ barge-in
        BARGE_IN_GUARD_MS = 1500
        since_start = int(time.time() * 1000) - call_data.get("last_speak_started_at", 0)
        
        if since_start < BARGE_IN_GUARD_MS:
            logger.debug(f"üîá Ignoring barge-in - too early ({since_start}ms)")
            return
        
        logger.info(f"üö´ [OPTIMIZED BARGE-IN] {event_name} ‚Üí stopping all TTS processing")
        
        # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–µ–∫—É—â–µ–µ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ
        if call_data.get("current_playback"):
            try:
                async with AsteriskARIClient() as ari:
                    await ari.stop_playback(call_data["current_playback"])
            except:
                pass
        
        # –ö–†–ò–¢–ò–ß–ù–û: –û—á–∏—â–∞–µ–º –≤—Å–µ –æ—á–µ—Ä–µ–¥–∏ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ–≥–æ TTS
        if self.parallel_tts:
            await self.parallel_tts.clear_all_queues(channel_id)
        
        # –û—Ç–º–µ—á–∞–µ–º –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏–µ
        call_data["user_interrupted"] = True
        call_data["barge_in_time"] = time.time()
        
        logger.info("‚úÖ Optimized barge-in processed - ready for new input")

    async def _fallback_to_old_system(self, channel_id: str, user_text: str):
        """Fallback –Ω–∞ —Å—Ç–∞—Ä—É—é —Å–∏—Å—Ç–µ–º—É –ø—Ä–∏ –æ—à–∏–±–∫–∞—Ö –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏"""
        try:
            logger.warning("üîÑ Falling back to old system")
            
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞—Ä—ã–π –º–µ—Ç–æ–¥ –æ–±—Ä–∞–±–æ—Ç–∫–∏
            if self.agent:
                response_generator = self.agent.get_response_generator(user_text, self.active_calls[channel_id]["session_id"])
                await self.process_ai_response_streaming_old(channel_id, response_generator)
            else:
                await self.speak_queued(channel_id, "–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –≤ —Å–∏—Å—Ç–µ–º–µ")
                
        except Exception as e:
            logger.error(f"‚ùå Fallback system error: {e}")

    async def process_ai_response_streaming_old(self, channel_id: str, response_generator):
        """–°—Ç–∞—Ä—ã–π –º–µ—Ç–æ–¥ –ø–æ—Ç–æ–∫–æ–≤–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏ (fallback)"""
        # –ö–æ–ø–∏—Ä—É–µ–º –ª–æ–≥–∏–∫—É –∏–∑ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–≥–æ StasisHandler
        # ... (–∫–æ–¥ –∏–∑ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–≥–æ –º–µ—Ç–æ–¥–∞)
        pass

    async def speak_queued(self, channel_id: str, text: str):
        """–°—Ç–∞—Ä—ã–π –º–µ—Ç–æ–¥ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è (fallback)"""
        # –ö–æ–ø–∏—Ä—É–µ–º –ª–æ–≥–∏–∫—É –∏–∑ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–≥–æ StasisHandler
        # ... (–∫–æ–¥ –∏–∑ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–≥–æ –º–µ—Ç–æ–¥–∞)
        pass

    def _log_performance_metrics(self, channel_id: str, total_time: float):
        """–õ–æ–≥–∏—Ä—É–µ—Ç –º–µ—Ç—Ä–∏–∫–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏"""
        call_data = self.active_calls.get(channel_id, {})
        
        metrics = {
            "total_time": total_time,
            "asr_complete_time": call_data.get("asr_complete_time"),
            "first_chunk_time": call_data.get("first_chunk_time"),
            "first_audio_time": call_data.get("first_audio_time"),
            "filler_time": call_data.get("filler_time")
        }
        
        self.performance_metrics[channel_id] = metrics
        
        logger.info(f"üìä Performance metrics for {channel_id}: {metrics}")

    # –û—Å—Ç–∞–ª—å–Ω—ã–µ –º–µ—Ç–æ–¥—ã –∏–∑ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–≥–æ StasisHandler...
    # (handle_channel_destroyed, clean_text, –∏ —Ç.–¥.)
    
    async def handle_channel_destroyed(self, event):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –∑–≤–æ–Ω–∫–∞"""
        channel_id = event.get('channel', {}).get('id')
        
        if channel_id in self.active_calls:
            call_data = self.active_calls[channel_id]
            call_data["status"] = "Completed"
            end_time = datetime.now(timezone.utc)
            
            logger.info(f"üìû –ó–≤–æ–Ω–æ–∫ –∑–∞–≤–µ—Ä—à–µ–Ω: {channel_id}")
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ª–æ–≥ –∑–≤–æ–Ω–∫–∞
            try:
                log_record = {
                    "id": call_data["session_id"],
                    "callerId": call_data["caller_id"],
                    "startTime": call_data["start_time"],
                    "endTime": end_time.isoformat(),
                    "status": call_data["status"],
                    "transcript": call_data["transcript"],
                    "performance_metrics": self.performance_metrics.get(channel_id, {})
                }
                await insert_log(log_record)
                logger.info(f"üíæ –õ–æ–≥ —Å–æ—Ö—Ä–∞–Ω–µ–Ω –¥–ª—è –∑–≤–æ–Ω–∫–∞ {call_data['session_id']}")
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ª–æ–≥–∞: {e}")
            
            # –£–¥–∞–ª—è–µ–º –∏–∑ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–≤–æ–Ω–∫–æ–≤
            del self.active_calls[channel_id]
            if channel_id in self.performance_metrics:
                del self.performance_metrics[channel_id]

    def clean_text(self, text: str) -> str:
        """–û—á–∏—Å—Ç–∫–∞ —Ç–µ–∫—Å—Ç–∞ –æ—Ç —Å–ª—É–∂–µ–±–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤"""
        import re
        text = str(text).replace("|", " ").replace("*", " ")
        text = re.sub(r'\s+', ' ', text).strip()
        return text
    
    async def run(self):
        """–û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –æ–±—Ä–∞–±–æ—Ç–∫–∏ WebSocket —Å–æ–±—ã—Ç–∏–π –æ—Ç Asterisk"""
        try:
            async with websockets.connect(self.ws_url) as websocket:
                logger.info("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω –∫ Asterisk ARI WebSocket")
                
                async for message in websocket:
                    try:
                        event = json.loads(message)
                        await self.handle_event(event)
                    except json.JSONDecodeError as e:
                        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON: {e}")
                    except Exception as e:
                        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–±—ã—Ç–∏—è: {e}", exc_info=True)
                        
        except websockets.exceptions.ConnectionClosed:
            logger.warning("üîå WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∑–∞–∫—Ä—ã—Ç–æ")
        except Exception as e:
            logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ WebSocket: {e}", exc_info=True)
    
    async def handle_event(self, event):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å–æ–±—ã—Ç–∏—è –æ—Ç Asterisk ARI"""
        event_type = event.get('type')
        
        if event_type == 'StasisStart':
            await self.handle_stasis_start(event)
        elif event_type == 'ChannelDestroyed':
            await self.handle_channel_destroyed(event)
        elif event_type == 'PlaybackStarted':
            await self.handle_playback_started(event)
        elif event_type == 'PlaybackFinished':
            await self.handle_playback_finished(event)
        elif event_type == 'RecordingFinished':
            await self.handle_recording_finished(event)
        elif event_type == 'UserEvent':
            await self.handle_user_event(event)
        # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –¥—Ä—É–≥–∏—Ö —Å–æ–±—ã—Ç–∏–π –ø–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
    
    async def handle_playback_started(self, event):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞—á–∞–ª–æ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è"""
        playback = event.get('playback', {})
        playback_id = playback.get('id')
        target_uri = playback.get('target_uri', '')
        
        if target_uri.startswith('channel:'):
            channel_id = target_uri.replace('channel:', '')
            if channel_id in self.active_calls:
                call_data = self.active_calls[channel_id]
                call_data["current_playback"] = playback_id
                call_data["is_speaking"] = True
                call_data["last_speak_started_at"] = int(time.time() * 1000)
                logger.info(f"üîä –ù–∞—á–∞–ª–æ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è –¥–ª—è {channel_id}: {playback_id}")
    
    async def handle_playback_finished(self, event):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è - –∑–∞–ø—É—Å–∫–∞–µ—Ç –∑–∞–ø–∏—Å—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        playback = event.get('playback', {})
        playback_id = playback.get('id')
        target_uri = playback.get('target_uri', '')
        
        if target_uri.startswith('channel:'):
            channel_id = target_uri.replace('channel:', '')
            if channel_id in self.active_calls:
                call_data = self.active_calls[channel_id]
                call_data["is_speaking"] = False
                call_data["current_playback"] = None
                logger.info(f"üîá –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è –¥–ª—è {channel_id}: {playback_id}")
                
                # üéØ –ö–†–ò–¢–ò–ß–ï–°–ö–û–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∑–∞–ø–∏—Å—ã–≤–∞–µ—Ç—Å—è –ª–∏ —É–∂–µ
                if call_data.get("is_recording", False):
                    logger.info(f"‚ö†Ô∏è –ó–∞–ø–∏—Å—å —É–∂–µ –∞–∫—Ç–∏–≤–Ω–∞ –¥–ª—è –∫–∞–Ω–∞–ª–∞ {channel_id}, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –∑–∞–ø—É—Å–∫ –Ω–æ–≤–æ–π –∑–∞–ø–∏—Å–∏")
                    return
                
                # –ü–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è –∑–∞–ø—É—Å–∫–∞–µ–º –∑–∞–ø–∏—Å—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                await self.start_user_recording(channel_id)
    
    async def start_user_recording(self, channel_id: str):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –∑–∞–ø–∏—Å—å —Ä–µ—á–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å —É–º–Ω–æ–π –¥–µ—Ç–µ–∫—Ü–∏–µ–π –æ–∫–æ–Ω—á–∞–Ω–∏—è."""
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∑–∞–ø–∏—Å—å –Ω–µ –∑–∞–ø—É—â–µ–Ω–∞ —É–∂–µ
            if channel_id in self.active_calls and self.active_calls[channel_id].get("is_recording"):
                logger.warning(f"‚ö†Ô∏è –ó–∞–ø–∏—Å—å —É–∂–µ –∑–∞–ø—É—â–µ–Ω–∞ –¥–ª—è –∫–∞–Ω–∞–ª–∞ {channel_id}")
                return
            
            # –°–æ–∑–¥–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω–æ–µ –∏–º—è —Ñ–∞–π–ª–∞ —Å UUID
            import uuid
            timestamp = datetime.now().strftime('%Y%m%d_%H%M%S_%f')
            unique_id = str(uuid.uuid4())[:8]
            recording_filename = f"user_{channel_id}_{timestamp}_{unique_id}"
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∑–∞–ø–∏—Å–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–µ–∂–∏–º–∞
            if self.smart_detection_enabled:
                # –í —É–º–Ω–æ–º —Ä–µ–∂–∏–º–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º –∫–æ—Ä–æ—Ç–∫—É—é –∑–∞–ø–∏—Å—å —Å –¥–µ—Ç–µ–∫—Ü–∏–µ–π –æ–∫–æ–Ω—á–∞–Ω–∏—è
                recording_duration = min(self.silence_timeout + 2.0, self.max_recording_time)
                logger.info(f"üé§ –ó–∞–ø—É—Å–∫–∞–µ–º –£–ú–ù–£–Æ –∑–∞–ø–∏—Å—å —Ä–µ—á–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {recording_filename}, duration={recording_duration}s")
            else:
                # –í –æ–±—ã—á–Ω–æ–º —Ä–µ–∂–∏–º–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—É—é –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å
                recording_duration = self.max_recording_time
                logger.info(f"üé§ –ó–∞–ø—É—Å–∫–∞–µ–º –∑–∞–ø–∏—Å—å —Ä–µ—á–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {recording_filename}, duration={recording_duration}s")
            
            async with AsteriskARIClient() as ari:
                recording_id = await ari.start_recording(channel_id, recording_filename, max_duration=int(recording_duration))
                
                # Status 201 –æ–∑–Ω–∞—á–∞–µ—Ç —É—Å–ø–µ—à–Ω—ã–π –∑–∞–ø—É—Å–∫ –∑–∞–ø–∏—Å–∏
                if recording_id and channel_id in self.active_calls:
                    self.active_calls[channel_id]["current_recording"] = recording_id
                    self.active_calls[channel_id]["recording_filename"] = recording_filename
                    self.active_calls[channel_id]["is_recording"] = True
                    self.active_calls[channel_id]["smart_detection_active"] = self.smart_detection_enabled
                    
                    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –¥–µ—Ç–µ–∫—Ç–æ—Ä —Ä–µ—á–∏ –¥–ª—è —É–º–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞
                    if self.smart_detection_enabled and self.speech_detector:
                        self.speech_detector.reset()
                        self.active_calls[channel_id]["speech_detection_start"] = time.time()
                        logger.info(f"üß† –£–º–Ω–∞—è –¥–µ—Ç–µ–∫—Ü–∏—è —Ä–µ—á–∏ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞ –¥–ª—è –∫–∞–Ω–∞–ª–∞ {channel_id}")
                    
                    logger.info(f"‚úÖ –ó–∞–ø–∏—Å—å –∑–∞–ø—É—â–µ–Ω–∞: {recording_id}")
                else:
                    logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å –∑–∞–ø–∏—Å—å –¥–ª—è –∫–∞–Ω–∞–ª–∞ {channel_id}")

___

"""
–£–º–Ω—ã–π –¥–µ—Ç–µ–∫—Ç–æ—Ä –æ–∫–æ–Ω—á–∞–Ω–∏—è —Ä–µ—á–∏ –¥–ª—è —É–º–µ–Ω—å—à–µ–Ω–∏—è –ø–∞—É–∑—ã –≤ –≥–æ–ª–æ—Å–æ–≤–æ–º –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–µ.
–û—Å–Ω–æ–≤–∞–Ω –Ω–∞ –∞–Ω–∞–ª–∏–∑–µ —Ç–∏—à–∏–Ω—ã –∏ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ —Ä–µ—á–∏.

–í–¥–æ—Ö–Ω–æ–≤–ª–µ–Ω–æ —Ä–µ—à–µ–Ω–∏–µ–º –∏–∑ scenario_barge-in_2.js
"""

import time
import logging
from typing import Optional

logger = logging.getLogger(__name__)

class SmartSpeechDetector:
    """
    –£–º–Ω—ã–π –¥–µ—Ç–µ–∫—Ç–æ—Ä –æ–∫–æ–Ω—á–∞–Ω–∏—è —Ä–µ—á–∏, –∫–æ—Ç–æ—Ä—ã–π –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç, –∫–æ–≥–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–∫–æ–Ω—á–∏–ª –≥–æ–≤–æ—Ä–∏—Ç—å.
    –ò—Å–ø–æ–ª—å–∑—É–µ—Ç —Ç–∞–π–º–∞—É—Ç —Ç–∏—à–∏–Ω—ã –∏ –º–∏–Ω–∏–º–∞–ª—å–Ω—É—é –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Ä–µ—á–∏ –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –ª–æ–∂–Ω—ã—Ö —Å—Ä–∞–±–∞—Ç—ã–≤–∞–Ω–∏–π.
    """
    
    def __init__(self, silence_timeout: float = 1.2, min_speech_duration: float = 0.5):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥–µ—Ç–µ–∫—Ç–æ—Ä–∞.
        
        Args:
            silence_timeout: –í—Ä–µ–º—è —Ç–∏—à–∏–Ω—ã –≤ —Å–µ–∫—É–Ω–¥–∞—Ö –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –æ–∫–æ–Ω—á–∞–Ω–∏—è —Ä–µ—á–∏
            min_speech_duration: –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Ä–µ—á–∏ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
        """
        self.silence_timeout = silence_timeout
        self.min_speech_duration = min_speech_duration
        self.speech_start_time: Optional[float] = None
        self.last_speech_time: Optional[float] = None
        self.is_speech_active = False
        self.speech_buffer = ""
        
        logger.info(f"SmartSpeechDetector –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω: silence_timeout={silence_timeout}s, min_speech_duration={min_speech_duration}s")
    
    def on_speech_detected(self, text: str = "") -> None:
        """
        –í—ã–∑—ã–≤–∞–µ—Ç—Å—è –ø—Ä–∏ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏–∏ —Ä–µ—á–∏.
        
        Args:
            text: –†–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç (–º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º)
        """
        current_time = time.time()
        
        if not self.is_speech_active:
            # –ù–∞—á–∞–ª–æ –Ω–æ–≤–æ–π —Ä–µ—á–∏
            self.is_speech_active = True
            self.speech_start_time = current_time
            logger.debug("–ù–∞—á–∞–ª–æ —Ä–µ—á–∏ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ")
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–π —Ä–µ—á–∏
        self.last_speech_time = current_time
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç –≤ –±—É—Ñ–µ—Ä
        if text.strip():
            self.speech_buffer = text  # –û–±–Ω–æ–≤–ª—è–µ–º –±—É—Ñ–µ—Ä –ø–æ—Å–ª–µ–¥–Ω–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º
            logger.debug(f"–û–±–Ω–æ–≤–ª–µ–Ω –±—É—Ñ–µ—Ä —Ä–µ—á–∏: '{text[:50]}...'")
    
    def on_silence_detected(self) -> bool:
        """
        –í—ã–∑—ã–≤–∞–µ—Ç—Å—è –ø—Ä–∏ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏–∏ —Ç–∏—à–∏–Ω—ã.
        
        Returns:
            True, –µ—Å–ª–∏ —Ä–µ—á—å —Å—á–∏—Ç–∞–µ—Ç—Å—è –∑–∞–≤–µ—Ä—à–µ–Ω–Ω–æ–π, –∏–Ω–∞—á–µ False
        """
        if not self.is_speech_active:
            return False
        
        current_time = time.time()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ª–∏ –¥–æ–ª–≥–æ –¥–ª–∏—Ç—Å—è —Ç–∏—à–∏–Ω–∞
        if self.last_speech_time and (current_time - self.last_speech_time) >= self.silence_timeout:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ª–∏ –¥–æ–ª–≥–æ –¥–ª–∏–ª–∞—Å—å —Ä–µ—á—å
            speech_duration = self.last_speech_time - self.speech_start_time
            if speech_duration >= self.min_speech_duration:
                logger.info(f"–†–µ—á—å –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {speech_duration:.2f}s, –±—É—Ñ–µ—Ä: '{self.speech_buffer[:50]}...'")
                return True
            else:
                # –†–µ—á—å –±—ã–ª–∞ —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–æ–π, —Å—á–∏—Ç–∞–µ–º —ç—Ç–æ —à—É–º–æ–º
                logger.debug(f"–†–µ—á—å —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∞—è ({speech_duration:.2f}s), —Å–±—Ä–æ—Å")
                self.reset()
                return False
        
        return False
    
    def get_speech_text(self) -> str:
        """
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –Ω–∞–∫–æ–ø–ª–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç —Ä–µ—á–∏.
        
        Returns:
            –¢–µ–∫—Å—Ç —Ä–µ—á–∏ –∏–∑ –±—É—Ñ–µ—Ä–∞
        """
        return self.speech_buffer.strip()
    
    def reset(self) -> None:
        """
        –°–±—Ä–∞—Å—ã–≤–∞–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–µ—Ç–µ–∫—Ç–æ—Ä–∞.
        """
        self.is_speech_active = False
        self.speech_start_time = None
        self.last_speech_time = None
        self.speech_buffer = ""
        logger.debug("–î–µ—Ç–µ–∫—Ç–æ—Ä —Ä–µ—á–∏ —Å–±—Ä–æ—à–µ–Ω")
    
    def is_active(self) -> bool:
        """
        –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –∞–∫—Ç–∏–≤–µ–Ω –ª–∏ –¥–µ—Ç–µ–∫—Ç–æ—Ä (–∏–¥–µ—Ç –ª–∏ —Ä–µ—á—å).
        
        Returns:
            True, –µ—Å–ª–∏ —Ä–µ—á—å –∞–∫—Ç–∏–≤–Ω–∞, –∏–Ω–∞—á–µ False
        """
        return self.is_speech_active
    
    def get_speech_duration(self) -> float:
        """
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Ç–µ–∫—É—â–µ–π —Ä–µ—á–∏.
        
        Returns:
            –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Ä–µ—á–∏ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö –∏–ª–∏ 0.0, –µ—Å–ª–∏ —Ä–µ—á—å –Ω–µ –∞–∫—Ç–∏–≤–Ω–∞
        """
        if not self.is_speech_active or not self.speech_start_time:
            return 0.0
        
        end_time = self.last_speech_time or time.time()
        return end_time - self.speech_start_time


___

"""
–§–∏–ª—å—Ç—Ä –Ω–µ–∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–≤–Ω—ã—Ö —Ñ—Ä–∞–∑ –¥–ª—è –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞.
–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç, —Å–æ–¥–µ—Ä–∂–∏—Ç –ª–∏ —Ä–µ—á—å –ø–æ–ª–µ–∑–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∏–ª–∏ —ç—Ç–æ —à—É–º/—Å–æ–≥–ª–∞—Å–∏–µ.

–í–¥–æ—Ö–Ω–æ–≤–ª–µ–Ω–æ —Ä–µ—à–µ–Ω–∏–µ–º –∏–∑ scenario_barge-in_2.js
"""

import logging
import re
from typing import List

logger = logging.getLogger(__name__)

class SpeechFilter:
    """
    –§–∏–ª—å—Ç—Ä –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–≤–Ω–æ—Å—Ç–∏ —Ä–µ—á–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    –û—Ç—Å–µ–∏–≤–∞–µ—Ç –∫–æ—Ä–æ—Ç–∫–∏–µ —Ñ—Ä–∞–∑—ã, —Å–æ–≥–ª–∞—Å–∏—è –∏ —à—É–º, —Ñ–æ–∫—É—Å–∏—Ä—É–µ—Ç—Å—è –Ω–∞ –æ—Å–º—ã—Å–ª–µ–Ω–Ω—ã—Ö –≤–æ–ø—Ä–æ—Å–∞—Ö.
    """
    
    def __init__(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ñ–∏–ª—å—Ç—Ä–∞."""
        # –°–ø–∏—Å–æ–∫ –Ω–µ–∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–≤–Ω—ã—Ö —Ñ—Ä–∞–∑ (—Å–æ–≥–ª–∞—Å–∏—è, –∑–≤—É–∫–∏ –∏ —Ç.–¥.)
        self.fillers: List[str] = [
            "–¥–∞", "–∞–≥–∞", "—É–≥—É", "–Ω—É", "–æ–∫", "–æ–∫–µ–π", "—Ö–æ—Ä–æ—à–æ", "–ø–æ–Ω—è—Ç–Ω–æ", 
            "–æ", "—É–≥—É-—É–≥—É", "–¥–∞-–¥–∞", "–∞–≥–∞-–∞–≥–∞", "—É–≥—É-—É–≥—É", "–æ–∫–µ–π", "–æ–∫",
            "—É–≥—É", "—É–≥—É —É–≥—É", "–∞–≥–∞ –∞–≥–∞", "–¥–∞ –¥–∞", "–ø–æ–Ω—è–ª", "–ø–æ–Ω—è–ª–∞", "—è—Å–Ω–æ"
        ]
        
        # –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ —Ç–µ—Ä–º–∏–Ω—ã –∏ –º–∞—Ä–∫–µ—Ä—ã (–≤—Å–µ–≥–¥–∞ —Å—á–∏—Ç–∞—é—Ç—Å—è –∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–≤–Ω—ã–º–∏)
        self.tech_terms: List[str] = [
            "–∫–Ω", "–∫–Ω", "–∫–∏–ª–æ–Ω—å—é—Ç–æ–Ω", "–∫–∏–ª–æ–Ω—å—é—Ç–æ–Ω—ã", "–∫–∞-—ç–Ω", "–∫—ç-—ç–Ω", "–∫ —ç–Ω", "–∫ —ç–ù", "–∫—ç–Ω",
            "–Ω", "–Ω—å—é—Ç–æ–Ω", "–Ω—å—é—Ç–æ–Ω–æ–≤", "–Ω—å—é—Ç–æ–Ω–µ",
            "–Ω¬∑–º", "–Ω—å—é—Ç–æ–Ω-–º–µ—Ç—Ä", "–Ω—å—é—Ç–æ–Ω –º–µ—Ç—Ä", "–Ω –º", "–Ω –º",
            "–Ω¬∑–º–º", "–Ω—å—é—Ç–æ–Ω –º–∏–ª–ª–∏–º–µ—Ç—Ä", "–Ω –º–º", "–Ω –º–º",
            "–º–ø–∞", "–º–ø–∞", "–º—ç-–ø—ç-–∞", "—ç–º-–ø—ç-–∞", "–º–µ–≥–∞ –ø–∞—Å–∫–∞–ª—å", "–º–µ–≥–∞–ø–∞—Å–∫–∞–ª—å",
            "–∫–ø–∞", "–∫–ø–∞", "–∫—ç-–ø—ç-–∞", "–∫–∏–ª–æ–ø–∞—Å–∫–∞–ª—å", "–∫–∏–ª–æ –ø–∞—Å–∫–∞–ª—å", "–ø–∞—Å–∫–∞–ª—å", "–ø–∞",
            "–Ω/–º–º¬≤", "–Ω—å—é—Ç–æ–Ω –Ω–∞ –º–∏–ª–ª–∏–º–µ—Ç—Ä –∫–≤–∞–¥—Ä–∞—Ç–Ω—ã–π", "–Ω –Ω–∞ –º–º2", "–Ω/–º–º2",
            "–≥—Ü", "–≥–µ—Ä—Ü", "—á–∞—Å—Ç–æ—Ç–∞ –≤ –≥–µ—Ä—Ü–∞—Ö",
            "–º–º", "–º–∏–ª–ª–∏–º–µ—Ç—Ä", "–º–∏–ª–ª–∏–º–µ—Ç—Ä—ã", "–º–∏–ª–ª–∏–º–µ—Ç—Ä–æ–≤", "mm",
            "—Å–º", "—Å–∞–Ω—Ç–∏–º–µ—Ç—Ä", "—Å–∞–Ω—Ç–∏–º–µ—Ç—Ä—ã", "—Å–∞–Ω—Ç–∏–º–µ—Ç—Ä–æ–≤", "cm",
            "–º", "–º–µ—Ç—Ä", "–º–µ—Ç—Ä—ã", "–º–µ—Ç—Ä–æ–≤",
            "–º–º/–º–∏–Ω", "–º–∏–ª–ª–∏–º–µ—Ç—Ä–æ–≤ –≤ –º–∏–Ω—É—Ç—É", "–º–º –≤ –º–∏–Ω—É—Ç—É",
            "–º–º/—Å", "–º–∏–ª–ª–∏–º–µ—Ç—Ä–æ–≤ –≤ —Å–µ–∫—É–Ω–¥—É", "–º–º –≤ —Å–µ–∫—É–Ω–¥—É",
            "–º/—Å", "–º–µ—Ç—Ä–æ–≤ –≤ —Å–µ–∫—É–Ω–¥—É",
            "–æ–±/–º–∏–Ω", "rpm", "–æ–± –≤ –º–∏–Ω—É—Ç—É",
            "–∫–≥", "–∫–∏–ª–æ–≥—Ä–∞–º–º", "–∫–∏–ª–æ–≥—Ä–∞–º–º–∞", "–∫–∏–ª–æ–≥—Ä–∞–º–º—ã", "kg",
            "–≥—Ä–∞–º–º", "–≥—Ä–∞–º–º–∞", "–≥—Ä–∞–º–º—ã",
            "—Ç", "—Ç–æ–Ω–Ω–∞", "—Ç–æ–Ω–Ω—ã",
            "%", "–ø—Ä–æ—Ü–µ–Ω—Ç—ã", "–ø—Ä–æ—Ü–µ–Ω—Ç",
            "–ª/–º–∏–Ω", "–ª–∏—Ç—Ä –≤ –º–∏–Ω—É—Ç—É", "–ª–∏—Ç—Ä–æ–≤ –≤ –º–∏–Ω—É—Ç—É", "l/min",
            "–±–∞—Ä", "bar", "–∫–≥—Å/—Å–º¬≤", "–∫–∏–ª–æ–≥—Ä–∞–º–º —Å–∏–ª—ã –Ω–∞ —Å–∞–Ω—Ç–∏–º–µ—Ç—Ä –∫–≤–∞–¥—Ä–∞—Ç–Ω—ã–π",
            "–≤—Ç", "–≤–∞—Ç—Ç", "w", "–∫–≤—Ç", "–∫–≤—Ç", "–∫–∏–ª–æ–≤–∞—Ç—Ç", "kw", "–∫–≤—Ç¬∑—á", "–∫–≤—Ç—á", "–∫–∏–ª–æ–≤–∞—Ç—Ç —á–∞—Å",
            "–≤", "–≤–æ–ª—å—Ç", "v", "–∞", "–∞–º–ø–µ—Ä", "amp", "–æ–º", "–æ–º—ã", "ohm", "œâ",
            "–¥–±", "–¥–µ—Ü–∏–±–µ–ª", "db",
            "–º–∏–Ω/—á", "–º–∏–Ω—É—Ç –≤ —á–∞—Å", "–º–∏–Ω –Ω–∞ —á–∞—Å",
            "iso 7500-1", "astm e4", "iso 6892-1", "astm e8", "astm e9",
            "—Ç–≤–µ—Ä–¥–æ–º–µ—Ä", "—Ç–≤–µ—Ä–¥–æ–º–µ—Ä—ã", "—Ç–≤–µ—Ä–¥–æ–º–µ—Ä —Ä–æ–∫–≤–µ–ª–ª–∞", "—Ç–≤–µ—Ä–¥–æ–º–µ—Ä –±—Ä–∏–Ω–µ–ª–ª—è", "—Ç–≤–µ—Ä–¥–æ–º–µ—Ä –≤–∏–∫–∫–µ—Ä—Å–∞", "–º–∏–∫—Ä–æ—Ç–≤–µ—Ä–¥–æ–º–µ—Ä",
            "—Ä–∞–∑—Ä—ã–≤–Ω–∞—è –º–∞—à–∏–Ω–∞", "—Ä–∞–∑—Ä—ã–≤–Ω—ã–µ –º–∞—à–∏–Ω—ã", "–∏—Å–ø—ã—Ç–∞—Ç–µ–ª—å–Ω–∞—è –º–∞—à–∏–Ω–∞", "–∏—Å–ø—ã—Ç–∞—Ç–µ–ª—å–Ω—ã–µ –º–∞—à–∏–Ω—ã", "—É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è —Ä–∞–∑—Ä—ã–≤–Ω–∞—è –º–∞—à–∏–Ω–∞",
            "–∏—Å–ø—ã—Ç–∞—Ç–µ–ª—å–Ω—ã–π –ø—Ä–µ—Å—Å", "–∏—Å–ø—ã—Ç–∞—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–µ—Å—Å—ã", "–ø—Ä–µ—Å—Å –ø–∏",
            "—Ä–≥–º", "—Ä–≥–º-1000", "—Ä–≥–º-1000-–∞",
            "–¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∞—è –º–∞—à–∏–Ω–∞", "—É—Å—Ç–∞–ª–æ—Å—Ç–Ω–∞—è –º–∞—à–∏–Ω–∞",
            "–∏—Å–ø—ã—Ç–∞–Ω–∏–µ –Ω–∞ —Ä–∞—Å—Ç—è–∂–µ–Ω–∏–µ", "–∏—Å–ø—ã—Ç–∞–Ω–∏–µ –Ω–∞ —Å–∂–∞—Ç–∏–µ", "–∏—Å–ø—ã—Ç–∞–Ω–∏–µ –Ω–∞ –∏–∑–≥–∏–±", "–º–µ—Ç—Ä–æ—Ç—ç—Å—Ç",
            "—Ä–≥–º-–≥-–∞", "—Ä—ç–º", "—Ä—ç–º-i-0,1", "—Ä—ç–º-1", "—Ä—ç–º-50", "—Ä—ç–º-100", "—Ä—ç–º-200", "—Ä—ç–º-300", "—Ä—ç–º-500", "—Ä—ç–º-600",
            "—Ä—ç–º-i-2", "—Ä—ç–º-i-3", "—Ä—ç–º-i-5", "—Ä—ç–º-i-10",
            "—É–∏–º-–¥", "—É–∏–º-–¥-100", "—É–∏–º-–¥-250", "—É–∏–º-–¥-500", "—É–∏–º-–¥-750", "–ø–Ω–µ–≤–º–æ–¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∞—è –º–∞—à–∏–Ω–∞",
            "–ø–∏–º-–º—Ä-100", "–ø–∏–º-–º—Ä-200", "–ø–∏–º-–º—Ä-300",
            "—É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–µ –∏—Å–ø—ã—Ç–∞—Ç–µ–ª—å–Ω—ã–µ –º–∞—à–∏–Ω—ã", "—É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è –º–∞—à–∏–Ω–∞",
            "–º–∞—à–∏–Ω–∞ –Ω–∞ —É—Å—Ç–∞–ª–æ—Å—Ç—å", "—É—Å—Ç–∞–ª–æ—Å—Ç–Ω—ã–µ –∏—Å–ø—ã—Ç–∞–Ω–∏—è",
            "–º–∞—à–∏–Ω—ã –Ω–∞ –∫—Ä—É—á–µ–Ω–∏–µ", "–º–∞—à–∏–Ω—ã –Ω–∞ –∏–∑–≥–∏–±",
            "–º–∫", "–º–∫—Å", "–º–∫—Å-1000", "–º–∫—Å-2000", "–º–∫—Å-3000", "–º–∫—Å-500",
            "—Å–∏—Å—Ç–µ–º—ã —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–Ω—ã—Ö –∏—Å–ø—ã—Ç–∞–Ω–∏–π", "—Å—Ç–∏",
            "—ç–∫—Å—Ç–µ–Ω–∑–æ–º–µ—Ç—Ä", "—É–∏–¥-–ø–±", "m-view",
            "–∫–æ–ø—Ä–∞ –º–∞—è—Ç–Ω–∏–∫–æ–≤–∞—è", "–∫–æ–ø—Ä—ã", "–∫–º", "–∫–≤", "–∫–º–º", "–∏–∫–º-450-–∞",
            "—Å—Ç–∏–ª–æ—Å–∫–æ–ø", "—Å–ª–ø", "—Å–ª-13—É", "—Å–ª-15",
            "–∫–ª–∏–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –∫–∞–º–µ—Ä—ã", "–∫—Ö", "–∫–∏–æ", "–∫–∏—É", "–∫—Ç–≤", "–∫—Ç–∑", "–∫—Ç—á",
            "—Ä–µ—Å—É—Ä—Å–Ω–æ–µ –∏—Å–ø—ã—Ç–∞–Ω–∏–µ", "–∏—Å–ø—ã—Ç–∞–Ω–∏–µ –Ω–∞ –∏–∑–Ω–æ—Å",
            "–º–∞—à–∏–Ω—ã —à–ª–∏—Ñ–æ–≤–∞–ª—å–Ω–æ-–ø–æ–ª–∏—Ä–æ–≤–∞–ª—å–Ω—ã–µ", "–º—à–ø", "–º–ø",
            "–º–∏–∫—Ä–æ—Å–∫–æ–ø –º–µ—Ç–∞–ª–ª–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∏–π", "–º–º–∏", "–º–º—Ä", "–º–º–ø",
            "–ª–∞–±–æ—Ä–∞—Ç–æ—Ä–∏—è –º–æ–¥—É–ª—å–Ω–∞—è", "–ª–º–º-25",
            "–º–µ–±–µ–ª—å –ª–∞–±–æ—Ä–∞—Ç–æ—Ä–Ω–∞—è", "—Å–∫–∑-1", "—Å–∫–∑-2", "—Å–∫–∑-3-–∞", "—Å–∫–∑-4"
        ]
        
        # –í–æ–ø—Ä–æ—Å–∏—Ç–µ–ª—å–Ω—ã–µ —Å–ª–æ–≤–∞ (—É–∫–∞–∑—ã–≤–∞—é—Ç –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã)
        self.question_words: List[str] = [
            "—á—Ç–æ", "–∫–∞–∫", "–≥–¥–µ", "–∫–æ–≥–¥–∞", "–ø–æ—á–µ–º—É", "–∑–∞—á–µ–º", "–∫—Ç–æ", "—á–µ–π", "–∫–∞–∫–æ–π",
            "–∫–∞–∫–∞—è", "–∫–∞–∫–æ–µ", "–∫–∞–∫–∏–µ", "—Å–∫–æ–ª—å–∫–æ", "–∫–æ—Ç–æ—Ä—ã–π", "–∫–æ—Ç–æ—Ä–∞—è", "–∫–æ—Ç–æ—Ä–æ–µ",
            "–º–æ–∂–Ω–æ", "–≤–æ–∑–º–æ–∂–Ω–æ", "–ø–æ–¥—Å–∫–∞–∂–∏—Ç–µ", "—Å–∫–∞–∂–∏—Ç–µ", "—Ä–∞—Å—Å–∫–∞–∂–∏—Ç–µ"
        ]
        
        logger.info("SpeechFilter –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
    
    def is_informative(self, text: str) -> bool:
        """
        –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —Å–æ–¥–µ—Ä–∂–∏—Ç –ª–∏ —Ä–µ—á—å –ø–æ–ª–µ–∑–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é.
        
        Args:
            text: –†–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
            
        Returns:
            True, –µ—Å–ª–∏ —Ç–µ–∫—Å—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–≤–Ω—ã–π, –∏–Ω–∞—á–µ False
        """
        if not text:
            logger.debug("–¢–µ–∫—Å—Ç –ø—É—Å—Ç–æ–π - –Ω–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–≤–Ω—ã–π")
            return False
        
        # –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è —Ç–µ–∫—Å—Ç–∞
        normalized_text = self._normalize_text(text)
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–ª–∏–Ω—ã
        if len(normalized_text) <= 2:
            logger.debug(f"–¢–µ–∫—Å—Ç —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π ({len(normalized_text)} —Å–∏–º–≤–æ–ª–æ–≤) - –Ω–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–≤–Ω—ã–π")
            return False
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ filler words
        if normalized_text.lower() in self.fillers:
            logger.debug(f"–¢–µ–∫—Å—Ç —è–≤–ª—è–µ—Ç—Å—è filler word: '{normalized_text}' - –Ω–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–≤–Ω—ã–π")
            return False
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ —Ü–∏—Ñ—Ä (–≤—Å–µ–≥–¥–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–≤–Ω–æ)
        if re.search(r'\d', normalized_text):
            logger.debug(f"–¢–µ–∫—Å—Ç —Å–æ–¥–µ—Ä–∂–∏—Ç —Ü–∏—Ñ—Ä—ã - –∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–≤–Ω—ã–π: '{normalized_text}'")
            return True
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ —Ç–µ—Ä–º–∏–Ω—ã (–≤—Å–µ–≥–¥–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–≤–Ω–æ)
        text_lower = normalized_text.lower()
        for term in self.tech_terms:
            if term in text_lower:
                logger.debug(f"–¢–µ–∫—Å—Ç —Å–æ–¥–µ—Ä–∂–∏—Ç —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π —Ç–µ—Ä–º–∏–Ω '{term}' - –∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–≤–Ω—ã–π: '{normalized_text}'")
                return True
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –≤–æ–ø—Ä–æ—Å–∏—Ç–µ–ª—å–Ω—ã–µ —Å–ª–æ–≤–∞
        for word in self.question_words:
            if word in text_lower:
                logger.debug(f"–¢–µ–∫—Å—Ç —Å–æ–¥–µ—Ä–∂–∏—Ç –≤–æ–ø—Ä–æ—Å–∏—Ç–µ–ª—å–Ω–æ–µ —Å–ª–æ–≤–æ '{word}' - –∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–≤–Ω—ã–π: '{normalized_text}'")
                return True
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–ª–æ–≤
        words = normalized_text.split()
        if len(words) >= 3:
            logger.debug(f"–¢–µ–∫—Å—Ç —Å–æ–¥–µ—Ä–∂–∏—Ç {len(words)} —Å–ª–æ–≤ - –∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–≤–Ω—ã–π: '{normalized_text}'")
            return True
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –≥–ª–∞–≥–æ–ª–æ–≤ (—É–∫–∞–∑—ã–≤–∞–µ—Ç –Ω–∞ –¥–µ–π—Å—Ç–≤–∏–µ/–∑–∞–ø—Ä–æ—Å)
        common_verbs = ["—Ö–æ—á—É", "–Ω—É–∂–Ω–æ", "—Ç—Ä–µ–±—É–µ—Ç—Å—è", "–∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç", "–∏—â—É", "–Ω–∞–π—Ç–∏", 
                       "—É–∑–Ω–∞—Ç—å", "–ø–æ–ª—É—á–∏—Ç—å", "–∫—É–ø–∏—Ç—å", "–∑–∞–∫–∞–∑–∞—Ç—å", "–ø–æ–º–æ—á—å", "—Å–¥–µ–ª–∞—Ç—å"]
        for verb in common_verbs:
            if verb in text_lower:
                logger.debug(f"–¢–µ–∫—Å—Ç —Å–æ–¥–µ—Ä–∂–∏—Ç –≥–ª–∞–≥–æ–ª '{verb}' - –∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–≤–Ω—ã–π: '{normalized_text}'")
                return True
        
        logger.debug(f"–¢–µ–∫—Å—Ç –Ω–µ –ø—Ä–æ—à–µ–ª –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–≤–Ω–æ—Å—Ç—å: '{normalized_text}'")
        return False
    
    def _normalize_text(self, text: str) -> str:
        """
        –ù–æ—Ä–º–∞–ª–∏–∑—É–µ—Ç —Ç–µ–∫—Å—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞.
        
        Args:
            text: –ò—Å—Ö–æ–¥–Ω—ã–π —Ç–µ–∫—Å—Ç
            
        Returns:
            –ù–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç
        """
        if not text:
            return ""
        
        # –£–¥–∞–ª–µ–Ω–∏–µ –ª–∏—à–Ω–∏—Ö –ø—Ä–æ–±–µ–ª–æ–≤ –∏ –∑–Ω–∞–∫–æ–≤ –ø—Ä–µ–ø–∏–Ω–∞–Ω–∏—è
        normalized = text.strip()
        normalized = re.sub(r'[^\w\s]', ' ', normalized)  # –ó–∞–º–µ–Ω–∞ –Ω–µ-–±—É–∫–≤–µ–Ω–Ω–æ-—Ü–∏—Ñ—Ä–æ–≤—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤ –Ω–∞ –ø—Ä–æ–±–µ–ª
        normalized = re.sub(r'\s+', ' ', normalized)  # –£–¥–∞–ª–µ–Ω–∏–µ –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –ø—Ä–æ–±–µ–ª–æ–≤
        
        return normalized.strip()
    
    def get_text_category(self, text: str) -> str:
        """
        –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Ç–µ–∫—Å—Ç–∞.
        
        Args:
            text: –¢–µ–∫—Å—Ç –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∑–∞—Ü–∏–∏
            
        Returns:
            –ö–∞—Ç–µ–≥–æ—Ä–∏—è —Ç–µ–∫—Å—Ç–∞: 'informative', 'filler', 'too_short', 'empty'
        """
        if not text:
            return 'empty'
        
        normalized = self._normalize_text(text)
        
        if len(normalized) <= 2:
            return 'too_short'
        
        if normalized.lower() in self.fillers:
            return 'filler'
        
        if self.is_informative(text):
            return 'informative'
        
        return 'filler'  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é —Å—á–∏—Ç–∞–µ–º –Ω–µ–∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–≤–Ω—ã–º
    
    def get_detailed_analysis(self, text: str) -> dict:
        """
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –¥–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —Ç–µ–∫—Å—Ç–∞.
        
        Args:
            text: –¢–µ–∫—Å—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
            
        Returns:
            –°–ª–æ–≤–∞—Ä—å —Å –¥–µ—Ç–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —Ç–µ–∫—Å—Ç–µ
        """
        normalized = self._normalize_text(text)
        text_lower = normalized.lower()
        
        analysis = {
            'original_text': text,
            'normalized_text': normalized,
            'length': len(normalized),
            'word_count': len(normalized.split()) if normalized else 0,
            'has_digits': bool(re.search(r'\d', normalized)),
            'has_tech_terms': [],
            'has_question_words': [],
            'category': self.get_text_category(text),
            'is_informative': self.is_informative(text)
        }
        
        # –ü–æ–∏—Å–∫ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö —Ç–µ—Ä–º–∏–Ω–æ–≤
        for term in self.tech_terms:
            if term in text_lower:
                analysis['has_tech_terms'].append(term)
        
        # –ü–æ–∏—Å–∫ –≤–æ–ø—Ä–æ—Å–∏—Ç–µ–ª—å–Ω—ã—Ö —Å–ª–æ–≤
        for word in self.question_words:
            if word in text_lower:
                analysis['has_question_words'].append(word)
        
        return analysis


____

