/**
 * Voximplant-—Å—Ü–µ–Ω–∞—Ä–∏–π –¥–ª—è –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞
 * –í–µ—Ä—Å–∏—è 8.4.1 (—Å—Ç–∞–±–∏–ª—å–Ω–∞—è, —Å –∑–∞—â–∏—Ç–æ–π –æ—Ç –ª–æ–∂–Ω–æ–≥–æ barge-in)
 *
 * –ò–∑–º–µ–Ω–µ–Ω–∏—è vs 8.4:
 * ‚Ä¢ DEBOUNCE_TIMEOUT —É–≤–µ–ª–∏—á–µ–Ω —Å 300 –¥–æ 700 –º—Å –¥–ª—è –±–æ–ª–µ–µ –Ω–∞–¥–µ–∂–Ω–æ–π
 *   –∑–∞—â–∏—Ç—ã –æ—Ç –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏–π –∏–∑-–∑–∞ —ç—Ö–∞ –Ω–∞ –Ω–µ–∫–æ—Ç–æ—Ä—ã—Ö –ª–∏–Ω–∏—è—Ö.
 */

require(Modules.ASR);

// ‚îÄ‚îÄ‚îÄ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
const WS_URL = "ws://31.207.75.71:8000/ws";
const VOICE = VoiceList.TBank.ru_RU_Alyona;
const SPEECH_END_TIMEOUT = 200; // –ø–∞—É–∑–∞ –ø–µ—Ä–µ–¥ TTS, –º—Å
const DEBOUNCE_TIMEOUT = 700;   // –ó–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è –∑–∞—â–∏—Ç—ã –æ—Ç barge-in, –º—Å
// ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ

// ‚îÄ‚îÄ‚îÄ –≥–ª–æ–±–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
let call, asr, wsReady = false;
let buf = "", bufTimer = null;
let currentPlayer = null;
let isSpeaking = false; // –§–ª–∞–≥, —á—Ç–æ –±–æ—Ç —Å–µ–π—á–∞—Å –≥–æ–≤–æ—Ä–∏—Ç
// ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ

function clean(txt) { return txt.replace(/[|*]/g, " ").replace(/\s+/g, " ").trim(); }

VoxEngine.addEventListener(AppEvents.CallAlerting, function(ev) {
    call = ev.call;
    Logger.write("üöÄ start, callId=" + call.id);
    call.answer();

    /* 1. —Å–æ–∑–¥–∞—ë–º ASR (–Ω–µ –≤—ã–∫–ª—é—á–∞–µ–º –¥–æ –∫–æ–Ω—Ü–∞ –∑–≤–æ–Ω–∫–∞) */
    asr = VoxEngine.createASR({
        profile: ASRProfileList.TBank.ru_RU,
        interimResults: true,
        phraseHints: [
            "—Ç–≤–µ—Ä–¥–æ–º–µ—Ä", "—Ç–≤–µ—Ä–¥–æ–º–µ—Ä—ã", "—Ç–≤–µ—Ä–¥–æ–º–µ—Ä –†–æ–∫–≤–µ–ª–ª–∞", "—Ç–≤–µ—Ä–¥–æ–º–µ—Ä –ë—Ä–∏–Ω–µ–ª–ª—è",
            "—Ç–≤–µ—Ä–¥–æ–º–µ—Ä –í–∏–∫–∫–µ—Ä—Å–∞", "–º–∏–∫—Ä–æ—Ç–≤–µ—Ä–¥–æ–º–µ—Ä",
            "—Ä–∞–∑—Ä—ã–≤–Ω–∞—è –º–∞—à–∏–Ω–∞", "—Ä–∞–∑—Ä—ã–≤–Ω—ã–µ –º–∞—à–∏–Ω—ã", "–∏—Å–ø—ã—Ç–∞—Ç–µ–ª—å–Ω–∞—è –º–∞—à–∏–Ω–∞",
            "–∏—Å–ø—ã—Ç–∞—Ç–µ–ª—å–Ω—ã–µ –º–∞—à–∏–Ω—ã", "—É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è —Ä–∞–∑—Ä—ã–≤–Ω–∞—è –º–∞—à–∏–Ω–∞",
            "–∏—Å–ø—ã—Ç–∞—Ç–µ–ª—å–Ω—ã–π –ø—Ä–µ—Å—Å", "–∏—Å–ø—ã—Ç–∞—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–µ—Å—Å—ã", "–ø—Ä–µ—Å—Å –ü–ò",
            "–†–ì–ú", "–†–ì–ú-1000", "–†–ì–ú-1000-–ê",
            "–¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∞—è –º–∞—à–∏–Ω–∞", "—É—Å—Ç–∞–ª–æ—Å—Ç–Ω–∞—è –º–∞—à–∏–Ω–∞",
            "–∏—Å–ø—ã—Ç–∞–Ω–∏–µ –Ω–∞ —Ä–∞—Å—Ç—è–∂–µ–Ω–∏–µ", "–∏—Å–ø—ã—Ç–∞–Ω–∏–µ –Ω–∞ —Å–∂–∞—Ç–∏–µ",
            "–∏—Å–ø—ã—Ç–∞–Ω–∏–µ –Ω–∞ –∏–∑–≥–∏–±", "–ú–µ—Ç—Ä–æ—Ç—ç—Å—Ç",
            "–†–ì–ú-–ì-–ê", "–†–≠–ú", "–†–≠–ú-I-0,1", "–†–≠–ú-1", "–†–≠–ú-50", "–†–≠–ú-100",
            "–†–≠–ú-200", "–†–≠–ú-300", "–†–≠–ú-500", "–†–≠–ú-600",
            "–†–≠–ú-I-2", "–†–≠–ú-I-3", "–†–≠–ú-I-5", "–†–≠–ú-I-10",
            "–£–ò–ú-–î", "–£–ò–ú-–î-100", "–£–ò–ú-–î-250", "–£–ò–ú-–î-500",
            "–£–ò–ú-–î-750", "–ø–Ω–µ–≤–º–æ–¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∞—è –º–∞—à–∏–Ω–∞",
            "–ü–ò–ú-–ú–†-100", "–ü–ò–ú-–ú–†-200", "–ü–ò–ú-–ú–†-300",
            "—É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–µ –∏—Å–ø—ã—Ç–∞—Ç–µ–ª—å–Ω—ã–µ –º–∞—à–∏–Ω—ã", "—É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è –º–∞—à–∏–Ω–∞",
            "–º–∞—à–∏–Ω–∞ –Ω–∞ —É—Å—Ç–∞–ª–æ—Å—Ç—å", "—É—Å—Ç–∞–ª–æ—Å—Ç–Ω—ã–µ –∏—Å–ø—ã—Ç–∞–Ω–∏—è",
            "–º–∞—à–∏–Ω—ã –Ω–∞ –∫—Ä—É—á–µ–Ω–∏–µ", "–º–∞—à–∏–Ω—ã –Ω–∞ –∏–∑–≥–∏–±",
            "–ú–ö", "–ú–ö–°", "–ú–ö–°-1000", "–ú–ö–°-2000", "–ú–ö–°-3000", "–ú–ö–°-500",
            "—Å–∏—Å—Ç–µ–º—ã —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–Ω—ã—Ö –∏—Å–ø—ã—Ç–∞–Ω–∏–π", "–°–¢–ò",
            "—ç–∫—Å—Ç–µ–Ω–∑–æ–º–µ—Ç—Ä", "–£–ò–î-–ü–ë", "M-VIEW",
            "–∫–æ–ø—Ä–∞ –º–∞—è—Ç–Ω–∏–∫–æ–≤–∞—è", "–∫–æ–ø—Ä—ã", "–ö–ú", "–ö–í", "–ö–ú–ú", "–ò–ö–ú-450-–ê",
            "—Å—Ç–∏–ª–æ—Å–∫–æ–ø", "–°–õ–ü", "–°–õ-13–£", "–°–õ-15",
            "–∫–ª–∏–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –∫–∞–º–µ—Ä—ã", "–ö–¢–•", "–ö–ò–û", "–ö–ò–£", "–ö–¢–í", "–ö–¢–ó", "–ö–¢–ß",
            "—Ä–µ—Å—É—Ä—Å–Ω–æ–µ –∏—Å–ø—ã—Ç–∞–Ω–∏–µ", "–∏—Å–ø—ã—Ç–∞–Ω–∏–µ –Ω–∞ –∏–∑–Ω–æ—Å",
            "–º–∞—à–∏–Ω—ã —à–ª–∏—Ñ–æ–≤–∞–ª—å–Ω–æ-–ø–æ–ª–∏—Ä–æ–≤–∞–ª—å–Ω—ã–µ", "–ú–®–ü", "–ú–ü",
            "–º–∏–∫—Ä–æ—Å–∫–æ–ø –º–µ—Ç–∞–ª–ª–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∏–π", "–ú–ú–ò", "–ú–ú–†", "–ú–ú–ü",
            "–ª–∞–±–æ—Ä–∞—Ç–æ—Ä–∏—è –º–æ–¥—É–ª—å–Ω–∞—è", "–õ–ú–ú-25",
            "–º–µ–±–µ–ª—å –ª–∞–±–æ—Ä–∞—Ç–æ—Ä–Ω–∞—è", "–°–ö–ó-1", "–°–ö–ó-2", "–°–ö–ó-3-–ê", "–°–ö–ó-4"
        ]
    });

    const stopPlayerOnBargeIn = (eventName) => {
        if (isSpeaking) {
            // Logger.write(`üé§ ASR event '${eventName}' received, but ignoring for ${DEBOUNCE_TIMEOUT}ms due to active playback.`);
            return;
        }
        if (currentPlayer) {
            Logger.write(`[BARGE-IN] ASR event '${eventName}' triggered. Stopping player.`);
            currentPlayer.stop();
            currentPlayer = null;
        }
    };
    
    asr.addEventListener(ASREvents.CaptureStarted, () => stopPlayerOnBargeIn('CaptureStarted'));
    asr.addEventListener(ASREvents.InterimResult, () => stopPlayerOnBargeIn('InterimResult'));

    asr.addEventListener(ASREvents.Result, function(e) {
        if (!e.text) return;
        Logger.write("üó£Ô∏è " + e.text);
        if (bufTimer) { clearTimeout(bufTimer); bufTimer = null; buf = ""; }
        if (wsReady) socket.send(e.text);
    });

    /* 2. –ø–æ–¥–∫–ª—é—á–∞–µ–º –≤—Ö–æ–¥—è—â–∏–π –∑–≤—É–∫ –∫ ASR (–æ–¥–∏–Ω —Ä–∞–∑) */
    call.sendMediaTo(asr);

    /* 3. WebSocket –∫ –±—ç–∫–µ–Ω–¥—É */
    const callerId = call.callerid();
    const urlWithCallerId = `${WS_URL}?callerId=${encodeURIComponent(callerId)}`;
    const socket = VoxEngine.createWebSocket(urlWithCallerId);

    socket.addEventListener(WebSocketEvents.OPEN, function(e) {
        wsReady = true;
        Logger.write(`‚úÖ WS open for ${callerId}.`);
    });
    socket.addEventListener(WebSocketEvents.MESSAGE, function(m) {
        if (!m.text) return;
        // Logger.write(`üìÑ WS chunk received: "${m.text}"`); // –ú–æ–∂–Ω–æ —Ä–∞—Å–∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞—Ç—å –¥–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–π –æ—Ç–ª–∞–¥–∫–∏
        buf += m.text;
        if (bufTimer) clearTimeout(bufTimer);
        bufTimer = setTimeout(function() {
            const ready = clean(buf);
            buf = "";
            bufTimer = null;
            speak(ready);
        }, SPEECH_END_TIMEOUT);
    });
    socket.addEventListener(WebSocketEvents.ERROR, function(e) { Logger.write("‚ùå WS error:" + JSON.stringify(e)); });
    socket.addEventListener(WebSocketEvents.CLOSE, function(e) { 
        Logger.write(`üîå WS close.`);
        wsReady = false; 
    });

    /* 4. hang‚Äëup handler */
    call.addEventListener(CallEvents.Disconnected, function(e) {
        Logger.write(`üì¥ hang‚Äëup.`);
        VoxEngine.terminate();
    });
});

/* –ü—Ä–æ–∏–≥—Ä—ã–≤–∞–µ–º —Ñ—Ä–∞–∑—É —Å –ø—Ä–æ–≥—Ä–µ—Å—Å–∏–≤–Ω–æ–π –æ—Ç–¥–∞—á–µ–π */
function speak(text) {
    if (!text) {
        Logger.write("üîá speak() called with empty text, skipping.");
        return;
    }
    Logger.write(`‚ñ∂Ô∏è Playing TTS for: "${text}"`);
    if (currentPlayer) {
        Logger.write("‚ö†Ô∏è speak() called while another player is active. Stopping old one.");
        currentPlayer.stop();
    }
    
    isSpeaking = true;
    setTimeout(() => {
        isSpeaking = false;
        // Logger.write(`üé§ Barge-in debounce period ended. ASR can now interrupt.`); // –ú–æ–∂–Ω–æ —Ä–∞—Å–∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞—Ç—å –¥–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–π –æ—Ç–ª–∞–¥–∫–∏
    }, DEBOUNCE_TIMEOUT);
    
    currentPlayer = VoxEngine.createTTSPlayer(text, {
        language: VOICE,
        progressivePlayback: true
    });
    currentPlayer.sendMediaTo(call);
    
    currentPlayer.addEventListener(PlayerEvents.Started, function(e){
        // Logger.write(`üîä Player started.`);
    });
    currentPlayer.addEventListener(PlayerEvents.Stopped, function(e){
        Logger.write(`‚èπÔ∏è Player stopped.`);
        currentPlayer = null;
    });
    currentPlayer.addEventListener(PlayerEvents.PlaybackFinished, function(e) {
        // Logger.write(`‚úÖ Player finished playback.`);
        currentPlayer = null;
    });
}
