#!/usr/bin/env python3
"""
–¢–µ—Å—Ç ARI playback –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π
"""

import asyncio
import aiohttp
import json
import logging

logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)

async def test_ari_playback():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç ARI playback —Å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º –∑–≤—É–∫–æ–º"""
    
    # –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ ARI
    base_url = "http://localhost:8088/ari"
    auth = aiohttp.BasicAuth("asterisk", "asterisk123")
    
    async with aiohttp.ClientSession(auth=auth) as session:
        try:
            # 1. –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤
            logger.info("üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ –∫–∞–Ω–∞–ª—ã...")
            async with session.get(f"{base_url}/channels") as response:
                channels = await response.json()
                logger.info(f"üìû –ê–∫—Ç–∏–≤–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤: {len(channels)}")
                
                if not channels:
                    logger.warning("‚ö†Ô∏è –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è")
                    return
                
                # –ë–µ—Ä–µ–º –ø–µ—Ä–≤—ã–π –∫–∞–Ω–∞–ª
                channel_id = channels[0]['id']
                logger.info(f"üéØ –¢–µ—Å—Ç–∏—Ä—É–µ–º –Ω–∞ –∫–∞–Ω–∞–ª–µ: {channel_id}")
            
            # 2. –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø—Ä–æ–∏–≥—Ä—ã–≤–∞–Ω–∏–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –∑–≤—É–∫–∞
            logger.info("üîä –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø—Ä–æ–∏–≥—Ä—ã–≤–∞–Ω–∏–µ demo-congrats...")
            url = f"{base_url}/channels/{channel_id}/play"
            data = {"media": "sound:demo-congrats"}
            
            async with session.post(url, json=data) as response:
                response_text = await response.text()
                logger.info(f"üîç ARI Response: status={response.status}, body={response_text}")
                
                if response.status in (200, 201, 202):
                    logger.info("‚úÖ –ü—Ä–æ–∏–≥—Ä—ã–≤–∞–Ω–∏–µ –∑–∞–ø—É—â–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ!")
                    
                    # –ñ–¥–µ–º –Ω–µ–º–Ω–æ–≥–æ –∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å
                    await asyncio.sleep(2)
                    
                    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞–Ω–∞–ª–µ
                    async with session.get(f"{base_url}/channels/{channel_id}") as response:
                        channel_info = await response.json()
                        logger.info(f"üìä –°—Ç–∞—Ç—É—Å –∫–∞–Ω–∞–ª–∞: {channel_info.get('state')}")
                        
                else:
                    logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–∏–≥—Ä—ã–≤–∞–Ω–∏—è: {response.status} - {response_text}")
            
            # 3. –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø—Ä–æ–∏–≥—Ä—ã–≤–∞–Ω–∏–µ —Å –Ω–æ–≤—ã–º —Ñ–æ—Ä–º–∞—Ç–æ–º (–±–µ–∑ ru/)
            logger.info("üîä –¢–µ—Å—Ç–∏—Ä—É–µ–º –Ω–æ–≤—ã–π —Ñ–æ—Ä–º–∞—Ç media URI...")
            data = {"media": "sound:demo-congrats"}  # –ë–µ–∑ ru/
            
            async with session.post(url, json=data) as response:
                response_text = await response.text()
                logger.info(f"üîç ARI Response (–Ω–æ–≤—ã–π —Ñ–æ—Ä–º–∞—Ç): status={response.status}, body={response_text}")
                
                if response.status in (200, 201, 202):
                    logger.info("‚úÖ –ù–æ–≤—ã–π —Ñ–æ—Ä–º–∞—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç!")
                else:
                    logger.error(f"‚ùå –ù–æ–≤—ã–π —Ñ–æ—Ä–º–∞—Ç –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç: {response.status} - {response_text}")
                    
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")

if __name__ == "__main__":
    asyncio.run(test_ari_playback())