#!/usr/bin/env python3
"""
–ì–û–¢–û–í–û–ï –†–ï–®–ï–ù–ò–ï –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è Yandex IAM —Ç–æ–∫–µ–Ω–∞
–í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ —É–∂–µ –ø–æ–¥—Å—Ç–∞–≤–ª–µ–Ω—ã!
"""

import requests
import json
import time
from datetime import datetime, timedelta
import threading
import logging

# üéØ –í–ê–®–ò –î–ê–ù–ù–´–ï (—É–∂–µ –ø–æ–¥—Å—Ç–∞–≤–ª–µ–Ω—ã)
OAUTH_TOKEN = "y0_xDapiLvBBjB3RMgureWpRRd-4N8PQ1wUwN2LE2biUiAYyiHJA"
FOLDER_ID = "b1g6ft1co3nrff8jds4g"

class YandexTokenManager:
    def __init__(self, oauth_token, folder_id):
        self.oauth_token = oauth_token
        self.folder_id = folder_id
        self.iam_token = None
        self.token_expires_at = None
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
        logging.basicConfig(
            level=logging.INFO,
            format='%(asctime)s - %(levelname)s - %(message)s'
        )
        self.logger = logging.getLogger(__name__)
    
    def get_new_token(self):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ IAM —Ç–æ–∫–µ–Ω–∞"""
        url = "https://iam.api.cloud.yandex.net/iam/v1/tokens"
        
        payload = {
            "yandexPassportOauthToken": self.oauth_token
        }
        
        headers = {
            "Content-Type": "application/json"
        }
        
        try:
            response = requests.post(url, json=payload, headers=headers)
            response.raise_for_status()
            
            data = response.json()
            self.iam_token = data["iamToken"]
            
            # –¢–æ–∫–µ–Ω –¥–µ–π—Å—Ç–≤—É–µ—Ç 12 —á–∞—Å–æ–≤
            expires_at = data.get("expiresAt")
            if expires_at:
                self.token_expires_at = datetime.fromisoformat(expires_at.replace('Z', '+00:00'))
            else:
                self.token_expires_at = datetime.now() + timedelta(hours=12)
            
            self.logger.info(f"‚úÖ –ù–æ–≤—ã–π IAM —Ç–æ–∫–µ–Ω –ø–æ–ª—É—á–µ–Ω!")
            self.logger.info(f"üìÖ –î–µ–π—Å—Ç–≤—É–µ—Ç –¥–æ: {self.token_expires_at}")
            self.logger.info(f"üîë –¢–æ–∫–µ–Ω: {self.iam_token[:50]}...")
            
            return self.iam_token
            
        except requests.exceptions.RequestException as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞: {e}")
            if hasattr(e, 'response') and e.response:
                self.logger.error(f"–û—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞: {e.response.text}")
            raise
    
    def get_token(self):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∞–∫—Ç—É–∞–ª—å–Ω–æ–≥–æ —Ç–æ–∫–µ–Ω–∞"""
        if self.token_needs_refresh():
            return self.get_new_token()
        return self.iam_token
    
    def token_needs_refresh(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞, –Ω—É–∂–Ω–æ –ª–∏ –æ–±–Ω–æ–≤–∏—Ç—å —Ç–æ–∫–µ–Ω"""
        if not self.iam_token or not self.token_expires_at:
            return True
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞ 30 –º–∏–Ω—É—Ç –¥–æ –∏—Å—Ç–µ—á–µ–Ω–∏—è
        refresh_time = self.token_expires_at - timedelta(minutes=30)
        return datetime.now() >= refresh_time


class YandexASR:
    def __init__(self, token_manager):
        self.token_manager = token_manager
    
    def recognize_audio(self, audio_data, format="lpcm", sample_rate=16000):
        """–†–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ –∞—É–¥–∏–æ"""
        url = "https://stt.api.cloud.yandex.net/speech/v1/stt:recognize"
        
        headers = {
            "Authorization": f"Bearer {self.token_manager.get_token()}",
            "Content-Type": "audio/x-pcm;bit=16;rate=16000"
        }
        
        params = {
            "topic": "general",
            "lang": "ru-RU",
            "format": format,
            "sampleRateHertz": sample_rate,
            "folderId": self.token_manager.folder_id
        }
        
        try:
            response = requests.post(
                url,
                headers=headers,
                params=params,
                data=audio_data
            )
            response.raise_for_status()
            return response.json()
            
        except requests.exceptions.RequestException as e:
            if hasattr(e, 'response') and e.response and e.response.status_code == 401:
                # –¢–æ–∫–µ–Ω –∏—Å—Ç–µ–∫, –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ–±–Ω–æ–≤–ª—è–µ–º
                self.token_manager.get_new_token()
                headers["Authorization"] = f"Bearer {self.token_manager.iam_token}"
                
                # –ü–æ–≤—Ç–æ—Ä—è–µ–º –∑–∞–ø—Ä–æ—Å
                response = requests.post(
                    url,
                    headers=headers,
                    params=params,
                    data=audio_data
                )
                response.raise_for_status()
                return response.json()
            else:
                raise


def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è - —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏ –¥–µ–º–æ"""
    print("üöÄ –†–ï–®–ï–ù–ò–ï –ü–†–û–ë–õ–ï–ú–´ –° –ò–°–¢–ï–ö–®–ò–ú YANDEX IAM –¢–û–ö–ï–ù–û–ú")
    print("="*60)
    
    # –°–æ–∑–¥–∞–µ–º –º–µ–Ω–µ–¥–∂–µ—Ä —Ç–æ–∫–µ–Ω–æ–≤ —Å –≤–∞—à–∏–º–∏ –¥–∞–Ω–Ω—ã–º–∏
    token_manager = YandexTokenManager(OAUTH_TOKEN, FOLDER_ID)
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º –Ω–æ–≤—ã–π —Ç–æ–∫–µ–Ω
        print("\nüîÑ –û–±–Ω–æ–≤–ª—è–µ–º IAM —Ç–æ–∫–µ–Ω...")
        new_token = token_manager.get_new_token()
        
        print(f"\n‚úÖ –£–°–ü–ï–•! –¢–æ–∫–µ–Ω –æ–±–Ω–æ–≤–ª–µ–Ω")
        print(f"üìÖ –î–µ–π—Å—Ç–≤—É–µ—Ç –¥–æ: {token_manager.token_expires_at}")
        print(f"üîë –ù–æ–≤—ã–π —Ç–æ–∫–µ–Ω: {new_token[:50]}...")
        
        # –°–æ–∑–¥–∞–µ–º ASR –∫–ª–∏–µ–Ω—Ç
        asr_client = YandexASR(token_manager)
        
        print(f"\nüé§ ASR –∫–ª–∏–µ–Ω—Ç –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!")
        print(f"üìÅ Folder ID: {FOLDER_ID}")
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ (–±–µ–∑ –∞—É–¥–∏–æ)
        print(f"\nüß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ...")
        test_url = "https://stt.api.cloud.yandex.net/speech/v1/stt:recognize"
        test_headers = {
            "Authorization": f"Bearer {new_token}",
            "Content-Type": "audio/x-pcm;bit=16;rate=16000"
        }
        test_params = {
            "folderId": FOLDER_ID,
            "lang": "ru-RU"
        }
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—É—Å—Ç–æ–π –∑–∞–ø—Ä–æ—Å –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
        test_response = requests.post(test_url, headers=test_headers, params=test_params, data=b'')
        
        if test_response.status_code in [200, 400]:  # 400 –Ω–æ—Ä–º–∞–ª—å–Ω–æ –¥–ª—è –ø—É—Å—Ç—ã—Ö –¥–∞–Ω–Ω—ã—Ö
            print("‚úÖ –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Ä–∞–±–æ—Ç–∞–µ—Ç! –¢–æ–∫–µ–Ω –≤–∞–ª–∏–¥–µ–Ω")
        else:
            print(f"‚ö†Ô∏è  –ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç: {test_response.status_code}")
            
        print(f"\nüéâ –í–°–Å –ì–û–¢–û–í–û!")
        print(f"–¢–µ–ø–µ—Ä—å –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å ASR –±–µ–∑ –æ—à–∏–±–æ–∫ 401")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
        print(f"\nüìã –ü–†–ò–ú–ï–† –ò–°–ü–û–õ–¨–ó–û–í–ê–ù–ò–Ø –í –í–ê–®–ï–ú –ö–û–î–ï:")
        print("="*60)
        print("# –ó–∞–º–µ–Ω–∏—Ç–µ –≤–∞—à —Å—Ç–∞—Ä—ã–π –∫–æ–¥ –Ω–∞:")
        print("token_manager = YandexTokenManager(OAUTH_TOKEN, FOLDER_ID)")
        print("asr_client = YandexASR(token_manager)")
        print("result = asr_client.recognize_audio(audio_data)")
        
        return token_manager, asr_client
        
    except Exception as e:
        print(f"‚ùå –û–®–ò–ë–ö–ê: {e}")
        print(f"\nüîß –ü–†–û–í–ï–†–¨–¢–ï:")
        print(f"1. OAuth —Ç–æ–∫–µ–Ω –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π")
        print(f"2. Folder ID –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π") 
        print(f"3. –ò–Ω—Ç–µ—Ä–Ω–µ—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ")
        print(f"4. –í–∫–ª—é—á–µ–Ω –ª–∏ Speech Recognition –≤ –ø–∞–ø–∫–µ")
        return None, None


if __name__ == "__main__":
    token_manager, asr_client = main()
    
    if token_manager:
        print(f"\n‚è∞ –¢–æ–∫–µ–Ω –±—É–¥–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–±–Ω–æ–≤–ª—è—Ç—å—Å—è –∫–∞–∂–¥—ã–µ 11.5 —á–∞—Å–æ–≤")
        print(f"üîÑ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ token_manager.get_token() –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∞–∫—Ç—É–∞–ª—å–Ω–æ–≥–æ —Ç–æ–∫–µ–Ω–∞")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Ä–µ–º—è –∏—Å—Ç–µ—á–µ–Ω–∏—è
        time_left = token_manager.token_expires_at - datetime.now()
        hours_left = time_left.total_seconds() / 3600
        print(f"‚è≥ –î–æ –∏—Å—Ç–µ—á–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞: {hours_left:.1f} —á–∞—Å–æ–≤")
