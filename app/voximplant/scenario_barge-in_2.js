/**
 * asterisk-vox-bot -—Å—Ü–µ–Ω–∞—Ä–∏–π –¥–ª—è –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞ 
 * –í–µ—Ä—Å–∏—è 8.4.1 (—Å—Ç–∞–±–∏–ª—å–Ω–∞—è, —Å –∑–∞—â–∏—Ç–æ–π –æ—Ç –ª–æ–∂–Ω–æ–≥–æ barge-in)
 *
 * –û—Ç–ª–∏—á–∏—è: –≥–æ–≤–æ—Ä–∏–º —Ü–µ–ª—ã–º–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è–º–∏ (–ø–æ '|'), –æ—á–µ—Ä–µ–¥—å TTS, –±–∞—Ä–≥–∏–Ω —á–∏—Å—Ç–∏—Ç –æ—á–µ—Ä–µ–¥—å.
 */

require(Modules.ASR);

// ‚îÄ‚îÄ‚îÄ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
const WS_URL = "ws://31.207.75.71:9000/ws";
const VOICE = VoiceList.TBank.ru_RU_Alyona;

const SPEECH_END_TIMEOUT = 200;   // —Å—Ç—Ä–∞—Ö–æ–≤–∫–∞: –æ–∑–≤—É—á–∏—Ç—å —Ö–≤–æ—Å—Ç –±–µ–∑ '|', –º—Å
const DEBOUNCE_TIMEOUT   = 700;   // –∑–∞—â–∏—Ç–∞ –æ—Ç —ç—Ö–∞ —Å—Ä–∞–∑—É –ø–æ—Å–ª–µ —Å—Ç–∞—Ä—Ç–∞ TTS, –º—Å
const BARGE_IN_GUARD_MS  = 400;   // –∏–≥–Ω–æ—Ä –±–∞—Ä–≥–∏–Ω–∞ –ø–µ—Ä–≤—ã–µ N –º—Å
const INPUT_DEBOUNCE_MS  = 1200;  // —Ç–∏—à–∏–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è = –∫–æ–Ω–µ—Ü —Ä–µ–ø–ª–∏–∫–∏, –º—Å
// ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ

// ‚îÄ‚îÄ‚îÄ –≥–ª–æ–±–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
let call, asr, wsReady = false;

// –±—É—Ñ–µ—Ä –æ—Ç –±—ç–∫–µ–Ω–¥–∞ (–æ—Ç–≤–µ—Ç –±–æ—Ç–∞ ‚Üí –¥–ª—è TTS)
let buf = "";
let bufTimer = null;

// –±—É—Ñ–µ—Ä —Ä–µ—á–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (ASR)
let utterBuf = "";
let utterTimer = null;
let lastUtter = "";

// TTS
let currentPlayer = null;
let isSpeaking = false;
let lastSpeakStartedAt = 0;

// –æ—á–µ—Ä–µ–¥—å TTS
let ttsQueue = [];
let ttsBusy  = false;
// ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ

function clean(txt) {
  // –ú–æ–∂–Ω–æ –≤ –∫–æ–Ω—Ü–µ –¥–æ–±–∞–≤–∏—Ç—å —Ç–æ—á–∫—É, –µ—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ —á—ë—Ç—á–µ –∫–∞–¥–µ–Ω—Å:
  // if (s && !/[.!?‚Ä¶]$/.test(s)) s += ".";
  return String(txt).replace(/[|*]/g, " ").replace(/\s+/g, " ").trim();
}

VoxEngine.addEventListener(AppEvents.CallAlerting, function (ev) {
  call = ev.call;
  Logger.write("üöÄ start, callId=" + call.id);
  call.answer();

  // 1) ASR
  const HINTS_EXTRA = [
    "–∫–ù","–∫–Ω","–∫–∏–ª–æ–Ω—å—é—Ç–æ–Ω","–∫–∏–ª–æ–Ω—å—é—Ç–æ–Ω—ã","–∫–∏–ª–æ–Ω—å—é—Ç–æ–Ω–∞","–∫–∞-—ç–Ω","–∫—ç-—ç–Ω","–∫ —ç–Ω","–∫ —ç–ù","–∫—ç–Ω",
    "–ù","–Ω—å—é—Ç–æ–Ω","–Ω—å—é—Ç–æ–Ω–æ–≤","–Ω—å—é—Ç–æ–Ω–µ",
    "–ù¬∑–º","–Ω—å—é—Ç–æ–Ω-–º–µ—Ç—Ä","–Ω—å—é—Ç–æ–Ω –º–µ—Ç—Ä","–Ω –º",
    "–ù¬∑–º–º","–Ω—å—é—Ç–æ–Ω –º–∏–ª–ª–∏–º–µ—Ç—Ä","–Ω –º–º",
    "–ú–ü–∞","–º–ø–∞","–º—ç-–ø—ç-–∞","—ç–º-–ø—ç-–∞","–º–µ–≥–∞ –ø–∞—Å–∫–∞–ª—å","–º–µ–≥–∞–ø–∞—Å–∫–∞–ª—å",
    "–∫–ü–∞","–∫–ø–∞","–∫—ç-–ø—ç-–∞","–∫–∏–ª–æ–ø–∞—Å–∫–∞–ª—å","–∫–∏–ª–æ –ø–∞—Å–∫–∞–ª—å","–ø–∞—Å–∫–∞–ª—å","–ü–∞",
    "–ù/–º–º¬≤","–Ω—å—é—Ç–æ–Ω –Ω–∞ –º–∏–ª–ª–∏–º–µ—Ç—Ä –∫–≤–∞–¥—Ä–∞—Ç–Ω—ã–π","–Ω –Ω–∞ –º–º2","–Ω/–º–º2",
    "–ì—Ü","–≥–µ—Ä—Ü","—á–∞—Å—Ç–æ—Ç–∞ –≤ –≥–µ—Ä—Ü–∞—Ö",
    "–º–º","–º–∏–ª–ª–∏–º–µ—Ç—Ä","–º–∏–ª–ª–∏–º–µ—Ç—Ä—ã","–º–∏–ª–ª–∏–º–µ—Ç—Ä–æ–≤","mm",
    "—Å–º","—Å–∞–Ω—Ç–∏–º–µ—Ç—Ä","—Å–∞–Ω—Ç–∏–º–µ—Ç—Ä—ã","—Å–∞–Ω—Ç–∏–º–µ—Ç—Ä–æ–≤","cm",
    "–º","–º–µ—Ç—Ä","–º–µ—Ç—Ä—ã","–º–µ—Ç—Ä–æ–≤",
    "–º–º/–º–∏–Ω","–º–∏–ª–ª–∏–º–µ—Ç—Ä–æ–≤ –≤ –º–∏–Ω—É—Ç—É","–º–º –≤ –º–∏–Ω—É—Ç—É",
    "–º–º/—Å","–º–∏–ª–ª–∏–º–µ—Ç—Ä–æ–≤ –≤ —Å–µ–∫—É–Ω–¥—É","–º–º –≤ —Å–µ–∫—É–Ω–¥—É",
    "–º/—Å","–º–µ—Ç—Ä–æ–≤ –≤ —Å–µ–∫—É–Ω–¥—É",
    "–æ–±/–º–∏–Ω","rpm","–æ–± –≤ –º–∏–Ω—É—Ç—É",
    "–∫–≥","–∫–∏–ª–æ–≥—Ä–∞–º–º","–∫–∏–ª–æ–≥—Ä–∞–º–º–∞","–∫–∏–ª–æ–≥—Ä–∞–º–º—ã","kg",
    "–≥—Ä–∞–º–º","–≥—Ä–∞–º–º–∞","–≥—Ä–∞–º–º—ã",
    "—Ç","—Ç–æ–Ω–Ω–∞","—Ç–æ–Ω–Ω—ã",
    "%","–ø—Ä–æ—Ü–µ–Ω—Ç—ã","–ø—Ä–æ—Ü–µ–Ω—Ç",
    "–ª/–º–∏–Ω","–ª–∏—Ç—Ä –≤ –º–∏–Ω—É—Ç—É","–ª–∏—Ç—Ä–æ–≤ –≤ –º–∏–Ω—É—Ç—É","l/min",
    "–±–∞—Ä","bar","–∫–≥—Å/—Å–º¬≤","–∫–∏–ª–æ–≥—Ä–∞–º–º —Å–∏–ª—ã –Ω–∞ —Å–∞–Ω—Ç–∏–º–µ—Ç—Ä –∫–≤–∞–¥—Ä–∞—Ç–Ω—ã–π",
    "–í—Ç","–≤–∞—Ç—Ç","w","–∫–í—Ç","–∫–≤—Ç","–∫–∏–ª–æ–≤–∞—Ç—Ç","kw","–∫–í—Ç¬∑—á","–∫–≤—Ç—á","–∫–∏–ª–æ–≤–∞—Ç—Ç —á–∞—Å",
    "–í","–≤–æ–ª—å—Ç","v","–ê","–∞–º–ø–µ—Ä","amp","–û–º","–æ–º—ã","ohm","Œ©",
    "–¥–ë","–¥–µ—Ü–∏–±–µ–ª","db",
    "–º–∏–Ω/—á","–º–∏–Ω—É—Ç –≤ —á–∞—Å","–º–∏–Ω –Ω–∞ —á–∞—Å",
    "ISO 7500-1","ASTM E4","ISO 6892-1","ASTM E8","ASTM E9",
  ];

  asr = VoxEngine.createASR({
    profile: ASRProfileList.TBank.ru_RU,
    interimResults: true,
    phraseHints: [
      "—Ç–≤–µ—Ä–¥–æ–º–µ—Ä","—Ç–≤–µ—Ä–¥–æ–º–µ—Ä—ã","—Ç–≤–µ—Ä–¥–æ–º–µ—Ä –†–æ–∫–≤–µ–ª–ª–∞","—Ç–≤–µ—Ä–¥–æ–º–µ—Ä –ë—Ä–∏–Ω–µ–ª–ª—è","—Ç–≤–µ—Ä–¥–æ–º–µ—Ä –í–∏–∫–∫–µ—Ä—Å–∞","–º–∏–∫—Ä–æ—Ç–≤–µ—Ä–¥–æ–º–µ—Ä",
      "—Ä–∞–∑—Ä—ã–≤–Ω–∞—è –º–∞—à–∏–Ω–∞","—Ä–∞–∑—Ä—ã–≤–Ω—ã–µ –º–∞—à–∏–Ω—ã","–∏—Å–ø—ã—Ç–∞—Ç–µ–ª—å–Ω–∞—è –º–∞—à–∏–Ω–∞","–∏—Å–ø—ã—Ç–∞—Ç–µ–ª—å–Ω—ã–µ –º–∞—à–∏–Ω—ã","—É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è —Ä–∞–∑—Ä—ã–≤–Ω–∞—è –º–∞—à–∏–Ω–∞",
      "–∏—Å–ø—ã—Ç–∞—Ç–µ–ª—å–Ω—ã–π –ø—Ä–µ—Å—Å","–∏—Å–ø—ã—Ç–∞—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–µ—Å—Å—ã","–ø—Ä–µ—Å—Å –ü–ò",
      "–†–ì–ú","–†–ì–ú-1000","–†–ì–ú-1000-–ê",
      "–¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∞—è –º–∞—à–∏–Ω–∞","—É—Å—Ç–∞–ª–æ—Å—Ç–Ω–∞—è –º–∞—à–∏–Ω–∞",
      "–∏—Å–ø—ã—Ç–∞–Ω–∏–µ –Ω–∞ —Ä–∞—Å—Ç—è–∂–µ–Ω–∏–µ","–∏—Å–ø—ã—Ç–∞–Ω–∏–µ –Ω–∞ —Å–∂–∞—Ç–∏–µ","–∏—Å–ø—ã—Ç–∞–Ω–∏–µ –Ω–∞ –∏–∑–≥–∏–±","–ú–µ—Ç—Ä–æ—Ç—ç—Å—Ç",
      "–†–ì–ú-–ì-–ê","–†–≠–ú","–†–≠–ú-I-0,1","–†–≠–ú-1","–†–≠–ú-50","–†–≠–ú-100","–†–≠–ú-200","–†–≠–ú-300","–†–≠–ú-500","–†–≠–ú-600",
      "–†–≠–ú-I-2","–†–≠–ú-I-3","–†–≠–ú-I-5","–†–≠–ú-I-10",
      "–£–ò–ú-–î","–£–ò–ú-–î-100","–£–ò–ú-–î-250","–£–ò–ú-–î-500","–£–ò–ú-–î-750","–ø–Ω–µ–≤–º–æ–¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∞—è –º–∞—à–∏–Ω–∞",
      "–ü–ò–ú-–ú–†-100","–ü–ò–ú-–ú–†-200","–ü–ò–ú-–ú–†-300",
      "—É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–µ –∏—Å–ø—ã—Ç–∞—Ç–µ–ª—å–Ω—ã–µ –º–∞—à–∏–Ω—ã","—É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è –º–∞—à–∏–Ω–∞",
      "–º–∞—à–∏–Ω–∞ –Ω–∞ —É—Å—Ç–∞–ª–æ—Å—Ç—å","—É—Å—Ç–∞–ª–æ—Å—Ç–Ω—ã–µ –∏—Å–ø—ã—Ç–∞–Ω–∏—è",
      "–º–∞—à–∏–Ω—ã –Ω–∞ –∫—Ä—É—á–µ–Ω–∏–µ","–º–∞—à–∏–Ω—ã –Ω–∞ –∏–∑–≥–∏–±",
      "–ú–ö","–ú–ö–°","–ú–ö–°-1000","–ú–ö–°-2000","–ú–ö–°-3000","–ú–ö–°-500",
      "—Å–∏—Å—Ç–µ–º—ã —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–Ω—ã—Ö –∏—Å–ø—ã—Ç–∞–Ω–∏–π","–°–¢–ò",
      "—ç–∫—Å—Ç–µ–Ω–∑–æ–º–µ—Ç—Ä","–£–ò–î-–ü–ë","M-VIEW",
      "–∫–æ–ø—Ä–∞ –º–∞—è—Ç–Ω–∏–∫–æ–≤–∞—è","–∫–æ–ø—Ä—ã","–ö–ú","–ö–í","–ö–ú–ú","–ò–ö–ú-450-–ê",
      "—Å—Ç–∏–ª–æ—Å–∫–æ–ø","–°–õ–ü","–°–õ-13–£","–°–õ-15",
      "–∫–ª–∏–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –∫–∞–º–µ—Ä—ã","–ö–¢–•","–ö–ò–û","–ö–ò–£","–ö–¢–í","–ö–¢–ó","–ö–¢–ß",
      "—Ä–µ—Å—É—Ä—Å–Ω–æ–µ –∏—Å–ø—ã—Ç–∞–Ω–∏–µ","–∏—Å–ø—ã—Ç–∞–Ω–∏–µ –Ω–∞ –∏–∑–Ω–æ—Å",
      "–º–∞—à–∏–Ω—ã —à–ª–∏—Ñ–æ–≤–∞–ª—å–Ω–æ-–ø–æ–ª–∏—Ä–æ–≤–∞–ª—å–Ω—ã–µ","–ú–®–ü","–ú–ü",
      "–º–∏–∫—Ä–æ—Å–∫–æ–ø –º–µ—Ç–∞–ª–ª–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∏–π","–ú–ú–ò","–ú–ú–†","–ú–ú–ü",
      "–ª–∞–±–æ—Ä–∞—Ç–æ—Ä–∏—è –º–æ–¥—É–ª—å–Ω–∞—è","–õ–ú–ú-25",
      "–º–µ–±–µ–ª—å –ª–∞–±–æ—Ä–∞—Ç–æ—Ä–Ω–∞—è","–°–ö–ó-1","–°–ö–ó-2","–°–ö–ó-3-–ê","–°–ö–ó-4"
    ].concat(HINTS_EXTRA)
  });

  // –±–∞—Ä–≥–∏–Ω: –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º/–æ—Ç–º–µ–Ω—è–µ–º TTS –∏ –æ—á–µ—Ä–µ–¥—å (–µ—Å–ª–∏ –Ω–µ —Å–ª–∏—à–∫–æ–º —Ä–∞–Ω–æ)
  const stopPlayerOnBargeIn = (eventName) => {
    const sinceStart = Date.now() - lastSpeakStartedAt;
    if (currentPlayer && sinceStart < BARGE_IN_GUARD_MS) {
      // —Å–ª–∏—à–∫–æ–º —Ä–∞–Ω–æ ‚Äî –≤–µ—Ä–æ—è—Ç–Ω–æ–µ —ç—Ö–æ; –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º
      return;
    }
    Logger.write(`[BARGE-IN] '${eventName}' ‚Üí cancel TTS (sinceStart=${sinceStart}ms).`);
    if (currentPlayer) {
      try { currentPlayer.stop(); } catch (e) {}
      currentPlayer = null;
    }
    isSpeaking = false;
    // –æ—á–∏—â–∞–µ–º –æ—á–µ—Ä–µ–¥—å, —á—Ç–æ–±—ã –Ω–µ –¥–æ–≥–æ–≤–∞—Ä–∏–≤–∞—Ç—å —É—Å—Ç–∞—Ä–µ–≤—à–µ–µ
    if (ttsQueue.length) {
      ttsQueue = [];
      ttsBusy  = false;
    }
  };

  // –±–µ–∑–æ–ø–∞—Å–Ω—ã–µ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ —Å–æ–±—ã—Ç–∏—è ASR (—Ä–∞–∑–Ω—ã–µ –ø—Ä–æ–≤–∞–π–¥–µ—Ä—ã –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç —Ä–∞–∑–Ω—ã–π –Ω–∞–±–æ—Ä)
  function hasASREvent(name) {
    return typeof ASREvents !== 'undefined' && ASREvents && typeof ASREvents[name] !== 'undefined';
  }
  if (hasASREvent('CaptureStarted')) {
    asr.addEventListener(ASREvents.CaptureStarted, () => stopPlayerOnBargeIn('CaptureStarted'));
  }
  if (hasASREvent('InterimResult')) {
    asr.addEventListener(ASREvents.InterimResult, () => stopPlayerOnBargeIn('InterimResult'));
  }

  // –ë—ã—Å—Ç—Ä—ã–π —Ñ–ª–∞—à –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–π —Ä–µ–ø–ª–∏–∫–∏ –ø–æ –æ–∫–æ–Ω—á–∞–Ω–∏—é –∑–∞—Ö–≤–∞—Ç–∞ —Ä–µ—á–∏
  function flushUserUtterance(reason) {
    if (!utterBuf) return;
    if (utterTimer) { clearTimeout(utterTimer); utterTimer = null; }
    const normalizedReady = normalizeUtterance(utterBuf.trim());
    Logger.write(`üó£Ô∏è RAW(${reason}): ` + utterBuf);
    if (normalizedReady && wsReady && normalizedReady !== lastUtter && isInformative(normalizedReady)) {
      Logger.write("üß≠ NORM SEND: " + normalizedReady);
      socket.send(normalizedReady);
      lastUtter = normalizedReady;
    } else {
      Logger.write("‚è≥ skipped non-informative user chunk");
    }
    utterBuf = "";
    // –µ—Å–ª–∏ –≤ —ç—Ç–æ—Ç –º–æ–º–µ–Ω—Ç —à—ë–ª –Ω–∞–±–æ—Ä –æ—Ç–≤–µ—Ç–∞ ‚Äî –æ–±–Ω—É–ª–∏–º –µ–≥–æ, —á—Ç–æ–±—ã –Ω–µ —Å–º–µ—à–∏–≤–∞—Ç—å
    if (bufTimer) { clearTimeout(bufTimer); bufTimer = null; buf = ""; }
  }

  if (hasASREvent('CaptureStopped')) {
    asr.addEventListener(ASREvents.CaptureStopped, function () {
      flushUserUtterance('CaptureStopped');
    });
  }

  // –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞
  function normalizeUtterance(input) {
    if (!input) return input;
    let t = input;
    t = t.replace(/[‚Äì‚Äî‚àí]/g, "-").replace(/\s+/g, " ");

    t = t.replace(/\b(—Ä—ç–º|—Ä–µ–º|—Ä–µ–Ω)\b/gi, "–†–≠–ú");
    t = t.replace(/\b(—Ä–≥–º|—ç—Ä–≥—ç–º)\b/gi, "–†–ì–ú");
    t = t.replace(/\b(—Å—Ç–∏–ª–æ—Å?–∫–æ–ø|—Å—Ç–µ–ª–æ—Å–∫–æ–ø|—Å—Ç–∏–ª–æ—Å–∫–∞?–ø|—Ñ–∏–ª–æ—Å\w*|—Ñ–∏–ª–æ—Å–∫–æ–ø)\b/gi, "—Å—Ç–∏–ª–æ—Å–∫–æ–ø");

    t = t.replace(/\b(–∫\s?—ç–Ω|–∫–∞-—ç–Ω|–∫—ç-—ç–Ω|–∫\s?–µ–Ω|–∫\s?—ç\s?–Ω|–∫—ç–Ω)\b/gi, "–∫–ù");
    t = t.replace(/\b–∫–∏–ª–æ\s?–Ω—å—é—Ç–æ–Ω—ã?\b/gi, "–∫–ù");
    t = t.replace(/\b–∫–Ω\b/gi, "–∫–ù");

    t = t.replace(/\b(–º\s?–ø\s?–∞|–º—ç-–ø—ç-–∞|—ç–º-–ø—ç-–∞|–º–µ–≥–∞–ø–∞—Å–∫–∞–ª[—å—è–µ—ã]?|–º–µ–≥–∞\s?–ø–∞—Å–∫–∞–ª[—å—è–µ—ã]?)\b/gi, "–ú–ü–∞");
    t = t.replace(/\b(–∫\s?–ø\s?–∞|–∫—ç-–ø—ç-–∞|–∫–∏–ª–æ–ø–∞—Å–∫–∞–ª[—å—è–µ—ã]?|–∫–∏–ª–æ\s?–ø–∞—Å–∫–∞–ª[—å—è–µ—ã]?)\b/gi, "–∫–ü–∞");
    t = t.replace(/\b(–≥–µ—Ä—Ü|–≥–µ—Ä—Ü—ã|–≥—Ü)\b/gi, "–ì—Ü");

    t = t.replace(/\b–Ω—å—é—Ç–æ–Ω[–∞-—è]*\b/gi, "–ù");
    t = t.replace(/\b(–Ω—å—é—Ç–æ[–Ω–Ω][ -]?–º–µ—Ç—Ä[–∞-—è]*|–Ω\s?–º)\b/gi, "–ù¬∑–º");
    t = t.replace(/\b(–Ω—å—é—Ç–æ[–Ω–Ω][ -]?–º–∏–ª–ª–∏–º–µ—Ç—Ä[–∞-—è]*|–Ω\s?–º–º)\b/gi, "–ù¬∑–º–º");
    t = t.replace(/\b(–Ω(—å?—é—Ç–æ–Ω)?\s*(?:\/|–Ω–∞)\s*–º–º\s*(?:\^?2|¬≤)|–Ω—å—é—Ç–æ–Ω\s+–Ω–∞\s+–º–∏–ª–ª–∏–º–µ—Ç—Ä\s+–∫–≤–∞–¥—Ä–∞—Ç–Ω[–∞-—è]*)\b/gi, "–ù/–º–º¬≤");

    t = t.replace(/\b–º–∏–ª–ª–∏–º–µ—Ç—Ä[–∞-—è]*\b/gi, "–º–º");
    t = t.replace(/\bmm\b/gi, "–º–º");
    t = t.replace(/\b—Å–∞–Ω—Ç–∏–º–µ—Ç—Ä[–∞-—è]*\b/gi, "—Å–º");
    t = t.replace(/\bcm\b/gi, "—Å–º");
    t = t.replace(/\b–º–µ—Ç—Ä[–∞-—è]*\b/gi, "–º");

    t = t.replace(/\b(–º–∏–ª–ª–∏–º–µ—Ç—Ä–æ–≤\s+–≤\s+–º–∏–Ω—É—Ç—É|–º–º\s+–≤\s+–º–∏–Ω—É—Ç—É)\b/gi, "–º–º/–º–∏–Ω");
    t = t.replace(/\b(–º–∏–ª–ª–∏–º–µ—Ç—Ä–æ–≤\s+–≤\s+—Å–µ–∫—É–Ω–¥—É|–º–º\s+–≤\s+—Å–µ–∫—É–Ω–¥—É|–º–º\/—Å)\b/gi, "–º–º/—Å");
    t = t.replace(/\b(–º–µ—Ç—Ä–æ–≤\s+–≤\s+—Å–µ–∫—É–Ω–¥—É)\b/gi, "–º/—Å");
    t = t.replace(/\b(r\s?p\s?m|–æ–±–æ—Ä–æ—Ç–æ–≤?\s+–≤\s+–º–∏–Ω—É—Ç—É|–æ–±\/?–º–∏–Ω)\b/gi, "–æ–±/–º–∏–Ω");

    t = t.replace(/\b–∫–∏–ª–æ–≥—Ä–∞–º–º[–∞-—è]*\b/gi, "–∫–≥");
    t = t.replace(/\bkg\b/gi, "–∫–≥");
    t = t.replace(/\b–≥—Ä–∞–º–º[–∞-—è]*\b/gi, "–≥");
    t = t.replace(/\b—Ç–æ–Ω–Ω[–∞-—è]*\b/gi, "—Ç");

    t = t.replace(/\b–≥—Ä–∞–¥—É—Å(–æ–≤)?\s+—Ü–µ–ª—å—Å–∏—è\b/gi, "¬∞C");
    t = t.replace(/\b–ø–æ\s+—Ü–µ–ª—å—Å–∏—é\b/gi, "¬∞C");
    t = t.replace(/\b–ø—Ä–æ—Ü–µ–Ω—Ç(–æ–≤)?\b/gi, "%");

    t = t.replace(/\b(–≤–∞—Ç—Ç(–∞|–æ–≤)?|w)\b/gi, "–í—Ç");
    t = t.replace(/\b(–∫–∏–ª–æ–≤–∞—Ç—Ç(–∞|–æ–≤)?|–∫\s?–≤—Ç|kw)\b/gi, "–∫–í—Ç");
    t = t.replace(/\b(–∫–í—Ç\s*[¬∑xx]\s*—á|–∫–∏–ª–æ–≤–∞—Ç—Ç\s*—á–∞—Å[–∞-—è]*|–∫–≤—Ç—á)\b/gi, "–∫–í—Ç¬∑—á");
    t = t.replace(/\b(–≤–æ–ª—å—Ç(–∞|–æ–≤)?|v)\b/gi, "–í");
    t = t.replace(/\b(–∞–º–ø–µ—Ä(–∞|–æ–≤)?|amp(?:s)?)\b/gi, "–ê");
    t = t.replace(/\b(–æ–º(–∞|–æ–≤)?|ohm|Œ©)\b/gi, "–û–º");

    t = t.replace(/\b(–ª–∏—Ç—Ä(–æ–≤)?\s*–≤\s*–º–∏–Ω—É—Ç—É|–ª\/?–º–∏–Ω|l\/?min)\b/gi, "–ª/–º–∏–Ω");
    t = t.replace(/\b(–±–∞—Ä|bar)\b/gi, "–±–∞—Ä");
    t = t.replace(/\b(–∫–≥—Å\s*\/\s*—Å–º\s*(?:\^?2|¬≤)|–∫–∏–ª–æ–≥—Ä–∞–º–º\s*—Å–∏–ª—ã\s*–Ω–∞\s*—Å–∞–Ω—Ç–∏–º–µ—Ç—Ä\s*–∫–≤–∞–¥—Ä–∞—Ç–Ω[–∞-—è]*)\b/gi, "–∫–≥—Å/—Å–º¬≤");

    t = t.replace(/\b(–¥–µ—Ü–∏–±–µ–ª(–∞|–æ–≤)?|–¥–±|db)\b/gi, "–¥–ë");
    t = t.replace(/\s+\/\s+/g, "/");

    return t.trim();
  }

  function isInformative(text) {
    if (!text) return false;
    const trimmed = text.trim().toLowerCase();
    const fillers = ["–¥–∞","–∞–≥–∞","—É–≥—É","–Ω—É","–æ–∫","–æ–∫–µ–π","—Ö–æ—Ä–æ—à–æ","–ø–æ–Ω—è—Ç–Ω–æ","–æ","—É–≥—É-—É–≥—É"];
    if (trimmed.length <= 2) return false;
    if (fillers.includes(trimmed)) return false;
    if (/[0-9]/.test(trimmed)) return true;
    if (/(–∫–Ω|–º–ø–∞|–º–º\/—Å|–º–º\/–º–∏–Ω|–≥—Ü|iso|astm|–≥–æ—Å—Ç|—Ä–≥–º|—Ä—ç–º|—Å—Ç–∏–ª–æ—Å–∫–æ–ø|–∞—Ä–º–∞—Ç—É—Ä|—Ç–≤–µ—Ä–¥–æ–º–µ—Ä)/i.test(trimmed)) return true;
    return trimmed.split(/\s+/).length >= 3;
  }

  asr.addEventListener(ASREvents.Result, function (e) {
    if (!e.text) return;

    // –∞–∫–∫—É—Ä–∞—Ç–Ω–æ —Å–æ–±–∏—Ä–∞–µ–º —Ä–∞—Å—Ç—É—â–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    const txt = e.text.trim();
    if (!utterBuf) {
      utterBuf = txt;
    } else if (txt.startsWith(utterBuf)) {
      utterBuf = txt; // —Ä–∞—Å—Ç—ë—Ç
    } else if (!utterBuf.startsWith(txt)) {
      utterBuf = (utterBuf + " " + txt).replace(/\s+/g, " ").trim();
    }

    if (utterTimer) clearTimeout(utterTimer);
    utterTimer = setTimeout(function () {
      const normalizedReady = normalizeUtterance(utterBuf.trim());
      Logger.write("üó£Ô∏è RAW: " + utterBuf);
      if (normalizedReady && wsReady && normalizedReady !== lastUtter && isInformative(normalizedReady)) {
        Logger.write("üß≠ NORM SEND: " + normalizedReady);
        socket.send(normalizedReady);
        lastUtter = normalizedReady;
      } else {
        Logger.write("‚è≥ skipped non-informative user chunk");
      }
      utterBuf = "";
      utterTimer = null;

      // –µ—Å–ª–∏ –≤ —ç—Ç–æ—Ç –º–æ–º–µ–Ω—Ç —à—ë–ª –Ω–∞–±–æ—Ä –æ—Ç–≤–µ—Ç–∞ ‚Äî –æ–±–Ω—É–ª–∏–º –µ–≥–æ, —á—Ç–æ–±—ã –Ω–µ —Å–º–µ—à–∏–≤–∞—Ç—å
      if (bufTimer) { clearTimeout(bufTimer); bufTimer = null; buf = ""; }
    }, INPUT_DEBOUNCE_MS);
  });

  // 2) –ø–æ–¥–∫–ª—é—á–∞–µ–º –≤—Ö–æ–¥—è—â–∏–π –∑–≤—É–∫ –∫ ASR
  call.sendMediaTo(asr);

  // 3) WebSocket –∫ –±—ç–∫–µ–Ω–¥—É
  const callerId = call.callerid();
  const urlWithCallerId = `${WS_URL}?callerId=${encodeURIComponent(callerId)}`;
  const socket = VoxEngine.createWebSocket(urlWithCallerId);

  socket.addEventListener(WebSocketEvents.OPEN, function () {
    wsReady = true;
    Logger.write(`‚úÖ WS open for ${callerId}.`);
  });

  // –ì–æ–≤–æ—Ä–∏–º —Ç–æ–ª—å–∫–æ —Ü–µ–ª—ã–º–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è–º–∏ –ø–æ —Å–∏–º–≤–æ–ª—É '|'
  socket.addEventListener(WebSocketEvents.MESSAGE, function (m) {
    if (!m.text) return;

    buf += m.text;

    // 1) –≤—ã–≥–æ–≤–æ—Ä–∏–º –≤—Å–µ –∑–∞–≤–µ—Ä—à—ë–Ω–Ω—ã–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è
    while (buf.includes("|")) {
      const idx = buf.indexOf("|");
      const sentence = clean(buf.slice(0, idx));
      buf = buf.slice(idx + 1);
      if (sentence) speakQueued(sentence);
    }

    // 2) –µ—Å–ª–∏ –æ—Å—Ç–∞–ª—Å—è ¬´—Ö–≤–æ—Å—Ç¬ª –±–µ–∑ '|', –∑–∞–≤–µ–¥—ë–º —Å—Ç—Ä–∞—Ö–æ–≤–æ—á–Ω—ã–π —Ç–∞–π–º–µ—Ä
    if (bufTimer) clearTimeout(bufTimer);
    if (buf) {
      bufTimer = setTimeout(function () {
        const tail = clean(buf);
        buf = "";
        bufTimer = null;
        if (tail) speakQueued(tail);
      }, SPEECH_END_TIMEOUT);
    } else {
      bufTimer = null;
    }
  });

  socket.addEventListener(WebSocketEvents.ERROR, function (e) {
    Logger.write("‚ùå WS error:" + JSON.stringify(e));
  });

  socket.addEventListener(WebSocketEvents.CLOSE, function () {
    Logger.write("üîå WS close.");
    wsReady = false;
  });

  // 4) –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –∑–≤–æ–Ω–∫–∞
  call.addEventListener(CallEvents.Disconnected, function () {
    Logger.write("üì¥ hang-up.");
    VoxEngine.terminate();
  });
});

// ‚îÄ‚îÄ‚îÄ –û—á–µ—Ä–µ–¥—å TTS ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
function speakQueued(text) {
  if (!text) return;
  ttsQueue.push(text);
  if (!ttsBusy) processTTSQueue();
}

function processTTSQueue() {
  if (ttsBusy) return;
  const next = ttsQueue.shift();
  if (!next) return;

  ttsBusy = true;
  speakOne(next, function () {
    ttsBusy = false;
    processTTSQueue();
  });
}

/* –ü—Ä–æ–∏–≥—Ä–∞—Ç—å –æ–¥–Ω—É —Ñ—Ä–∞–∑—É */
function speakOne(text, done) {
  Logger.write(`‚ñ∂Ô∏è TTS: "${text}"`);

  if (currentPlayer) {
    try { currentPlayer.stop(); } catch (e) {}
    currentPlayer = null;
  }

  isSpeaking = true;
  lastSpeakStartedAt = Date.now();
  setTimeout(() => { isSpeaking = false; }, DEBOUNCE_TIMEOUT);

  currentPlayer = VoxEngine.createTTSPlayer(text, {
    language: VOICE,
    progressivePlayback: true // —Ñ—Ä–∞–∑–∞ —É–∂–µ —Ü–µ–ª–∏–∫–æ–º ‚Üí –ø—Ä–æ—Å–æ–¥–∏—è —Ä–æ–≤–Ω–∞—è
  });
  currentPlayer.sendMediaTo(call);

  const finish = () => {
    currentPlayer = null;
    if (typeof done === "function") done();
  };

  currentPlayer.addEventListener(PlayerEvents.PlaybackFinished, finish);
  currentPlayer.addEventListener(PlayerEvents.Stopped,          finish);
}
