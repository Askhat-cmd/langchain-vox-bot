
#!/usr/bin/env python3
"""
–û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π StasisHandler —Å –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–µ–π –≤—Å–µ—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
–¶–µ–ª—å: 1.1 —Å–µ–∫—É–Ω–¥—ã –æ—Ç ASR –¥–æ –ø–µ—Ä–≤–æ–≥–æ –∑–≤—É–∫–∞
"""

import asyncio
import json
import logging
import websockets
import uuid
import os
import sys
import time
from datetime import datetime, timezone
from pathlib import Path
from typing import Dict, List, Optional

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞ –º–æ–¥—É–ª–µ–π –ø—Ä–æ–µ–∫—Ç–∞
current_dir = Path(__file__).parent
project_root = current_dir.parent.parent.parent
sys.path.insert(0, str(project_root))

from app.backend.asterisk.ari_client import AsteriskARIClient
from app.backend.rag.agent import Agent
from app.backend.services.yandex_tts_service import get_yandex_tts_service
from app.backend.services.asr_service import get_asr_service
from app.backend.utils.text_normalizer import normalize as normalize_text
from app.backend.services.log_storage import insert_log

# –ù–û–í–´–ï –ö–û–ú–ü–û–ù–ï–ù–¢–´ –û–ü–¢–ò–ú–ò–ó–ê–¶–ò–ò
from app.backend.services.yandex_grpc_tts import YandexGrpcTTS
from app.backend.services.tts_adapter import TTSAdapter
from app.backend.services.filler_tts import InstantFillerTTS
from app.backend.services.parallel_tts import ParallelTTSProcessor

logger = logging.getLogger(__name__)

class OptimizedAsteriskAIHandler:
    """
    –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ Asterisk —Å –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–µ–π –≤—Å–µ—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
    
    –ö–æ–º–ø–æ–Ω–µ–Ω—Ç—ã:
    1. Yandex gRPC TTS - –±—ã—Å—Ç—Ä—ã–π —Å–∏–Ω—Ç–µ–∑ —Ä–µ—á–∏
    2. Chunked Response Generator - streaming AI –æ—Ç–≤–µ—Ç—ã
    3. Filler Words - –º–≥–Ω–æ–≤–µ–Ω–Ω—ã–µ –ø—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–µ —Ä–µ–∞–∫—Ü–∏–∏
    4. Parallel TTS Processor - –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ —á–∞–Ω–∫–æ–≤
    """
    
    def __init__(self):
        self.ws_url = "ws://localhost:8088/ari/events?app=asterisk-bot&api_key=asterisk:asterisk123"
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º AI Agent
        try:
            self.agent = Agent()
            logger.info("‚úÖ AI Agent —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ AI Agent: {e}")
            self.agent = None
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º ASR —Å–µ—Ä–≤–∏—Å
        try:
            self.asr = get_asr_service()
            logger.info("‚úÖ ASR —Å–µ—Ä–≤–∏—Å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ ASR: {e}")
            self.asr = None
        
        # –ù–û–í–´–ï –ö–û–ú–ü–û–ù–ï–ù–¢–´ –û–ü–¢–ò–ú–ò–ó–ê–¶–ò–ò
        self.grpc_tts = None
        self.tts_adapter = None
        self.filler_tts = None
        self.parallel_tts = None
        
        # –ê–∫—Ç–∏–≤–Ω—ã–µ –∑–≤–æ–Ω–∫–∏ —Å –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
        self.active_calls = {}
        
        # –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
        self.SPEECH_END_TIMEOUT = 0.2
        self.BARGE_IN_GUARD_MS = 1500  # –£–≤–µ–ª–∏—á–µ–Ω–æ –¥–ª—è Asterisk
        self.INPUT_DEBOUNCE_MS = 1200
        
        # –ú–µ—Ç—Ä–∏–∫–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
        self.performance_metrics = {}
        
        logger.info("üöÄ OptimizedAsteriskAIHandler –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
    
    async def initialize_optimization_services(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≤—Å–µ—Ö —Å–µ—Ä–≤–∏—Å–æ–≤ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏"""
        try:
            logger.info("üîÑ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Ä–≤–∏—Å–æ–≤ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏...")
            
            # 1. Yandex gRPC TTS
            self.grpc_tts = YandexGrpcTTS()
            await self.grpc_tts.initialize()
            
            # 2. TTS Adapter (gRPC + HTTP fallback)
            self.tts_adapter = TTSAdapter()
            await self.tts_adapter.initialize()
            
            # 3. Filler TTS
            self.filler_tts = InstantFillerTTS()
            await self.filler_tts.initialize()
            
            # 4. Parallel TTS Processor
            ari_client = AsteriskARIClient()
            self.parallel_tts = ParallelTTSProcessor(self.tts_adapter, ari_client)
            
            logger.info("‚úÖ –í—Å–µ —Å–µ—Ä–≤–∏—Å—ã –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —Å–µ—Ä–≤–∏—Å–æ–≤ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏: {e}")
            # Fallback –Ω–∞ —Å—Ç–∞—Ä—ã–µ —Å–µ—Ä–≤–∏—Å—ã
            self.tts = get_yandex_tts_service()
            logger.warning("‚ö†Ô∏è –ò—Å–ø–æ–ª—å–∑—É–µ–º fallback TTS —Å–µ—Ä–≤–∏—Å")
    
    async def handle_stasis_start(self, event):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞—á–∞–ª–æ –∑–≤–æ–Ω–∫–∞ —Å –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–π –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–µ–π"""
        channel_id = event.get('channel', {}).get('id')
        caller_id = event.get('channel', {}).get('caller', {}).get('number', 'Unknown')
        
        logger.info(f"üîî –ù–æ–≤—ã–π –∑–≤–æ–Ω–æ–∫: Channel={channel_id}, Caller={caller_id}")
        
        # –°–æ–∑–¥–∞–µ–º —Å–µ—Å—Å–∏—é –∑–≤–æ–Ω–∫–∞ —Å –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
        session_id = str(uuid.uuid4())
        start_time = datetime.now(timezone.utc)

        self.active_calls[channel_id] = {
            "session_id": session_id,
            "caller_id": caller_id,
            "start_time": start_time.isoformat(),
            "transcript": [],
            "status": "Started",
            
            # –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
            "response_buffer": "",
            "buffer_timer": None,
            "tts_queue": [],
            "is_recording": False,
            "tts_busy": False,
            "current_playback": None,
            "last_speak_started_at": 0,
            "is_speaking": False,
            "preload_cache": {},
            
            # –ù–æ–≤—ã–µ –º–µ—Ç—Ä–∏–∫–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
            "performance_start": time.time(),
            "asr_complete_time": None,
            "first_chunk_time": None,
            "first_audio_time": None,
            "user_interrupted": False
        }
        
        # –ö–∞–Ω–∞–ª —É–∂–µ –ø—Ä–∏–Ω—è—Ç –≤ dialplan
        async with AsteriskARIClient() as ari:
            logger.info(f"‚úÖ –ó–≤–æ–Ω–æ–∫ —É–∂–µ –ø—Ä–∏–Ω—è—Ç –≤ dialplan: {channel_id}")
            
            # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –æ—Ç AI Agent
            if self.agent:
                greeting = self.agent.prompts.get("greeting", "–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! –ß–µ–º –º–æ–≥—É –ø–æ–º–æ—á—å?")
            else:
                greeting = "–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! –°–∏—Å—Ç–µ–º–∞ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞."

            # –î–æ–±–∞–≤–ª—è–µ–º –≤ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ç
            self.active_calls[channel_id]["transcript"].append({
                "speaker": "bot",
                "text": greeting,
                "timestamp": datetime.now(timezone.utc).isoformat()
            })

            # –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ —á–µ—Ä–µ–∑ TTS Adapter
            if self.tts_adapter:
                await self.speak_optimized(channel_id, greeting)
            else:
                # Fallback –Ω–∞ —Å—Ç–∞—Ä—ã–π –º–µ—Ç–æ–¥
                await self.speak_queued(channel_id, greeting)
            
            logger.info(f"üé§ –ì–æ—Ç–æ–≤ –∫ –ø—Ä–∏–µ–º—É —Ä–µ—á–∏ –æ—Ç {caller_id}")

    async def process_user_speech_optimized(self, channel_id: str, audio_path: str):
        """
        –û–ü–¢–ò–ú–ò–ó–ò–†–û–í–ê–ù–ù–ê–Ø –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ—á–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        –¶–ï–õ–¨: 1.1 —Å–µ–∫—É–Ω–¥—ã –æ—Ç ASR –¥–æ –ø–µ—Ä–≤–æ–≥–æ –∑–≤—É–∫–∞
        """
        if channel_id not in self.active_calls:
            logger.warning(f"–ö–∞–Ω–∞–ª {channel_id} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–≤–æ–Ω–∫–∞—Ö")
            return

        call_data = self.active_calls[channel_id]
        session_id = call_data["session_id"]
        overall_start = time.time()

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–∞–Ω–∞–ª –µ—â–µ –∞–∫—Ç–∏–≤–µ–Ω
        if call_data.get("status") == "Completed":
            logger.info(f"üö´ –ö–∞–Ω–∞–ª {channel_id} —É–∂–µ –∑–∞–≤–µ—Ä—à–µ–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É —Ä–µ—á–∏")
            return

        try:
            logger.info(f"üéØ –û–ü–¢–ò–ú–ò–ó–ò–†–û–í–ê–ù–ù–ê–Ø –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ—á–∏ –¥–ª—è –∫–∞–Ω–∞–ª–∞ {channel_id}")
            
            # –≠–¢–ê–ü 1.2: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–∑–º–µ—Ä–∞ –∞—É–¥–∏–æ —Ñ–∞–π–ª–∞ –ø–µ—Ä–µ–¥ ASR
            if not os.path.exists(audio_path):
                logger.warning(f"‚ö†Ô∏è –ê—É–¥–∏–æ —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {audio_path}")
                return
                
            file_size = os.path.getsize(audio_path)
            if file_size < 1000:  # –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä 1KB
                logger.warning(f"‚ö†Ô∏è –ê—É–¥–∏–æ —Ñ–∞–π–ª —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π: {file_size} bytes, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º ASR")
                return
                
            logger.info(f"‚úÖ –ê—É–¥–∏–æ —Ñ–∞–π–ª –ø—Ä–æ–≤–µ—Ä–µ–Ω: {file_size} bytes")
            
            # 1. ASR: –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Ä–µ—á—å –≤ —Ç–µ–∫—Å—Ç
            if self.asr:
                logger.info(f"üé§ –ó–∞–ø—É—Å–∫–∞–µ–º ASR –¥–ª—è —Ñ–∞–π–ª–∞: {audio_path}")
                user_text = await self.asr.speech_to_text(audio_path)
                normalized_text = normalize_text(user_text)
                
                asr_complete_time = time.time()
                call_data["asr_complete_time"] = asr_complete_time
                
                logger.info(f"üé§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–∫–∞–∑–∞–ª: '{user_text}' ‚Üí '{normalized_text}'")

                # –î–æ–±–∞–≤–ª—è–µ–º –≤ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ç
                call_data["transcript"].append({
                    "speaker": "user",
                    "text": normalized_text,
                    "raw": user_text,
                    "timestamp": datetime.now(timezone.utc).isoformat()
                })
            else:
                logger.warning("ASR —Å–µ—Ä–≤–∏—Å –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
                normalized_text = "–ò–∑–≤–∏–Ω–∏—Ç–µ, —Å–∏—Å—Ç–µ–º–∞ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è —Ä–µ—á–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞"

            # 2. –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º TTS –ø—Ä–∏ barge-in
            await self.stop_tts_on_barge_in_optimized(channel_id, "UserSpeech")

            # 3. –û–ü–¢–ò–ú–ò–ó–ò–†–û–í–ê–ù–ù–ê–Ø AI –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Å chunking
            if self.agent and normalized_text:
                logger.info(f"ü§ñ –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –û–ü–¢–ò–ú–ò–ó–ò–†–û–í–ê–ù–ù–´–ô –æ—Ç–≤–µ—Ç –æ—Ç AI –∞–≥–µ–Ω—Ç–∞")
                
                try:
                    # –ó–∞–ø—É—Å–∫–∞–µ–º filler word –ù–ï–ú–ï–î–õ–ï–ù–ù–û
                    filler_task = asyncio.create_task(
                        self._play_instant_filler(channel_id, normalized_text)
                    )
                    
                    # –í–†–ï–ú–ï–ù–ù–û: –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π –º–µ—Ç–æ–¥ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
                    # TODO: –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ chunked generator –ø–æ—Å–ª–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è
                    logger.info("üîÑ –í–†–ï–ú–ï–ù–ù–û: –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π AI response –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è")
                    
                    # –ü–æ–ª—É—á–∞–µ–º –æ–±—ã—á–Ω—ã–π response generator –æ—Ç AI Agent
                    response_generator = self.agent.get_response_generator(normalized_text, session_id)
                    
                    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º AI –æ—Ç–≤–µ—Ç—ã —á–µ—Ä–µ–∑ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π –º–µ—Ç–æ–¥
                    await self.process_ai_response_streaming(channel_id, response_generator)
                    
                    # –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è filler
                    await filler_task
                    
                    total_time = time.time() - overall_start
                    logger.info(f"‚úÖ –û–ü–¢–ò–ú–ò–ó–ò–†–û–í–ê–ù–ù–ê–Ø –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞: {total_time:.2f}s")
                    
                    # –õ–æ–≥–∏—Ä—É–µ–º –º–µ—Ç—Ä–∏–∫–∏
                    self._log_performance_metrics(channel_id, total_time)
                    
                except Exception as ai_error:
                    logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ AI: {ai_error}", exc_info=True)
                    # Fallback –Ω–∞ —Å—Ç–∞—Ä—É—é —Å–∏—Å—Ç–µ–º—É
                    await self._fallback_to_old_system(channel_id, normalized_text)
            else:
                logger.warning("AI Agent –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –∏–ª–∏ —Ç–µ–∫—Å—Ç –ø—É—Å—Ç–æ–π")
                await self.speak_optimized(channel_id, "–ò–∑–≤–∏–Ω–∏—Ç–µ, —Å–∏—Å—Ç–µ–º–∞ –ò–ò –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞")

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ä–µ—á–∏: {e}", exc_info=True)

    async def _play_instant_filler(self, channel_id: str, user_text: str):
        """–í–æ—Å–ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç –º–≥–Ω–æ–≤–µ–Ω–Ω—ã–π filler word"""
        try:
            if not self.filler_tts:
                return
                
            filler_start = time.time()
            
            # –ü–æ–ª—É—á–∞–µ–º –º–≥–Ω–æ–≤–µ–Ω–Ω—ã–π filler
            filler_audio = await self.filler_tts.get_instant_filler(user_text)
            
            if filler_audio:
                # –í–æ—Å–ø—Ä–æ–∏–∑–≤–æ–¥–∏–º –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ
                await self._play_audio_data(channel_id, filler_audio)
                
                filler_time = time.time() - filler_start
                logger.info(f"‚ö° Filler played: {filler_time:.2f}s")
                
                # –õ–æ–≥–∏—Ä—É–µ–º –º–µ—Ç—Ä–∏–∫—É
                call_data = self.active_calls.get(channel_id, {})
                call_data["filler_time"] = filler_time
            
        except Exception as e:
            logger.error(f"‚ùå Filler playback error: {e}")

    async def process_chunked_ai_response(self, channel_id: str, chunked_generator):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç chunked AI –æ—Ç–≤–µ—Ç—ã —á–µ—Ä–µ–∑ Parallel TTS Processor"""
        try:
            if not self.parallel_tts:
                logger.warning("Parallel TTS Processor –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
                return
            
            # –ò—Ç–µ—Ä–∏—Ä—É–µ–º chunked generator
            async for chunk_data in chunked_generator:
                # –ó–∞–ø—É—Å–∫–∞–µ–º TTS –∫–∞–∂–¥–æ–≥–æ —á–∞–Ω–∫–∞ –ù–ï–ú–ï–î–õ–ï–ù–ù–û (–ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ)
                await self.parallel_tts.process_chunk_immediate(channel_id, chunk_data)
                
                # –õ–æ–≥–∏—Ä—É–µ–º –∫—Ä–∏—Ç–∏—á–µ—Å–∫—É—é –º–µ—Ç—Ä–∏–∫—É
                if chunk_data.get("is_first"):
                    first_chunk_time = time.time() - self.active_calls[channel_id]["performance_start"]
                    logger.info(f"üéØ FIRST CHUNK GENERATED: {first_chunk_time:.2f}s")
                    self.active_calls[channel_id]["first_chunk_time"] = first_chunk_time
                    
        except Exception as e:
            logger.error(f"‚ùå Chunked AI response error: {e}")

    async def process_ai_response_streaming(self, channel_id: str, response_generator):
        """–ü–æ—Ç–æ–∫–æ–≤–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–∞ AI —Å —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—è–º–∏ | (–∏–∑ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–π –≤–µ—Ä—Å–∏–∏)."""
        import time
        stasis_start = time.time()
        logger.info(f"‚è±Ô∏è –ü–†–û–§–ò–õ–ò–†–û–í–ê–ù–ò–ï STASIS: –ù–∞—á–∏–Ω–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É AI response –¥–ª—è –∫–∞–Ω–∞–ª–∞ {channel_id}")
        
        if channel_id not in self.active_calls:
            return
        
        call_data = self.active_calls[channel_id]
        
        # –ù–∞–∫–∞–ø–ª–∏–≤–∞–µ–º chunks –æ—Ç AI Agent
        first_chunk = True
        chunk_count = 0
        
        for chunk in response_generator:
            if first_chunk:
                first_chunk_time = time.time() - stasis_start
                logger.info(f"‚è±Ô∏è –ü–†–û–§–ò–õ–ò–†–û–í–ê–ù–ò–ï STASIS: –ü–µ—Ä–≤—ã–π —á–∞–Ω–∫ –ø–æ–ª—É—á–µ–Ω —á–µ—Ä–µ–∑ {first_chunk_time:.3f}—Å")
                first_chunk = False
            
            if chunk:
                chunk_count += 1
                call_data["response_buffer"] += chunk
                
                # –ü—Ä–æ–∏–≥—Ä—ã–≤–∞–µ–º –∫–∞–∂–¥–æ–µ –∑–∞–≤–µ—Ä—à—ë–Ω–Ω–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –ø–æ | (–∫–∞–∫ –≤ Voximplant)
                while "|" in call_data["response_buffer"]:
                    idx = call_data["response_buffer"].index("|")
                    sentence = self.clean_text(call_data["response_buffer"][:idx])
                    call_data["response_buffer"] = call_data["response_buffer"][idx + 1:]
                    
                    if sentence:
                        await self.speak_optimized(channel_id, sentence)
                
                # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ç–∞–π–º–µ—Ä –¥–ª—è –æ—Å—Ç–∞—Ç–∫–∞
                if call_data["buffer_timer"]:
                    call_data["buffer_timer"].cancel()
                
                # –°—Ç—Ä–∞—Ö–æ–≤–æ—á–Ω—ã–π —Ç–∞–π–º–µ—Ä –¥–ª—è "—Ö–≤–æ—Å—Ç–∞" –±–µ–∑ | (–∫–∞–∫ –≤ Voximplant)
                if call_data["response_buffer"].strip():
                    call_data["buffer_timer"] = asyncio.create_task(
                        self.flush_response_buffer(channel_id)
                    )
        
        total_stasis_time = time.time() - stasis_start
        logger.info(f"‚è±Ô∏è –ü–†–û–§–ò–õ–ò–†–û–í–ê–ù–ò–ï STASIS: –û–±—Ä–∞–±–æ—Ç–∫–∞ AI response –∑–∞–Ω—è–ª–∞ {total_stasis_time:.3f}—Å, —á–∞–Ω–∫–æ–≤: {chunk_count}")
    
    async def flush_response_buffer(self, channel_id: str):
        """–°—Ç—Ä–∞—Ö–æ–≤–æ—á–Ω—ã–π —Ç–∞–π–º–µ—Ä –¥–ª—è –æ—Å—Ç–∞—Ç–∫–∞ –±–µ–∑ | (–∏–∑ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–π –≤–µ—Ä—Å–∏–∏)."""
        await asyncio.sleep(self.SPEECH_END_TIMEOUT)
        
        if channel_id not in self.active_calls:
            return
        
        call_data = self.active_calls[channel_id]
        
        if call_data["response_buffer"].strip():
            tail = self.clean_text(call_data["response_buffer"])
            call_data["response_buffer"] = ""
            call_data["buffer_timer"] = None
            
            if tail:
                await self.speak_optimized(channel_id, tail)
    
    def clean_text(self, text: str) -> str:
        """–û—á–∏—â–∞–µ—Ç —Ç–µ–∫—Å—Ç –æ—Ç –ª–∏—à–Ω–∏—Ö —Å–∏–º–≤–æ–ª–æ–≤ (–∏–∑ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–π –≤–µ—Ä—Å–∏–∏)."""
        if not text:
            return ""
        
        # –£–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã –∏ –ø–µ—Ä–µ–Ω–æ—Å—ã
        text = text.strip()
        text = " ".join(text.split())
        
        return text

    async def speak_optimized(self, channel_id: str, text: str):
        """–û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ —á–µ—Ä–µ–∑ TTS Adapter"""
        try:
            if not self.tts_adapter:
                # Fallback –Ω–∞ —Å—Ç–∞—Ä—ã–π –º–µ—Ç–æ–¥
                await self.speak_queued(channel_id, text)
                return

            # –°–∏–Ω—Ç–µ–∑–∏—Ä—É–µ–º –∞—É–¥–∏–æ —á–µ—Ä–µ–∑ –∞–¥–∞–ø—Ç–µ—Ä
            audio_data = await self.tts_adapter.synthesize(text)

            if not audio_data:
                logger.warning("‚ö†Ô∏è TTS Adapter –≤–µ—Ä–Ω—É–ª –ø—É—Å—Ç—ã–µ –¥–∞–Ω–Ω—ã–µ")
                await self.speak_queued(channel_id, text)
                return

            # –í–æ—Å–ø—Ä–æ–∏–∑–≤–æ–¥–∏–º –∞—É–¥–∏–æ –¥–∞–Ω–Ω—ã–µ
            await self._play_audio_data(channel_id, audio_data)

        except Exception as e:
            logger.error(f"‚ùå Optimized speak error: {e}")
            # Fallback –Ω–∞ —Å—Ç–∞—Ä—ã–π –º–µ—Ç–æ–¥
            await self.speak_queued(channel_id, text)

    async def _play_audio_data(self, channel_id: str, audio_data: bytes):
        """–í–æ—Å–ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç –∞—É–¥–∏–æ –¥–∞–Ω–Ω—ã–µ —á–µ—Ä–µ–∑ ARI"""
        try:
            if not audio_data:
                logger.warning("‚ö†Ô∏è –ü—É—Å—Ç—ã–µ –∞—É–¥–∏–æ –¥–∞–Ω–Ω—ã–µ")
                return
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∞—É–¥–∏–æ –¥–∞–Ω–Ω—ã–µ –≤–æ –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
            timestamp = datetime.now().strftime('%H%M%S%f')[:-3]  # –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥—ã
            temp_filename = f"stream_{channel_id}_{timestamp}.wav"
            temp_path = f"/var/lib/asterisk/sounds/{temp_filename}"
            
            # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
            os.makedirs(os.path.dirname(temp_path), exist_ok=True)
            
            # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –∞—É–¥–∏–æ –¥–∞–Ω–Ω—ã–µ –≤ —Ñ–∞–π–ª
            with open(temp_path, 'wb') as f:
                f.write(audio_data)
            
            logger.info(f"üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω –∞—É–¥–∏–æ —Ñ–∞–π–ª: {temp_path} ({len(audio_data)} bytes)")
            
            # –í–æ—Å–ø—Ä–æ–∏–∑–≤–æ–¥–∏–º —á–µ—Ä–µ–∑ ARI (–∫–∞–∫ –≤ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–º –∫–æ–¥–µ)
            async with AsteriskARIClient() as ari:
                playback_id = await ari.play_sound(channel_id, temp_filename[:-4], lang=None)  # —É–±–∏—Ä–∞–µ–º .wav
                
                if playback_id:
                    # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –∫–∞–Ω–∞–ª–∞
                    if channel_id in self.active_calls:
                        call_data = self.active_calls[channel_id]
                        call_data["current_playback"] = playback_id
                        call_data["is_speaking"] = True
                        call_data["last_speak_started_at"] = int(time.time() * 1000)
                    
                    logger.info(f"‚úÖ –ê—É–¥–∏–æ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç—Å—è —á–µ—Ä–µ–∑ ARI: {playback_id}")
                else:
                    logger.warning("‚ö†Ô∏è ARI playback –Ω–µ —É–¥–∞–ª—Å—è, –ø—Ä–æ–±—É–µ–º fallback —á–µ—Ä–µ–∑ dialplan")
                    # FALLBACK: –ò—Å–ø–æ–ª—å–∑—É–µ–º dialplan Playback (–∫–∞–∫ –≤ –æ—Ä–∏–≥–∏–Ω–∞–ª–µ)
                    fallback_success = await self.playback_via_dialplan(channel_id, temp_filename[:-4])
                    if fallback_success:
                        logger.info("‚úÖ –ê—É–¥–∏–æ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç—Å—è —á–µ—Ä–µ–∑ dialplan fallback")
                        if channel_id in self.active_calls:
                            call_data = self.active_calls[channel_id]
                            call_data["current_playback"] = f"dialplan_{temp_filename[:-4]}"
                            call_data["is_speaking"] = True
                            call_data["last_speak_started_at"] = int(time.time() * 1000)
                    else:
                        logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ—Å—Ç–∏ –∞—É–¥–∏–æ –Ω–∏ —á–µ—Ä–µ–∑ ARI, –Ω–∏ —á–µ—Ä–µ–∑ dialplan")
            
            # –û—á–∏—â–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª –ø–æ—Å–ª–µ –Ω–µ–±–æ–ª—å—à–æ–π –∑–∞–¥–µ—Ä–∂–∫–∏
            # (–¥–∞–µ–º –≤—Ä–µ–º—è ARI –ø—Ä–æ—á–∏—Ç–∞—Ç—å —Ñ–∞–π–ª)
            asyncio.create_task(self._cleanup_temp_file(temp_path, delay=5.0))
            
        except Exception as e:
            logger.error(f"‚ùå Audio playback error: {e}")
    
    async def _cleanup_temp_file(self, file_path: str, delay: float = 5.0):
        """–û—á–∏—â–∞–µ—Ç –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª –ø–æ—Å–ª–µ –∑–∞–¥–µ—Ä–∂–∫–∏"""
        try:
            await asyncio.sleep(delay)
            if os.path.exists(file_path):
                os.remove(file_path)
                logger.debug(f"üóëÔ∏è –£–¥–∞–ª–µ–Ω –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª: {file_path}")
        except Exception as e:
            logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª {file_path}: {e}")
    
    async def playback_via_dialplan(self, channel_id: str, filename: str) -> bool:
        """FALLBACK: –ü—Ä–æ–∏–≥—Ä—ã–≤–∞–Ω–∏–µ —á–µ—Ä–µ–∑ dialplan –µ—Å–ª–∏ ARI –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç."""
        try:
            async with AsteriskARIClient() as ari:
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞–Ω–∞–ª –≤ dialplan –¥–ª—è –ø—Ä–æ–∏–≥—Ä—ã–≤–∞–Ω–∏—è
                url = f"{ari.base_url}/channels/{channel_id}/continue"
                data = {
                    "context": "playback-context",
                    "extension": "play",
                    "priority": 1,
                    "variables": {
                        "SOUND_FILE": filename
                    }
                }
                
                async with ari.session.post(url, json=data) as response:
                    if response.status in (200, 201, 202):
                        logger.info(f"‚úÖ Dialplan playback –∑–∞–ø—É—â–µ–Ω –¥–ª—è {filename}")
                        return True
                    else:
                        logger.error(f"‚ùå Dialplan playback failed: {response.status}")
                        return False
                        
        except Exception as e:
            logger.error(f"‚ùå Dialplan playback error: {e}")
            return False

    async def stop_tts_on_barge_in_optimized(self, channel_id: str, event_name: str):
        """–û–ü–¢–ò–ú–ò–ó–ò–†–û–í–ê–ù–ù–´–ô barge-in —Å –æ—á–∏—Å—Ç–∫–æ–π –≤—Å–µ—Ö –æ—á–µ—Ä–µ–¥–µ–π"""
        call_data = self.active_calls.get(channel_id)
        if not call_data:
            return
        
        # –ó–∞—â–∏—Ç–∞ –æ—Ç –ª–æ–∂–Ω–æ–≥–æ barge-in
        BARGE_IN_GUARD_MS = 1500
        since_start = int(time.time() * 1000) - call_data.get("last_speak_started_at", 0)
        
        if since_start < BARGE_IN_GUARD_MS:
            logger.debug(f"üîá Ignoring barge-in - too early ({since_start}ms)")
            return
        
        logger.info(f"üö´ [OPTIMIZED BARGE-IN] {event_name} ‚Üí stopping all TTS processing")
        
        # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–µ–∫—É—â–µ–µ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ
        if call_data.get("current_playback"):
            try:
                async with AsteriskARIClient() as ari:
                    await ari.stop_playback(call_data["current_playback"])
            except:
                pass
        
        # –ö–†–ò–¢–ò–ß–ù–û: –û—á–∏—â–∞–µ–º –≤—Å–µ –æ—á–µ—Ä–µ–¥–∏ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ–≥–æ TTS
        if self.parallel_tts:
            await self.parallel_tts.clear_all_queues(channel_id)
        
        # –û—Ç–º–µ—á–∞–µ–º –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏–µ
        call_data["user_interrupted"] = True
        call_data["barge_in_time"] = time.time()
        
        logger.info("‚úÖ Optimized barge-in processed - ready for new input")

    async def _fallback_to_old_system(self, channel_id: str, user_text: str):
        """Fallback –Ω–∞ —Å—Ç–∞—Ä—É—é —Å–∏—Å—Ç–µ–º—É –ø—Ä–∏ –æ—à–∏–±–∫–∞—Ö –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏"""
        try:
            logger.warning("üîÑ Falling back to old system")
            
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞—Ä—ã–π –º–µ—Ç–æ–¥ –æ–±—Ä–∞–±–æ—Ç–∫–∏
            if self.agent:
                response_generator = self.agent.get_response_generator(user_text, self.active_calls[channel_id]["session_id"])
                await self.process_ai_response_streaming_old(channel_id, response_generator)
            else:
                await self.speak_queued(channel_id, "–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –≤ —Å–∏—Å—Ç–µ–º–µ")
                
        except Exception as e:
            logger.error(f"‚ùå Fallback system error: {e}")

    async def process_ai_response_streaming_old(self, channel_id: str, response_generator):
        """–°—Ç–∞—Ä—ã–π –º–µ—Ç–æ–¥ –ø–æ—Ç–æ–∫–æ–≤–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏ (fallback)"""
        # –ö–æ–ø–∏—Ä—É–µ–º –ª–æ–≥–∏–∫—É –∏–∑ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–≥–æ StasisHandler
        # ... (–∫–æ–¥ –∏–∑ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–≥–æ –º–µ—Ç–æ–¥–∞)
        pass

    async def speak_queued(self, channel_id: str, text: str):
        """–°—Ç–∞—Ä—ã–π –º–µ—Ç–æ–¥ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è (fallback)"""
        # –ö–æ–ø–∏—Ä—É–µ–º –ª–æ–≥–∏–∫—É –∏–∑ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–≥–æ StasisHandler
        # ... (–∫–æ–¥ –∏–∑ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–≥–æ –º–µ—Ç–æ–¥–∞)
        pass

    def _log_performance_metrics(self, channel_id: str, total_time: float):
        """–õ–æ–≥–∏—Ä—É–µ—Ç –º–µ—Ç—Ä–∏–∫–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏"""
        call_data = self.active_calls.get(channel_id, {})
        
        metrics = {
            "total_time": total_time,
            "asr_complete_time": call_data.get("asr_complete_time"),
            "first_chunk_time": call_data.get("first_chunk_time"),
            "first_audio_time": call_data.get("first_audio_time"),
            "filler_time": call_data.get("filler_time")
        }
        
        self.performance_metrics[channel_id] = metrics
        
        logger.info(f"üìä Performance metrics for {channel_id}: {metrics}")

    # –û—Å—Ç–∞–ª—å–Ω—ã–µ –º–µ—Ç–æ–¥—ã –∏–∑ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–≥–æ StasisHandler...
    # (handle_channel_destroyed, clean_text, –∏ —Ç.–¥.)
    
    async def handle_channel_destroyed(self, event):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –∑–≤–æ–Ω–∫–∞"""
        channel_id = event.get('channel', {}).get('id')
        
        if channel_id in self.active_calls:
            call_data = self.active_calls[channel_id]
            call_data["status"] = "Completed"
            end_time = datetime.now(timezone.utc)
            
            logger.info(f"üìû –ó–≤–æ–Ω–æ–∫ –∑–∞–≤–µ—Ä—à–µ–Ω: {channel_id}")
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ª–æ–≥ –∑–≤–æ–Ω–∫–∞
            try:
                log_record = {
                    "id": call_data["session_id"],
                    "callerId": call_data["caller_id"],
                    "startTime": call_data["start_time"],
                    "endTime": end_time.isoformat(),
                    "status": call_data["status"],
                    "transcript": call_data["transcript"],
                    "performance_metrics": self.performance_metrics.get(channel_id, {})
                }
                await insert_log(log_record)
                logger.info(f"üíæ –õ–æ–≥ —Å–æ—Ö—Ä–∞–Ω–µ–Ω –¥–ª—è –∑–≤–æ–Ω–∫–∞ {call_data['session_id']}")
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ª–æ–≥–∞: {e}")
            
            # –£–¥–∞–ª—è–µ–º –∏–∑ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–≤–æ–Ω–∫–æ–≤
            del self.active_calls[channel_id]
            if channel_id in self.performance_metrics:
                del self.performance_metrics[channel_id]

    def clean_text(self, text: str) -> str:
        """–û—á–∏—Å—Ç–∫–∞ —Ç–µ–∫—Å—Ç–∞ –æ—Ç —Å–ª—É–∂–µ–±–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤"""
        import re
        text = str(text).replace("|", " ").replace("*", " ")
        text = re.sub(r'\s+', ' ', text).strip()
        return text
    
    async def run(self):
        """–û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –æ–±—Ä–∞–±–æ—Ç–∫–∏ WebSocket —Å–æ–±—ã—Ç–∏–π –æ—Ç Asterisk"""
        try:
            async with websockets.connect(self.ws_url) as websocket:
                logger.info("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω –∫ Asterisk ARI WebSocket")
                
                async for message in websocket:
                    try:
                        event = json.loads(message)
                        await self.handle_event(event)
                    except json.JSONDecodeError as e:
                        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON: {e}")
                    except Exception as e:
                        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–±—ã—Ç–∏—è: {e}", exc_info=True)
                        
        except websockets.exceptions.ConnectionClosed:
            logger.warning("üîå WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∑–∞–∫—Ä—ã—Ç–æ")
        except Exception as e:
            logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ WebSocket: {e}", exc_info=True)
    
    async def handle_event(self, event):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å–æ–±—ã—Ç–∏—è –æ—Ç Asterisk ARI"""
        event_type = event.get('type')
        
        if event_type == 'StasisStart':
            await self.handle_stasis_start(event)
        elif event_type == 'ChannelDestroyed':
            await self.handle_channel_destroyed(event)
        elif event_type == 'PlaybackStarted':
            await self.handle_playback_started(event)
        elif event_type == 'PlaybackFinished':
            await self.handle_playback_finished(event)
        elif event_type == 'RecordingFinished':
            await self.handle_recording_finished(event)
        elif event_type == 'UserEvent':
            await self.handle_user_event(event)
        # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –¥—Ä—É–≥–∏—Ö —Å–æ–±—ã—Ç–∏–π –ø–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
    
    async def handle_playback_started(self, event):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞—á–∞–ª–æ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è"""
        playback = event.get('playback', {})
        playback_id = playback.get('id')
        target_uri = playback.get('target_uri', '')
        
        if target_uri.startswith('channel:'):
            channel_id = target_uri.replace('channel:', '')
            if channel_id in self.active_calls:
                call_data = self.active_calls[channel_id]
                call_data["current_playback"] = playback_id
                call_data["is_speaking"] = True
                call_data["last_speak_started_at"] = int(time.time() * 1000)
                logger.info(f"üîä –ù–∞—á–∞–ª–æ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è –¥–ª—è {channel_id}: {playback_id}")
    
    async def handle_playback_finished(self, event):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è - –∑–∞–ø—É—Å–∫–∞–µ—Ç –∑–∞–ø–∏—Å—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        playback = event.get('playback', {})
        playback_id = playback.get('id')
        target_uri = playback.get('target_uri', '')
        
        if target_uri.startswith('channel:'):
            channel_id = target_uri.replace('channel:', '')
            if channel_id in self.active_calls:
                call_data = self.active_calls[channel_id]
                call_data["is_speaking"] = False
                call_data["current_playback"] = None
                logger.info(f"üîá –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è –¥–ª—è {channel_id}: {playback_id}")
                
                # –ü–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è –∑–∞–ø—É—Å–∫–∞–µ–º –∑–∞–ø–∏—Å—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                await self.start_user_recording(channel_id)
    
    async def start_user_recording(self, channel_id: str):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –∑–∞–ø–∏—Å—å —Ä–µ—á–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∑–∞–ø–∏—Å—å –Ω–µ –∑–∞–ø—É—â–µ–Ω–∞ —É–∂–µ
            if channel_id in self.active_calls and self.active_calls[channel_id].get("is_recording"):
                logger.warning(f"‚ö†Ô∏è –ó–∞–ø–∏—Å—å —É–∂–µ –∑–∞–ø—É—â–µ–Ω–∞ –¥–ª—è –∫–∞–Ω–∞–ª–∞ {channel_id}")
                return
            
            # –°–æ–∑–¥–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω–æ–µ –∏–º—è —Ñ–∞–π–ª–∞ —Å UUID
            import uuid
            timestamp = datetime.now().strftime('%Y%m%d_%H%M%S_%f')
            unique_id = str(uuid.uuid4())[:8]
            recording_filename = f"user_{channel_id}_{timestamp}_{unique_id}"
            
            logger.info(f"üé§ –ó–∞–ø—É—Å–∫–∞–µ–º –∑–∞–ø–∏—Å—å —Ä–µ—á–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {recording_filename}")
            
            async with AsteriskARIClient() as ari:
                recording_id = await ari.start_recording(channel_id, recording_filename, max_duration=15)
                
                # Status 201 –æ–∑–Ω–∞—á–∞–µ—Ç —É—Å–ø–µ—à–Ω—ã–π –∑–∞–ø—É—Å–∫ –∑–∞–ø–∏—Å–∏
                if recording_id and channel_id in self.active_calls:
                    self.active_calls[channel_id]["current_recording"] = recording_id
                    self.active_calls[channel_id]["recording_filename"] = recording_filename
                    self.active_calls[channel_id]["is_recording"] = True
                    logger.info(f"‚úÖ –ó–∞–ø–∏—Å—å –∑–∞–ø—É—â–µ–Ω–∞: {recording_id}")
                else:
                    logger.warning(f"‚ö†Ô∏è –ó–∞–ø–∏—Å—å –∑–∞–ø—É—â–µ–Ω–∞, –Ω–æ –Ω–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –≤ active_calls")
                    
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –∑–∞–ø–∏—Å–∏: {e}", exc_info=True)
    
    async def handle_recording_finished(self, event):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –∑–∞–ø–∏—Å–∏ - –∑–∞–ø—É—Å–∫–∞–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∫—É —Ä–µ—á–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
        recording = event.get('recording', {})
        recording_name = recording.get('name')
        
        logger.info(f"üé§ –ó–∞–ø–∏—Å—å –∑–∞–≤–µ—Ä—à–µ–Ω–∞: {recording_name}")
        
        # –≠–¢–ê–ü 1.3: –£–ª—É—á—à–µ–Ω–Ω—ã–π –ø–æ–∏—Å–∫ –∫–∞–Ω–∞–ª–∞ –ø–æ –∏–º–µ–Ω–∏ –∑–∞–ø–∏—Å–∏
        channel_id = None
        
        # –°–Ω–∞—á–∞–ª–∞ –∏—â–µ–º —Ç–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ
        for cid, call_data in self.active_calls.items():
            if call_data.get("recording_filename") == recording_name:
                channel_id = cid
                logger.info(f"‚úÖ –ù–∞–π–¥–µ–Ω –∫–∞–Ω–∞–ª {channel_id} –¥–ª—è –∑–∞–ø–∏—Å–∏ {recording_name}")
                break
        
        # –ï—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ —Ç–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ, –∏—â–µ–º –ø–æ —á–∞—Å—Ç–∏—á–Ω–æ–º—É —Å–æ–≤–ø–∞–¥–µ–Ω–∏—é
        if not channel_id:
            for cid, call_data in self.active_calls.items():
                stored_filename = call_data.get("recording_filename", "")
                if recording_name in stored_filename or stored_filename in recording_name:
                    channel_id = cid
                    logger.info(f"‚úÖ –ù–∞–π–¥–µ–Ω –∫–∞–Ω–∞–ª {channel_id} –ø–æ —á–∞—Å—Ç–∏—á–Ω–æ–º—É —Å–æ–≤–ø–∞–¥–µ–Ω–∏—é: {recording_name} <-> {stored_filename}")
                    break
        
        # –ï—Å–ª–∏ –≤—Å–µ –µ—â–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ, –ª–æ–≥–∏—Ä—É–µ–º –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–ø–∏—Å–∏ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
        if not channel_id:
            logger.warning(f"‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω –∫–∞–Ω–∞–ª –¥–ª—è –∑–∞–ø–∏—Å–∏: {recording_name}")
            logger.info("üîç –ê–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–ø–∏—Å–∏:")
            for cid, call_data in self.active_calls.items():
                stored_filename = call_data.get("recording_filename", "–ù–ï–¢")
                is_recording = call_data.get("is_recording", False)
                logger.info(f"  –ö–∞–Ω–∞–ª {cid}: {stored_filename} (–∑–∞–ø–∏—Å—å: {is_recording})")
            return
                
        if channel_id:
            # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥ –∑–∞–ø–∏—Å–∏
            if channel_id in self.active_calls:
                self.active_calls[channel_id]["is_recording"] = False
                self.active_calls[channel_id]["current_recording"] = None
                logger.info(f"‚úÖ –°–±—Ä–æ—à–µ–Ω —Ñ–ª–∞–≥ –∑–∞–ø–∏—Å–∏ –¥–ª—è –∫–∞–Ω–∞–ª–∞ {channel_id}")
            
            # –ü—É—Ç—å –∫ –∑–∞–ø–∏—Å–∞–Ω–Ω–æ–º—É —Ñ–∞–π–ª—É (Asterisk —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –≤ /var/spool/asterisk/recording/)
            recording_path = f"/var/spool/asterisk/recording/{recording_name}.wav"
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞ –ø–µ—Ä–µ–¥ –æ–±—Ä–∞–±–æ—Ç–∫–æ–π
            if os.path.exists(recording_path):
                logger.info(f"‚úÖ –§–∞–π–ª –∑–∞–ø–∏—Å–∏ –Ω–∞–π–¥–µ–Ω: {recording_path}")
                # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ä–µ—á—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                await self.process_user_speech_optimized(channel_id, recording_path)
            else:
                logger.warning(f"‚ö†Ô∏è –§–∞–π–ª –∑–∞–ø–∏—Å–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω: {recording_path}")
        else:
            logger.warning(f"–ù–µ –Ω–∞–π–¥–µ–Ω –∫–∞–Ω–∞–ª –¥–ª—è –∑–∞–ø–∏—Å–∏: {recording_name}")
    
    async def handle_user_event(self, event):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ —Å–æ–±—ã—Ç–∏—è"""
        event_name = event.get('eventname')
        channel_id = event.get('channel', {}).get('id')
        
        if event_name == 'UserSpeech' and channel_id:
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ä–µ—á—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            audio_path = event.get('args', [{}])[0].get('audio_path')
            if audio_path:
                await self.process_user_speech_optimized(channel_id, audio_path)

async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞."""
    # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
    logging.basicConfig(
        level=logging.INFO,
        format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
    )
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
    from dotenv import load_dotenv
    load_dotenv()
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
    handler = OptimizedAsteriskAIHandler()
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–µ—Ä–≤–∏—Å—ã –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
    await handler.initialize_optimization_services()
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª
    await handler.run()

if __name__ == "__main__":
    asyncio.run(main())
