import asyncio
import json
import logging
import websockets
import uuid
import os
import sys
import time
from datetime import datetime, timezone
from pathlib import Path
from typing import Dict, List, Optional

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞ –º–æ–¥—É–ª–µ–π –ø—Ä–æ–µ–∫—Ç–∞
current_dir = Path(__file__).parent
project_root = current_dir.parent.parent.parent
sys.path.insert(0, str(project_root))

from app.backend.asterisk.ari_client import AsteriskARIClient
from app.backend.rag.agent import Agent
from app.backend.services.yandex_tts_service import get_yandex_tts_service
from app.backend.services.asr_service import get_asr_service
from app.backend.utils.text_normalizer import normalize as normalize_text
from app.backend.services.log_storage import insert_log

logger = logging.getLogger(__name__)

class AsteriskAIHandler:
    def __init__(self):
        self.ws_url = "ws://localhost:8088/ari/events?app=asterisk-bot&api_key=asterisk:asterisk123"
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º AI Agent
        try:
            self.agent = Agent()
            logger.info("‚úÖ AI Agent —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ AI Agent: {e}")
            self.agent = None
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º Yandex TTS –∏ ASR —Å–µ—Ä–≤–∏—Å—ã
        try:
            logger.info("üîä –ò—Å–ø–æ–ª—å–∑—É–µ–º Yandex TTS (–æ—Å–Ω–æ–≤–Ω–æ–π –∏ –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω—ã–π)")
            self.tts = get_yandex_tts_service()
            self.asr = get_asr_service()
            logger.info("‚úÖ Yandex TTS –∏ ASR —Å–µ—Ä–≤–∏—Å—ã –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã")
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ TTS/ASR: {e}")
            self.tts = None
            self.asr = None
        
        # –ê–∫—Ç–∏–≤–Ω—ã–µ –∑–≤–æ–Ω–∫–∏ —Å –ø–æ—Ç–æ–∫–æ–≤–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–æ–π (–∫–∞–∫ –≤ Voximplant)
        self.active_calls = {}
        
        # –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –∏–∑ Voximplant –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
        self.SPEECH_END_TIMEOUT = 0.2    # —Å—Ç—Ä–∞—Ö–æ–≤–∫–∞ –¥–ª—è –æ—Å—Ç–∞—Ç–∫–∞ –±–µ–∑ | (—Å–µ–∫—É–Ω–¥—ã)
        self.BARGE_IN_GUARD_MS = 400     # –∑–∞—â–∏—Ç–∞ –æ—Ç –ª–æ–∂–Ω–æ–≥–æ barge-in (–º—Å)
        self.INPUT_DEBOUNCE_MS = 1200    # —Ç–∏—à–∏–Ω–∞ = –∫–æ–Ω–µ—Ü —Ä–µ–ø–ª–∏–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–º—Å)
        
    async def handle_stasis_start(self, event):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞—á–∞–ª–æ –∑–≤–æ–Ω–∫–∞."""
        channel_id = event.get('channel', {}).get('id')
        caller_id = event.get('channel', {}).get('caller', {}).get('number', 'Unknown')
        
        logger.info(f"üîî –ù–æ–≤—ã–π –∑–≤–æ–Ω–æ–∫: Channel={channel_id}, Caller={caller_id}")
        
                # –°–æ–∑–¥–∞–µ–º —Å–µ—Å—Å–∏—é –∑–≤–æ–Ω–∫–∞ —Å –ø–æ—Ç–æ–∫–æ–≤—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏ (–∫–∞–∫ –≤ Voximplant)
        session_id = str(uuid.uuid4())
        start_time = datetime.now(timezone.utc)

        self.active_calls[channel_id] = {
            "session_id": session_id,
            "caller_id": caller_id,
            "start_time": start_time.isoformat(),
            "transcript": [],
            "status": "Started",
            # –ü–æ—Ç–æ–∫–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ (–∫–∞–∫ –≤ Voximplant)
            "response_buffer": "",           # –±—É—Ñ–µ—Ä –æ—Ç AI Agent
            "buffer_timer": None,           # —Ç–∞–π–º–µ—Ä –¥–ª—è –æ—Å—Ç–∞—Ç–∫–∞ –±–µ–∑ |
            "tts_queue": [],                # –æ—á–µ—Ä–µ–¥—å TTS —Ñ—Ä–∞–∑
            "tts_busy": False,              # —Ñ–ª–∞–≥ –∑–∞–Ω—è—Ç–æ—Å—Ç–∏ TTS
            "current_playback": None,       # —Ç–µ–∫—É—â–∏–π playback_id
            "last_speak_started_at": 0,     # –≤—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ TTS
            "is_speaking": False,           # —Ñ–ª–∞–≥ –ø—Ä–æ–∏–≥—Ä—ã–≤–∞–Ω–∏—è
            "preload_cache": {}             # –∫–µ—à –ø—Ä–µ–¥–∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö TTS —Ñ—Ä–∞–∑
        }
        
        # –ö–∞–Ω–∞–ª —É–∂–µ –ø—Ä–∏–Ω—è—Ç –≤ dialplan, —Å—Ä–∞–∑—É —Ä–∞–±–æ—Ç–∞–µ–º —Å –Ω–∏–º
        async with AsteriskARIClient() as ari:
            logger.info(f"‚úÖ –ó–≤–æ–Ω–æ–∫ —É–∂–µ –ø—Ä–∏–Ω—è—Ç –≤ dialplan: {channel_id}")
            
            # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –æ—Ç AI Agent
            if self.agent:
                greeting = self.agent.prompts.get("greeting", "–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! –ß–µ–º –º–æ–≥—É –ø–æ–º–æ—á—å?")
            else:
                greeting = "–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! –°–∏—Å—Ç–µ–º–∞ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞."

            # –î–æ–±–∞–≤–ª—è–µ–º –≤ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ç
            self.active_calls[channel_id]["transcript"].append({
                "speaker": "bot",
                "text": greeting,
                "timestamp": datetime.now(timezone.utc).isoformat()
            })

            # –ü–æ—Ç–æ–∫–æ–≤–æ–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ (—Ä–∞–∑–±–∏–≤–∞–µ–º –ø–æ | –µ—Å–ª–∏ –µ—Å—Ç—å)
            if "|" in greeting:
                # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∫ –ø–æ—Ç–æ–∫–æ–≤—ã–π –æ—Ç–≤–µ—Ç
                greeting_parts = greeting.split("|")
                for part in greeting_parts:
                    if part.strip():
                        await self.speak_queued(channel_id, part.strip())
            else:
                # –û–±—ã—á–Ω–æ–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ
                await self.speak_queued(channel_id, greeting)
            
            logger.info(f"üé§ –ì–æ—Ç–æ–≤ –∫ –ø—Ä–∏–µ–º—É —Ä–µ—á–∏ –æ—Ç {caller_id}")

    

    async def handle_channel_destroyed(self, event):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –∑–≤–æ–Ω–∫–∞."""
        channel_id = event.get('channel', {}).get('id')
        
        if channel_id in self.active_calls:
            call_data = self.active_calls[channel_id]
            call_data["status"] = "Completed"
            end_time = datetime.now(timezone.utc)
            
            logger.info(f"üìû –ó–≤–æ–Ω–æ–∫ –∑–∞–≤–µ—Ä—à–µ–Ω: {channel_id}")
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ª–æ–≥ –∑–≤–æ–Ω–∫–∞
            try:
                log_record = {
                    "id": call_data["session_id"],
                    "callerId": call_data["caller_id"],
                    "startTime": call_data["start_time"],
                    "endTime": end_time.isoformat(),
                    "status": call_data["status"],
                    "transcript": call_data["transcript"]
                }
                await insert_log(log_record)
                logger.info(f"üíæ –õ–æ–≥ —Å–æ—Ö—Ä–∞–Ω–µ–Ω –¥–ª—è –∑–≤–æ–Ω–∫–∞ {call_data['session_id']}")
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ª–æ–≥–∞: {e}")
            
            # –£–¥–∞–ª—è–µ–º –∏–∑ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–≤–æ–Ω–∫–æ–≤
            del self.active_calls[channel_id]

    def clean_text(self, text: str) -> str:
        """–û—á–∏—Å—Ç–∫–∞ —Ç–µ–∫—Å—Ç–∞ –æ—Ç —Å–ª—É–∂–µ–±–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤ (–∫–∞–∫ –≤ Voximplant)."""
        import re
        text = str(text).replace("|", " ").replace("*", " ")
        text = re.sub(r'\s+', ' ', text)  # –ó–∞–º–µ–Ω—è–µ–º –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –ø—Ä–æ–±–µ–ª—ã –Ω–∞ –æ–¥–∏–Ω
        return text.strip()
    
    async def speak_queued(self, channel_id: str, text: str):
        """–î–æ–±–∞–≤–ª—è–µ—Ç —Ñ—Ä–∞–∑—É –≤ –æ—á–µ—Ä–µ–¥—å TTS (–∞–Ω–∞–ª–æ–≥ Voximplant speakQueued)."""
        if not text or channel_id not in self.active_calls:
            return
        
        call_data = self.active_calls[channel_id]
        call_data["tts_queue"].append(text)
        
        if not call_data["tts_busy"]:
            await self.process_tts_queue(channel_id)
    
    async def process_tts_queue(self, channel_id: str):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ—á–µ—Ä–µ–¥—å TTS —Å –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ–π –ø—Ä–µ–¥–∑–∞–≥—Ä—É–∑–∫–æ–π (–∞–Ω–∞–ª–æ–≥ Voximplant processTTSQueue)."""
        if channel_id not in self.active_calls:
            return
        
        call_data = self.active_calls[channel_id]
        
        if call_data["tts_busy"]:
            return
        
        if not call_data["tts_queue"]:
            return
        
        next_text = call_data["tts_queue"].pop(0)
        call_data["tts_busy"] = True
        
        # üöÄ –ü–ê–†–ê–õ–õ–ï–õ–¨–ù–ê–Ø –û–ü–¢–ò–ú–ò–ó–ê–¶–ò–Ø: –ü–æ–∫–∞ –≥–æ–≤–æ—Ä–∏–º —Ç–µ–∫—É—â—É—é —Ñ—Ä–∞–∑—É, –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–ª–µ–¥—É—é—â—É—é
        asyncio.create_task(self.preload_next_tts(channel_id))
        
        await self.speak_one(channel_id, next_text)
    
    async def preload_next_tts(self, channel_id: str):
        """–ü—Ä–µ–¥–∑–∞–≥—Ä—É–∂–∞–µ—Ç —Å–ª–µ–¥—É—é—â—É—é —Ñ—Ä–∞–∑—É TTS –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ —Å —Ç–µ–∫—É—â–∏–º –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ–º."""
        if channel_id not in self.active_calls:
            return
        
        call_data = self.active_calls[channel_id]
        
        # –ï—Å–ª–∏ –≤ –æ—á–µ—Ä–µ–¥–∏ –µ—Å—Ç—å —Å–ª–µ–¥—É—é—â–∞—è —Ñ—Ä–∞–∑–∞ - –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º –µ—ë –∑–∞—Ä–∞–Ω–µ–µ
        if call_data["tts_queue"]:
            next_text = call_data["tts_queue"][0]  # –ë–µ—Ä–µ–º –±–µ–∑ —É–¥–∞–ª–µ–Ω–∏—è
            
            try:
                # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω–æ–µ –∏–º—è –¥–ª—è –ø—Ä–µ–¥–∑–∞–≥—Ä—É–∑–∫–∏
                timestamp = datetime.now().strftime('%H%M%S%f')[:-3]
                preload_filename = f"preload_{channel_id}_{timestamp}"
                
                # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º TTS –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ
                if self.tts:
                    preload_result = await self.tts.text_to_speech(next_text, preload_filename)
                    if preload_result:
                        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–µ–¥–∑–∞–≥—Ä—É–∑–∫–∏
                        if "preload_cache" not in call_data:
                            call_data["preload_cache"] = {}
                        call_data["preload_cache"][next_text] = preload_result
                        logger.info(f"üöÄ –ü—Ä–µ–¥–∑–∞–≥—Ä—É–∂–µ–Ω–∞ —Å–ª–µ–¥—É—é—â–∞—è —Ñ—Ä–∞–∑–∞: '{next_text[:30]}...'")
            except Exception as e:
                logger.debug(f"–ü—Ä–µ–¥–∑–∞–≥—Ä—É–∑–∫–∞ –Ω–µ —É–¥–∞–ª–∞—Å—å (–Ω–µ –∫—Ä–∏—Ç–∏—á–Ω–æ): {e}")
    
    async def speak_one(self, channel_id: str, text: str):
        """–ü—Ä–æ–∏–≥—Ä—ã–≤–∞–µ—Ç –æ–¥–Ω—É —Ñ—Ä–∞–∑—É TTS (–∞–Ω–∞–ª–æ–≥ Voximplant speakOne)."""
        if channel_id not in self.active_calls:
            return
        
        call_data = self.active_calls[channel_id]
        
        logger.info(f"‚ñ∂Ô∏è TTS: \"{text}\" –¥–ª—è –∫–∞–Ω–∞–ª–∞ {channel_id}")
        
        # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–π playback –µ—Å–ª–∏ –µ—Å—Ç—å
        if call_data["current_playback"]:
            async with AsteriskARIClient() as ari:
                # –ü—ã—Ç–∞–µ–º—Å—è –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å (–º–æ–∂–µ—Ç —É–∂–µ –∑–∞–≤–µ—Ä—à–∏—Ç—å—Å—è)
                pass
        
        call_data["is_speaking"] = True
        call_data["last_speak_started_at"] = int(time.time() * 1000)  # –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥—ã
        
        try:
            if not self.tts:
                logger.warning("TTS —Å–µ—Ä–≤–∏—Å –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
                await self.finish_speak_one(channel_id)
                return
            
            # üöÄ –ü–†–û–í–ï–†–Ø–ï–ú –ü–†–ï–î–ó–ê–ì–†–£–ñ–ï–ù–ù–´–ô –ö–ï–®–ò–†–û–í–ê–ù–ò–ï
            sound_filename = None
            if "preload_cache" in call_data and text in call_data["preload_cache"]:
                sound_filename = call_data["preload_cache"].pop(text)
                logger.info(f"‚ö° –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–µ–¥–∑–∞–≥—Ä—É–∂–µ–Ω–Ω—É—é —Ñ—Ä–∞–∑—É: '{text[:30]}...'")
            
            # –ï—Å–ª–∏ –Ω–µ –ø—Ä–µ–¥–∑–∞–≥—Ä—É–∂–µ–Ω–æ - –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–µ–π—á–∞—Å
            if not sound_filename:
                timestamp = datetime.now().strftime('%H%M%S%f')[:-3]  # –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥—ã
                audio_filename = f"stream_{channel_id}_{timestamp}"
                sound_filename = await self.tts.text_to_speech(text, audio_filename)
            
            # –ü—Ä–æ–∏–≥—Ä—ã–≤–∞–Ω–∏–µ —á–µ—Ä–µ–∑ Asterisk
            async with AsteriskARIClient() as ari:
                playback_id = await ari.play_sound(channel_id, sound_filename, lang=None)
                
                if playback_id:
                    call_data["current_playback"] = playback_id
                    logger.info(f"‚úÖ TTS –∑–∞–ø—É—â–µ–Ω: {playback_id}")
                else:
                    logger.warning("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å TTS")
                    await self.finish_speak_one(channel_id)
        
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ TTS: {e}")
            await self.finish_speak_one(channel_id)
    
    async def finish_speak_one(self, channel_id: str):
        """–ó–∞–≤–µ—Ä—à–∞–µ—Ç –ø—Ä–æ–∏–≥—Ä—ã–≤–∞–Ω–∏–µ –æ–¥–Ω–æ–π —Ñ—Ä–∞–∑—ã –∏ –∑–∞–ø—É—Å–∫–∞–µ—Ç —Å–ª–µ–¥—É—é—â—É—é."""
        if channel_id not in self.active_calls:
            return
        
        call_data = self.active_calls[channel_id]
        call_data["tts_busy"] = False
        call_data["current_playback"] = None
        call_data["is_speaking"] = False
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º —Å–ª–µ–¥—É—é—â—É—é —Ñ—Ä–∞–∑—É –≤ –æ—á–µ—Ä–µ–¥–∏
        await self.process_tts_queue(channel_id)
    
    async def stop_tts_on_barge_in(self, channel_id: str, event_name: str):
        """–û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç TTS –ø—Ä–∏ –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º (–∞–Ω–∞–ª–æ–≥ Voximplant stopPlayerOnBargeIn)."""
        if channel_id not in self.active_calls:
            return
        
        call_data = self.active_calls[channel_id]
        
        # –ó–∞—â–∏—Ç–∞ –æ—Ç –ª–æ–∂–Ω–æ–≥–æ barge-in (–∫–∞–∫ –≤ Voximplant)
        since_start = int(time.time() * 1000) - call_data["last_speak_started_at"]
        if call_data["current_playback"] and since_start < self.BARGE_IN_GUARD_MS:
            logger.debug(f"–ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º barge-in - —Å–ª–∏—à–∫–æ–º —Ä–∞–Ω–æ ({since_start}ms)")
            return
        
        logger.info(f"[BARGE-IN] '{event_name}' ‚Üí –æ—Å—Ç–∞–Ω–æ–≤–∫–∞ TTS (sinceStart={since_start}ms)")
        
        # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–µ–∫—É—â–∏–π playback
        if call_data["current_playback"]:
            # Asterisk –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç –ø—Ä–∏ –Ω–æ–≤–æ–π –∑–∞–ø–∏—Å–∏
            call_data["current_playback"] = None
        
        call_data["is_speaking"] = False
        
        # –û–ß–ò–©–ê–ï–ú –í–°–Æ –û–ß–ï–†–ï–î–¨ (–∫–ª—é—á–µ–≤–æ–π –º–æ–º–µ–Ω—Ç –∏–∑ Voximplant!)
        if call_data["tts_queue"]:
            call_data["tts_queue"] = []
            call_data["tts_busy"] = False
            logger.info("üßπ –û—á–µ—Ä–µ–¥—å TTS –æ—á–∏—â–µ–Ω–∞ –ø—Ä–∏ barge-in")
    
    async def process_ai_response_streaming(self, channel_id: str, response_generator):
        """–ü–æ—Ç–æ–∫–æ–≤–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–∞ AI —Å —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—è–º–∏ | (–∞–Ω–∞–ª–æ–≥ Voximplant MESSAGE handler)."""
        import time
        stasis_start = time.time()
        logger.info(f"‚è±Ô∏è –ü–†–û–§–ò–õ–ò–†–û–í–ê–ù–ò–ï STASIS: –ù–∞—á–∏–Ω–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É AI response –¥–ª—è –∫–∞–Ω–∞–ª–∞ {channel_id}")
        
        if channel_id not in self.active_calls:
            return
        
        call_data = self.active_calls[channel_id]
        
        # –ù–∞–∫–∞–ø–ª–∏–≤–∞–µ–º chunks –æ—Ç AI Agent
        first_chunk = True
        chunk_count = 0
        
        for chunk in response_generator:
            if first_chunk:
                first_chunk_time = time.time() - stasis_start
                logger.info(f"‚è±Ô∏è –ü–†–û–§–ò–õ–ò–†–û–í–ê–ù–ò–ï STASIS: –ü–µ—Ä–≤—ã–π —á–∞–Ω–∫ –ø–æ–ª—É—á–µ–Ω —á–µ—Ä–µ–∑ {first_chunk_time:.3f}—Å")
                first_chunk = False
            
            if chunk:
                chunk_count += 1
                call_data["response_buffer"] += chunk
                
                # –ü—Ä–æ–∏–≥—Ä—ã–≤–∞–µ–º –∫–∞–∂–¥–æ–µ –∑–∞–≤–µ—Ä—à—ë–Ω–Ω–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –ø–æ | (–∫–∞–∫ –≤ Voximplant)
                while "|" in call_data["response_buffer"]:
                    idx = call_data["response_buffer"].index("|")
                    sentence = self.clean_text(call_data["response_buffer"][:idx])
                    call_data["response_buffer"] = call_data["response_buffer"][idx + 1:]
                    
                    if sentence:
                        await self.speak_queued(channel_id, sentence)
                
                # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ç–∞–π–º–µ—Ä –¥–ª—è –æ—Å—Ç–∞—Ç–∫–∞
                if call_data["buffer_timer"]:
                    call_data["buffer_timer"].cancel()
                
                # –°—Ç—Ä–∞—Ö–æ–≤–æ—á–Ω—ã–π —Ç–∞–π–º–µ—Ä –¥–ª—è "—Ö–≤–æ—Å—Ç–∞" –±–µ–∑ | (–∫–∞–∫ –≤ Voximplant)
                if call_data["response_buffer"].strip():
                    call_data["buffer_timer"] = asyncio.create_task(
                        self.flush_response_buffer(channel_id)
                    )
        
        total_stasis_time = time.time() - stasis_start
        logger.info(f"‚è±Ô∏è –ü–†–û–§–ò–õ–ò–†–û–í–ê–ù–ò–ï STASIS: –û–±—Ä–∞–±–æ—Ç–∫–∞ AI response –∑–∞–Ω—è–ª–∞ {total_stasis_time:.3f}—Å, —á–∞–Ω–∫–æ–≤: {chunk_count}")
    
    async def flush_response_buffer(self, channel_id: str):
        """–°—Ç—Ä–∞—Ö–æ–≤–æ—á–Ω—ã–π —Ç–∞–π–º–µ—Ä –¥–ª—è –æ—Å—Ç–∞—Ç–∫–∞ –±–µ–∑ | (–∞–Ω–∞–ª–æ–≥ Voximplant SPEECH_END_TIMEOUT)."""
        await asyncio.sleep(self.SPEECH_END_TIMEOUT)
        
        if channel_id not in self.active_calls:
            return
        
        call_data = self.active_calls[channel_id]
        
        if call_data["response_buffer"].strip():
            tail = self.clean_text(call_data["response_buffer"])
            call_data["response_buffer"] = ""
            call_data["buffer_timer"] = None
            
            if tail:
                await self.speak_queued(channel_id, tail)

    async def process_user_speech(self, channel_id: str, audio_path: str):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ä–µ—á—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —á–µ—Ä–µ–∑ ASR ‚Üí AI ‚Üí TTS."""
        if channel_id not in self.active_calls:
            logger.warning(f"–ö–∞–Ω–∞–ª {channel_id} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–≤–æ–Ω–∫–∞—Ö")
            return

        call_data = self.active_calls[channel_id]
        session_id = call_data["session_id"]

        try:
            logger.info(f"üéØ –ù–∞—á–∏–Ω–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É —Ä–µ—á–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –∫–∞–Ω–∞–ª–∞ {channel_id}")
            
            # 1. ASR: –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Ä–µ—á—å –≤ —Ç–µ–∫—Å—Ç
            if self.asr:
                logger.info(f"üé§ –ó–∞–ø—É—Å–∫–∞–µ–º ASR –¥–ª—è —Ñ–∞–π–ª–∞: {audio_path}")
                user_text = await self.asr.speech_to_text(audio_path)
                normalized_text = normalize_text(user_text)

                logger.info(f"üé§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–∫–∞–∑–∞–ª: '{user_text}' ‚Üí '{normalized_text}'")

                # –î–æ–±–∞–≤–ª—è–µ–º –≤ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ç
                call_data["transcript"].append({
                    "speaker": "user",
                    "text": normalized_text,
                    "raw": user_text,
                    "timestamp": datetime.now(timezone.utc).isoformat()
                })
            else:
                logger.warning("ASR —Å–µ—Ä–≤–∏—Å –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
                normalized_text = "–ò–∑–≤–∏–Ω–∏—Ç–µ, —Å–∏—Å—Ç–µ–º–∞ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è —Ä–µ—á–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞"

            # 2. –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º TTS –ø—Ä–∏ barge-in (–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–≥–æ–≤–æ—Ä–∏–ª)
            await self.stop_tts_on_barge_in(channel_id, "UserSpeech")

            # 3. AI: –ü–æ–ª—É—á–∞–µ–º –ø–æ—Ç–æ–∫–æ–≤—ã–π –æ—Ç–≤–µ—Ç –æ—Ç –∞–≥–µ–Ω—Ç–∞ (–∫–∞–∫ –≤ Voximplant)
            if self.agent and normalized_text:
                logger.info(f"ü§ñ –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –ø–æ—Ç–æ–∫–æ–≤—ã–π –æ—Ç–≤–µ—Ç –æ—Ç AI –∞–≥–µ–Ω—Ç–∞ –¥–ª—è —Ç–µ–∫—Å—Ç–∞: '{normalized_text[:50]}...'")
                
                try:
                    response_generator = self.agent.get_response_generator(normalized_text, session_id=session_id)
                    
                    # –ü–û–¢–û–ö–û–í–ê–Ø –û–ë–†–ê–ë–û–¢–ö–ê (–∫–∞–∫ –≤ Voximplant MESSAGE handler)
                    await self.process_ai_response_streaming(channel_id, response_generator)
                    
                    # –°–æ–±–∏—Ä–∞–µ–º –ø–æ–ª–Ω—ã–π –æ—Ç–≤–µ—Ç –¥–ª—è —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ç–∞
                    full_response = call_data.get("response_buffer", "") or "–û—Ç–≤–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∞–Ω –ø–æ—Ç–æ–∫–æ–≤–æ"
                    
                    logger.info(f"ü§ñ –ü–æ—Ç–æ–∫–æ–≤—ã–π –æ—Ç–≤–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∞–Ω –¥–ª—è –∫–∞–Ω–∞–ª–∞ {channel_id}")

                    # –î–æ–±–∞–≤–ª—è–µ–º –≤ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ç
                    call_data["transcript"].append({
                        "speaker": "bot", 
                        "text": full_response,
                        "timestamp": datetime.now(timezone.utc).isoformat(),
                        "kb": getattr(self.agent, 'last_kb', None)
                    })
                    
                except Exception as ai_error:
                    logger.error(f"‚ùå –û—à–∏–±–∫–∞ AI –∞–≥–µ–Ω—Ç–∞: {ai_error}", exc_info=True)
                    # Fallback –Ω–∞ –æ–±—ã—á–Ω—ã–π TTS
                    await self.speak_queued(channel_id, "–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –≤ —Å–∏—Å—Ç–µ–º–µ –ò–ò")
            else:
                logger.warning("AI Agent –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –∏–ª–∏ —Ç–µ–∫—Å—Ç –ø—É—Å—Ç–æ–π")
                await self.speak_queued(channel_id, "–ò–∑–≤–∏–Ω–∏—Ç–µ, —Å–∏—Å—Ç–µ–º–∞ –ò–ò –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞")

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ä–µ—á–∏: {e}", exc_info=True)

    async def handle_playback_finished(self, event):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –ø—Ä–æ–∏–≥—Ä—ã–≤–∞–Ω–∏—è - –ø—Ä–æ–¥–æ–ª–∂–∞–µ—Ç –æ—á–µ—Ä–µ–¥—å TTS –∏–ª–∏ –∑–∞–ø—É—Å–∫–∞–µ—Ç –∑–∞–ø–∏—Å—å."""
        playback = event.get('playback', {})
        playback_id = playback.get('id')
        target_uri = playback.get('target_uri', '')

        # –ò–∑–≤–ª–µ–∫–∞–µ–º channel_id –∏–∑ target_uri (—Ñ–æ—Ä–º–∞—Ç: channel:1234567890.123)
        if target_uri.startswith('channel:'):
            channel_id = target_uri.replace('channel:', '')

            logger.info(f"üîä –ü—Ä–æ–∏–≥—Ä—ã–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ: {playback_id} –Ω–∞ –∫–∞–Ω–∞–ª–µ {channel_id}")

            if channel_id in self.active_calls:
                call_data = self.active_calls[channel_id]

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –Ω–∞—à–µ –ø—Ä–æ–∏–≥—Ä—ã–≤–∞–Ω–∏–µ
                if call_data.get("current_playback") == playback_id:
                    # –ó–∞–≤–µ—Ä—à–∞–µ–º —Ç–µ–∫—É—â—É—é —Ñ—Ä–∞–∑—É TTS –∏ –∑–∞–ø—É—Å–∫–∞–µ–º —Å–ª–µ–¥—É—é—â—É—é
                    await self.finish_speak_one(channel_id)
                    
                    # –ï—Å–ª–∏ –æ—á–µ—Ä–µ–¥—å TTS –ø—É—Å—Ç–∞ - –∑–∞–ø—É—Å–∫–∞–µ–º –∑–∞–ø–∏—Å—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                    if not call_data.get("tts_queue") and not call_data.get("tts_busy"):
                        await self.start_user_recording(channel_id)
                    
    async def start_user_recording(self, channel_id: str):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –∑–∞–ø–∏—Å—å —Ä–µ—á–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
        try:
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∏–º—è —Ñ–∞–π–ª–∞ –¥–ª—è –∑–∞–ø–∏—Å–∏
            timestamp = datetime.now().strftime('%Y%m%d_%H%M%S')
            recording_filename = f"user_{channel_id}_{timestamp}"
            
            logger.info(f"üé§ –ó–∞–ø—É—Å–∫–∞–µ–º –∑–∞–ø–∏—Å—å —Ä–µ—á–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {recording_filename}")
            
            async with AsteriskARIClient() as ari:
                recording_id = await ari.start_recording(channel_id, recording_filename, max_duration=15)
                
                # Status 201 –æ–∑–Ω–∞—á–∞–µ—Ç —É—Å–ø–µ—à–Ω—ã–π –∑–∞–ø—É—Å–∫ –∑–∞–ø–∏—Å–∏
                if recording_id and channel_id in self.active_calls:
                    self.active_calls[channel_id]["current_recording"] = recording_id
                    self.active_calls[channel_id]["recording_filename"] = recording_filename
                    logger.info(f"‚úÖ –ó–∞–ø–∏—Å—å –∑–∞–ø—É—â–µ–Ω–∞: {recording_id}")
                else:
                    logger.warning(f"‚ö†Ô∏è –ó–∞–ø–∏—Å—å –∑–∞–ø—É—â–µ–Ω–∞, –Ω–æ –Ω–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –≤ active_calls")
                    
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –∑–∞–ø–∏—Å–∏: {e}", exc_info=True)

    async def handle_recording_finished(self, event):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –∑–∞–ø–∏—Å–∏ - –∑–∞–ø—É—Å–∫–∞–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∫—É —Ä–µ—á–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
        recording = event.get('recording', {})
        recording_name = recording.get('name')
        
        logger.info(f"üé§ –ó–∞–ø–∏—Å—å –∑–∞–≤–µ—Ä—à–µ–Ω–∞: {recording_name}")
        
        # –ù–∞—Ö–æ–¥–∏–º –∫–∞–Ω–∞–ª –ø–æ –∏–º–µ–Ω–∏ –∑–∞–ø–∏—Å–∏
        channel_id = None
        for cid, call_data in self.active_calls.items():
            if call_data.get("recording_filename") == recording_name:
                channel_id = cid
                break
                
        if channel_id:
            # –ü—É—Ç—å –∫ –∑–∞–ø–∏—Å–∞–Ω–Ω–æ–º—É —Ñ–∞–π–ª—É (Asterisk —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –≤ /var/spool/asterisk/recording/)
            recording_path = f"/var/spool/asterisk/recording/{recording_name}.wav"
            
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ä–µ—á—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            await self.process_user_speech(channel_id, recording_path)
        else:
            logger.warning(f"–ù–µ –Ω–∞–π–¥–µ–Ω –∫–∞–Ω–∞–ª –¥–ª—è –∑–∞–ø–∏—Å–∏: {recording_name}")
    
    async def handle_event(self, event):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å–æ–±—ã—Ç–∏—è –æ—Ç Asterisk ARI."""
        event_type = event.get('type')
        logger.info(f"üì° Event: {event_type}")
        
        if event_type == 'StasisStart':
            await self.handle_stasis_start(event)
        elif event_type == 'ChannelDestroyed':
            await self.handle_channel_destroyed(event)
        elif event_type == 'PlaybackFinished':
            # –°–æ–±—ã—Ç–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø—Ä–æ–∏–≥—Ä—ã–≤–∞–Ω–∏—è - –Ω–∞—á–∏–Ω–∞–µ–º —Å–ª—É—à–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            await self.handle_playback_finished(event)
        elif event_type == 'RecordingFinished':
            # –°–æ–±—ã—Ç–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∑–∞–ø–∏—Å–∏ - –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ä–µ—á—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            await self.handle_recording_finished(event)
        else:
            # –õ–æ–≥–∏—Ä—É–µ–º –¥—Ä—É–≥–∏–µ —Å–æ–±—ã—Ç–∏—è –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
            logger.debug(f"–ù–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–µ —Å–æ–±—ã—Ç–∏–µ: {event_type}")
    
    async def run(self):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–±—ã—Ç–∏–π Asterisk ARI."""
        logger.info("üöÄ –ó–∞–ø—É—Å–∫ AI Voice Assistant Handler...")
        
        if not self.agent:
            logger.warning("‚ö†Ô∏è AI Agent –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω - —Ä–∞–±–æ—Ç–∞–µ–º –≤ —Ä–µ–∂–∏–º–µ –∑–∞–≥–ª—É—à–∫–∏")
        
        try:
            async with websockets.connect(self.ws_url) as websocket:
                logger.info("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω –∫ Asterisk ARI WebSocket")
                
                async for message in websocket:
                    try:
                        event = json.loads(message)
                        await self.handle_event(event)
                    except json.JSONDecodeError as e:
                        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON: {e}")
                    except Exception as e:
                        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–±—ã—Ç–∏—è: {e}", exc_info=True)
                        
        except websockets.exceptions.ConnectionClosed:
            logger.warning("üîå WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∑–∞–∫—Ä—ã—Ç–æ")
        except Exception as e:
            logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ WebSocket: {e}", exc_info=True)

async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞."""
    # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
    logging.basicConfig(
        level=logging.INFO,
        format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
    )
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
    from dotenv import load_dotenv
    load_dotenv()
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
    handler = AsteriskAIHandler()
    await handler.run()

if __name__ == "__main__":
    asyncio.run(main())