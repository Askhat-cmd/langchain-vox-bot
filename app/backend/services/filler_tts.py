#!/usr/bin/env python3
"""
Filler Words TTS —Å–∏—Å—Ç–µ–º–∞ –¥–ª—è –º–≥–Ω–æ–≤–µ–Ω–Ω—ã—Ö –ø—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫–∏—Ö —Ä–µ–∞–∫—Ü–∏–π
–¶–µ–ª—å: <150–º—Å –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –æ—â—É—â–µ–Ω–∏—è "–±–æ—Ç –¥—É–º–∞–µ—Ç, —Å–∫–æ—Ä–æ –æ—Ç–≤–µ—Ç–∏—Ç"
"""

import asyncio
import time
import logging
import os
from typing import Dict, Optional
import io
import wave

logger = logging.getLogger(__name__)

class InstantFillerTTS:
    """
    –°–∏—Å—Ç–µ–º–∞ –º–≥–Ω–æ–≤–µ–Ω–Ω—ã—Ö filler words –¥–ª—è –ø—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫–æ–≥–æ —ç—Ñ—Ñ–µ–∫—Ç–∞
    
    –ü—Ä–∏–Ω—Ü–∏–ø —Ä–∞–±–æ—Ç—ã:
    1. –ü—Ä–µ–¥–≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø–æ–ø—É–ª—è—Ä–Ω—ã–µ filler words –≤ –ø–∞–º—è—Ç—å
    2. –í–æ–∑–≤—Ä–∞—â–∞–µ–º –º–≥–Ω–æ–≤–µ–Ω–Ω–æ (<100–º—Å) –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ
    3. –ö–æ–Ω—Ç–µ–∫—Å—Ç–Ω—ã–π –≤—ã–±–æ—Ä filler –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç–∏–ø–∞ –≤–æ–ø—Ä–æ—Å–∞
    """
    
    def __init__(self):
        self.cached_fillers: Dict[str, bytes] = {}
        self.initialized = False
        
        # –ü–æ–ø—É–ª—è—Ä–Ω—ã–µ filler words –¥–ª—è —Ä—É—Å—Å–∫–æ–≥–æ —è–∑—ã–∫–∞
        self.filler_words = [
            "–•–º,",
            "–¢–∞–∫,",
            "–ò—Ç–∞–∫,",
            "–ü–æ–Ω—è—Ç–Ω–æ,",
            "–°–µ–π—á–∞—Å,",
            "–•–æ—Ä–æ—à–æ,",
            "–û—Ç–ª–∏—á–Ω–æ,",
            "–ü–æ–Ω—è–ª,"
        ]
        
        logger.info("üéµ InstantFillerTTS –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
    
    async def initialize(self, grpc_tts=None):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å –ø—Ä–µ–¥–≥–µ–Ω–µ—Ä–∞—Ü–∏–µ–π filler words
        
        Args:
            grpc_tts: –≠–∫–∑–µ–º–ø–ª—è—Ä YandexGrpcTTS –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ä–µ–∞–ª—å–Ω–æ–≥–æ –∞—É–¥–∏–æ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
        """
        try:
            logger.info("üîÑ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Filler TTS...")
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ gRPC TTS –¥–ª—è –±—É–¥—É—â–µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
            self.grpc_tts = grpc_tts
            
            # –ü—Ä–µ–¥–≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º –≤—Å–µ filler words
            for filler in self.filler_words:
                audio = await self._synthesize_filler_grpc(filler)
                self.cached_fillers[filler] = audio
                logger.info(f"‚úÖ Cached filler: '{filler}'")
            
            self.initialized = True
            logger.info("‚úÖ Filler TTS initialized with cached responses")
            
        except Exception as e:
            logger.error(f"‚ùå Filler TTS init failed: {e}")
            self.initialized = False
    
    async def get_instant_filler(self, context: str = "") -> bytes:
        """
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –º–≥–Ω–æ–≤–µ–Ω–Ω—ã–π filler word (<100–º—Å).
        
        Args:
            context: –ö–æ–Ω—Ç–µ–∫—Å—Ç –≤–æ–ø—Ä–æ—Å–∞ –¥–ª—è –≤—ã–±–æ—Ä–∞ –ø–æ–¥—Ö–æ–¥—è—â–µ–≥–æ filler
            
        Returns:
            bytes: –ê—É–¥–∏–æ –¥–∞–Ω–Ω—ã–µ filler word
        """
        start_time = time.time()
        
        try:
            # –ö–æ–Ω—Ç–µ–∫—Å—Ç–Ω—ã–π –≤—ã–±–æ—Ä filler
            filler = self._select_contextual_filler(context)
            
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∏–ª–∏ –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º
            if filler in self.cached_fillers:
                audio = self.cached_fillers[filler]
                elapsed = time.time() - start_time
                logger.info(f"‚ö° Instant cached filler: '{filler}' ({elapsed:.3f}s)")
                return audio
            else:
                # Fallback - –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º –Ω–∞ –ª–µ—Ç—É —á–µ—Ä–µ–∑ gRPC
                audio = await self._synthesize_filler_grpc(filler)
                elapsed = time.time() - start_time
                logger.info(f"‚ö° Generated filler on-the-fly: '{filler}' ({elapsed:.3f}s)")
                return audio
                
        except Exception as e:
            logger.error(f"‚ùå Filler generation error: {e}")
            return b""  # –ü—É—Å—Ç–æ–π –ø—Ä–∏ –æ—à–∏–±–∫–µ
    
    def _select_contextual_filler(self, context: str) -> str:
        """
        –í—ã–±–∏—Ä–∞–µ—Ç –ø–æ–¥—Ö–æ–¥—è—â–∏–π filler –Ω–∞ –æ—Å–Ω–æ–≤–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
        
        Args:
            context: –ö–æ–Ω—Ç–µ–∫—Å—Ç –≤–æ–ø—Ä–æ—Å–∞
            
        Returns:
            str: –í—ã–±—Ä–∞–Ω–Ω—ã–π filler word
        """
        context_lower = context.lower()
        
        # –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –≤–æ–ø—Ä–æ—Å—ã ‚Üí —Å–µ—Ä—å–µ–∑–Ω—ã–π —Ç–æ–Ω
        if any(word in context_lower for word in ["—Ç–µ—Ö–Ω", "–º–∞—à–∏–Ω", "–∏—Å–ø—ã—Ç–∞–Ω", "—Å—Ç–∞–Ω–¥–∞—Ä—Ç", "iso", "–∞—Å—Ç–º"]):
            return "–ò—Ç–∞–∫,"
        
        # –¶–µ–Ω–æ–≤—ã–µ –≤–æ–ø—Ä–æ—Å—ã ‚Üí –¥–µ–ª–æ–≤–æ–π —Ç–æ–Ω
        elif any(word in context_lower for word in ["—Ü–µ–Ω–∞", "—Å—Ç–æ–∏–º–æ—Å—Ç—å", "–∫–ø", "–∫–æ–º–º–µ—Ä—á–µ—Å–∫", "–¥–æ–≥–æ–≤–æ—Ä"]):
            return "–°–µ–π—á–∞—Å,"
        
        # –í–æ–ø—Ä–æ—Å—ã –æ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∞—Ö ‚Üí –∑–∞–∏–Ω—Ç–µ—Ä–µ—Å–æ–≤–∞–Ω–Ω—ã–π —Ç–æ–Ω
        elif any(word in context_lower for word in ["—Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫", "–ø–∞—Ä–∞–º–µ—Ç—Ä", "—Ç–æ—á–Ω–æ—Å—Ç—å", "—Å–∫–æ—Ä–æ—Å—Ç—å"]):
            return "–•–æ—Ä–æ—à–æ,"
        
        # –û–±—â–∏–µ –≤–æ–ø—Ä–æ—Å—ã ‚Üí –¥—Ä—É–∂–µ–ª—é–±–Ω—ã–π —Ç–æ–Ω
        else:
            return "–•–º,"  # –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π
    
    async def _synthesize_filler_grpc(self, text: str) -> bytes:
        """
        –°–∏–Ω—Ç–µ–∑ filler word —á–µ—Ä–µ–∑ gRPC TTS (–†–ï–ê–õ–¨–ù–´–ô –ó–í–£–ö!)
        
        Args:
            text: –¢–µ–∫—Å—Ç –¥–ª—è —Å–∏–Ω—Ç–µ–∑–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä "–•–º,")
            
        Returns:
            bytes: –ê—É–¥–∏–æ –¥–∞–Ω–Ω—ã–µ (WAV —Ñ–æ—Ä–º–∞—Ç, 8kHz)
        """
        try:
            # –ï—Å–ª–∏ –µ—Å—Ç—å gRPC TTS - –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ä–µ–∞–ª—å–Ω—ã–π —Å–∏–Ω—Ç–µ–∑
            if self.grpc_tts:
                try:
                    audio_data = await self.grpc_tts.synthesize_chunk_fast(text)
                    logger.info(f"‚úÖ Filler synthesized via gRPC: '{text}' ({len(audio_data)} bytes)")
                    return audio_data
                except Exception as grpc_error:
                    logger.warning(f"‚ö†Ô∏è gRPC filler failed for '{text}', fallback to silence: {grpc_error}")
                    return self._synthesize_filler_simple(text)
            else:
                # Fallback –Ω–∞ —Ç–∏—à–∏–Ω—É –µ—Å–ª–∏ gRPC –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω
                logger.debug(f"‚ÑπÔ∏è gRPC TTS not available, using silence for filler")
                return self._synthesize_filler_simple(text)
            
        except Exception as e:
            logger.error(f"‚ùå Filler synthesis error: {e}")
            return self._synthesize_filler_simple(text)
    
    def _synthesize_filler_simple(self, text: str) -> bytes:
        """
        Fallback: –°–∏–Ω—Ç–µ–∑ filler word –∫–∞–∫ —Ç–∏—à–∏–Ω–∞
        –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ gRPC TTS –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω
        
        Args:
            text: –¢–µ–∫—Å—Ç –¥–ª—è —Å–∏–Ω—Ç–µ–∑–∞
            
        Returns:
            bytes: –ê—É–¥–∏–æ –¥–∞–Ω–Ω—ã–µ (WAV —Å —Ç–∏—à–∏–Ω–æ–π)
        """
        try:
            # –°–æ–∑–¥–∞–µ–º 0.5 —Å–µ–∫—É–Ω–¥—ã —Ç–∏—à–∏–Ω—ã (16-bit, 8kHz, mono)
            sample_rate = 8000
            duration = 0.5  # 500–º—Å
            samples = int(sample_rate * duration)
            
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ç–∏—à–∏–Ω—É (–Ω—É–ª–µ–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è)
            audio_data = b'\x00' * (samples * 2)  # 16-bit = 2 bytes per sample
            
            # –°–æ–∑–¥–∞–µ–º WAV –∑–∞–≥–æ–ª–æ–≤–æ–∫
            wav_header = self._create_wav_header(len(audio_data), sample_rate)
            
            # –û–±—ä–µ–¥–∏–Ω—è–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ –∏ –¥–∞–Ω–Ω—ã–µ
            wav_data = wav_header + audio_data
            
            logger.debug(f"üéµ Generated silence filler: {len(wav_data)} bytes")
            return wav_data
            
        except Exception as e:
            logger.error(f"‚ùå Simple filler synthesis error: {e}")
            return b""
    
    def _create_wav_header(self, data_size: int, sample_rate: int) -> bytes:
        """
        –°–æ–∑–¥–∞–µ—Ç WAV –∑–∞–≥–æ–ª–æ–≤–æ–∫ –¥–ª—è –∞—É–¥–∏–æ –¥–∞–Ω–Ω—ã—Ö
        
        Args:
            data_size: –†–∞–∑–º–µ—Ä –∞—É–¥–∏–æ –¥–∞–Ω–Ω—ã—Ö –≤ –±–∞–π—Ç–∞—Ö
            sample_rate: –ß–∞—Å—Ç–æ—Ç–∞ –¥–∏—Å–∫—Ä–µ—Ç–∏–∑–∞—Ü–∏–∏
            
        Returns:
            bytes: WAV –∑–∞–≥–æ–ª–æ–≤–æ–∫
        """
        # WAV –∑–∞–≥–æ–ª–æ–≤–æ–∫ (44 –±–∞–π—Ç–∞)
        header = bytearray(44)
        
        # RIFF –∑–∞–≥–æ–ª–æ–≤–æ–∫
        header[0:4] = b'RIFF'
        header[4:8] = (data_size + 36).to_bytes(4, 'little')  # –†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞ - 8
        header[8:12] = b'WAVE'
        
        # fmt chunk
        header[12:16] = b'fmt '
        header[16:20] = (16).to_bytes(4, 'little')  # –†–∞–∑–º–µ—Ä fmt chunk
        header[20:22] = (1).to_bytes(2, 'little')   # PCM format
        header[22:24] = (1).to_bytes(2, 'little')   # Mono
        header[24:28] = sample_rate.to_bytes(4, 'little')  # Sample rate
        header[28:32] = (sample_rate * 2).to_bytes(4, 'little')  # Byte rate
        header[32:34] = (2).to_bytes(2, 'little')   # Block align
        header[34:36] = (16).to_bytes(2, 'little')  # Bits per sample
        
        # data chunk
        header[36:40] = b'data'
        header[40:44] = data_size.to_bytes(4, 'little')  # –†–∞–∑–º–µ—Ä –¥–∞–Ω–Ω—ã—Ö
        
        return bytes(header)
    
    def get_available_fillers(self) -> list:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö filler words"""
        return list(self.cached_fillers.keys())
    
    def is_initialized(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –ª–∏ —Å–µ—Ä–≤–∏—Å"""
        return self.initialized

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –¥—Ä—É–≥–∏—Ö –º–æ–¥—É–ª—è—Ö
filler_tts_instance = InstantFillerTTS()

async def get_filler_tts() -> InstantFillerTTS:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä Filler TTS"""
    if not filler_tts_instance.is_initialized():
        await filler_tts_instance.initialize()
    return filler_tts_instance

