"""
Yandex gRPC TTS Service - –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è
–ß–∞—Å—Ç—å –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã TTSAdapter –¥–ª—è –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è 1.1 —Å–µ–∫—É–Ω–¥—ã –æ—Ç–≤–µ—Ç–∞
"""

import os
import sys
import grpc
import asyncio
import time
import logging
from typing import Optional

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ gRPC —Ñ–∞–π–ª–∞–º
current_dir = os.path.dirname(os.path.abspath(__file__))
sys.path.append(current_dir)

try:
    from yandex.cloud.ai.tts.v3 import tts_service_pb2_grpc
    from yandex.cloud.ai.tts.v3 import tts_pb2
    GRPC_AVAILABLE = True
    logger = logging.getLogger(__name__)
    logger.info("‚úÖ gRPC –º–æ–¥—É–ª–∏ –¥–ª—è Yandex TTS –∑–∞–≥—Ä—É–∂–µ–Ω—ã")
except ImportError as e:
    GRPC_AVAILABLE = False
    logger = logging.getLogger(__name__)
    logger.warning(f"‚ö†Ô∏è gRPC –º–æ–¥—É–ª–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã: {e}")

class YandexGrpcTTS:
    """
    –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π gRPC TTS —Å–µ—Ä–≤–∏—Å –¥–ª—è –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–π –ª–∞—Ç–µ–Ω—Ç–Ω–æ—Å—Ç–∏
    –¶–µ–ª—å: <250–º—Å –≤–º–µ—Å—Ç–æ 700–º—Å HTTP TTS
    """
    
    def __init__(self):
        self.api_key = os.getenv("OAUTH_TOKEN")  # –ò—Å–ø–æ–ª—å–∑—É–µ–º OAUTH_TOKEN
        self.folder_id = os.getenv("YANDEX_FOLDER_ID")
        self.channel = None
        self.stub = None
        self.iam_token = None
        self.iam_token_expires = 0
        
        if not self.api_key or not self.folder_id:
            raise ValueError("–ù–µ –Ω–∞–π–¥–µ–Ω—ã OAUTH_TOKEN –∏–ª–∏ YANDEX_FOLDER_ID –≤ .env")
        
        logger.info("üöÄ YandexGrpcTTS –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
        
    async def initialize(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è gRPC —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏"""
        if not GRPC_AVAILABLE:
            raise RuntimeError("gRPC –º–æ–¥—É–ª–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã")
            
        try:
            credentials = grpc.ssl_channel_credentials()
            # –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∫–∞–Ω–∞–ª –¥–ª—è –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–π –ª–∞—Ç–µ–Ω—Ç–Ω–æ—Å—Ç–∏
            options = [
                ('grpc.keepalive_time_ms', 30000),      # –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
                ('grpc.keepalive_timeout_ms', 5000),    # –ë—ã—Å—Ç—Ä—ã–π timeout
                ('grpc.http2.max_pings_without_data', 0), # –ë–µ–∑ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π ping
                ('grpc.http2.min_time_between_pings_ms', 10000),
                ('grpc.http2.min_ping_interval_without_data_ms', 300000),
                ('grpc.max_message_length', 4194304)    # 4MB –±—É—Ñ–µ—Ä
            ]
            
            self.channel = grpc.aio.secure_channel(
                'tts.api.cloud.yandex.net:443', 
                credentials,
                options=options
            )
            self.stub = tts_service_pb2_grpc.SynthesizerStub(self.channel)
            logger.info("‚úÖ gRPC TTS channel initialized")
            
        except Exception as e:
            logger.error(f"‚ùå gRPC TTS initialization failed: {e}")
            raise
    
    def _get_fresh_iam_token(self) -> str:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–≤–µ–∂–µ–≥–æ IAM —Ç–æ–∫–µ–Ω–∞ —Å –∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ–º"""
        import requests
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∏—Å—Ç–µ–∫ –ª–∏ —Ç–æ–∫–µ–Ω (12 —á–∞—Å–æ–≤ = 43200 —Å–µ–∫, –æ–±–Ω–æ–≤–ª—è–µ–º –∑–∞ —á–∞—Å –¥–æ –∏—Å—Ç–µ—á–µ–Ω–∏—è)
        if self.iam_token and time.time() < (self.iam_token_expires - 3600):
            return self.iam_token
        
        url = "https://iam.api.cloud.yandex.net/iam/v1/tokens"
        headers = {"Content-Type": "application/json"}
        data = {"yandexPassportOauthToken": self.api_key}
        
        try:
            response = requests.post(url, headers=headers, json=data, timeout=5)
            response.raise_for_status()
            
            token_data = response.json()
            self.iam_token = token_data["iamToken"]
            
            # –¢–æ–∫–µ–Ω –¥–µ–π—Å—Ç–≤—É–µ—Ç 12 —á–∞—Å–æ–≤
            self.iam_token_expires = time.time() + 43200
            
            logger.info("üîë IAM —Ç–æ–∫–µ–Ω –æ–±–Ω–æ–≤–ª–µ–Ω")
            return self.iam_token
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è IAM —Ç–æ–∫–µ–Ω–∞: {e}")
            raise
    
    async def synthesize_chunk_fast(self, text: str) -> bytes:
        """
        –ë—ã—Å—Ç—Ä—ã–π —Å–∏–Ω—Ç–µ–∑ —á–∞–Ω–∫–∞ —á–µ—Ä–µ–∑ gRPC.
        –¶–ï–õ–¨: <200–º—Å –≤–º–µ—Å—Ç–æ 700–º—Å HTTP.
        """
        start_time = time.time()
        
        try:
            # –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
            metadata = [
                ('authorization', f'Bearer {self._get_fresh_iam_token()}'),
                ('x-folder-id', self.folder_id)
            ]
            
            # –ó–∞–ø—Ä–æ—Å —Å –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–µ–π –¥–ª—è —Å–∫–æ—Ä–æ—Å—Ç–∏
            request = tts_pb2.UtteranceSynthesisRequest(
                text=text,
                output_audio_spec=tts_pb2.AudioFormatOptions(
                    container_audio=tts_pb2.ContainerAudio(
                        container_audio_type=tts_pb2.ContainerAudio.ContainerAudioType.WAV
                    )
                ),
                # –ö–†–ò–¢–ò–ß–ù–û: –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–π –ª–∞—Ç–µ–Ω—Ç–Ω–æ—Å—Ç–∏
                hints=[
                    tts_pb2.Hints(voice="alena"),      # –ë—ã—Å—Ç—Ä—ã–π –≥–æ–ª–æ—Å (–Ω–µ "jane")
                    tts_pb2.Hints(speed=1.15),         # –ù–µ–º–Ω–æ–≥–æ —É—Å–∫–æ—Ä–∏—Ç—å
                    tts_pb2.Hints(role="neutral")      # –ù–µ–π—Ç—Ä–∞–ª—å–Ω–∞—è —ç–º–æ—Ü–∏—è
                ],
                loudness_normalization_type=tts_pb2.UtteranceSynthesisRequest.LoudnessNormalizationType.LUFS
            )
            
            # –ü–æ—Ç–æ–∫–æ–≤—ã–π –≤—ã–∑–æ–≤
            response_stream = self.stub.UtteranceSynthesis(request, metadata=metadata)
            
            # –°–æ–±–∏—Ä–∞–µ–º –∞—É–¥–∏–æ —á–∞–Ω–∫–∏
            audio_chunks = []
            async for response in response_stream:
                if response.audio_chunk.data:
                    audio_chunks.append(response.audio_chunk.data)
            
            # –û–±—ä–µ–¥–∏–Ω—è–µ–º –≤ —Ñ–∏–Ω–∞–ª—å–Ω—ã–π –∞—É–¥–∏–æ
            audio_data = b''.join(audio_chunks)
            
            elapsed = time.time() - start_time
            logger.info(f"‚ö° gRPC TTS: {elapsed:.2f}s for '{text[:30]}...'")
            
            # –ê–ª–µ—Ä—Ç –ø—Ä–∏ –ø—Ä–µ–≤—ã—à–µ–Ω–∏–∏ —Ü–µ–ª–µ–≤–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏
            if elapsed > 0.25:
                logger.warning(f"üêå gRPC TTS slow: {elapsed:.2f}s > 0.25s target")
            
            return audio_data
            
        except Exception as e:
            logger.error(f"‚ùå gRPC TTS error: {e}")
            raise
    
    async def close(self):
        """–ó–∞–∫—Ä—ã—Ç–∏–µ gRPC —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è"""
        if self.channel:
            await self.channel.close()
            logger.info("‚úÖ gRPC TTS channel closed")

