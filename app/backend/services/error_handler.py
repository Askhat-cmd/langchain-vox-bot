#!/usr/bin/env python3
"""
Error Handler –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫ –∏ fallback –º–µ—Ö–∞–Ω–∏–∑–º–æ–≤
–¶–µ–ª—å: –æ—Ç–∫–∞–∑–æ—É—Å—Ç–æ–π—á–∏–≤–æ—Å—Ç—å –∏ graceful degradation
"""

import asyncio
import time
import logging
from typing import Dict, List, Optional, Any, Callable
from enum import Enum
from dataclasses import dataclass
from datetime import datetime, timezone

logger = logging.getLogger(__name__)

class ErrorSeverity(Enum):
    """–£—Ä–æ–≤–Ω–∏ —Å–µ—Ä—å–µ–∑–Ω–æ—Å—Ç–∏ –æ—à–∏–±–æ–∫"""
    LOW = "low"
    MEDIUM = "medium"
    HIGH = "high"
    CRITICAL = "critical"

class ErrorCategory(Enum):
    """–ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –æ—à–∏–±–æ–∫"""
    NETWORK = "network"
    AUTHENTICATION = "authentication"
    RATE_LIMIT = "rate_limit"
    SERVICE_UNAVAILABLE = "service_unavailable"
    TIMEOUT = "timeout"
    VALIDATION = "validation"
    INTERNAL = "internal"

@dataclass
class ErrorInfo:
    """–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –æ—à–∏–±–∫–µ"""
    error_id: str
    category: ErrorCategory
    severity: ErrorSeverity
    message: str
    details: Dict[str, Any]
    timestamp: datetime
    channel_id: Optional[str] = None
    retry_count: int = 0
    resolved: bool = False

class FallbackStrategy:
    """–°—Ç—Ä–∞—Ç–µ–≥–∏—è fallback –¥–ª—è —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ç–∏–ø–æ–≤ –æ—à–∏–±–æ–∫"""
    
    def __init__(self, max_retries: int = 3, retry_delay: float = 1.0, 
                 fallback_action: Optional[Callable] = None):
        self.max_retries = max_retries
        self.retry_delay = retry_delay
        self.fallback_action = fallback_action

class ErrorHandler:
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫ —Å fallback –º–µ—Ö–∞–Ω–∏–∑–º–∞–º–∏
    
    –§—É–Ω–∫—Ü–∏–∏:
    1. –ö–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è –æ—à–∏–±–æ–∫ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º –∏ —Å–µ—Ä—å–µ–∑–Ω–æ—Å—Ç–∏
    2. –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ retry —Å —ç–∫—Å–ø–æ–Ω–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–º backoff
    3. Fallback —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ –¥–ª—è —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
    4. –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –æ—à–∏–±–æ–∫
    5. Graceful degradation –ø—Ä–∏ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –æ—à–∏–±–∫–∞—Ö
    """
    
    def __init__(self):
        # –û—à–∏–±–∫–∏ –ø–æ –∫–∞–Ω–∞–ª–∞–º
        self.channel_errors: Dict[str, List[ErrorInfo]] = {}
        
        # Fallback —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
        self.fallback_strategies = {
            ErrorCategory.NETWORK: FallbackStrategy(max_retries=3, retry_delay=1.0),
            ErrorCategory.AUTHENTICATION: FallbackStrategy(max_retries=1, retry_delay=0.5),
            ErrorCategory.RATE_LIMIT: FallbackStrategy(max_retries=2, retry_delay=2.0),
            ErrorCategory.SERVICE_UNAVAILABLE: FallbackStrategy(max_retries=2, retry_delay=1.5),
            ErrorCategory.TIMEOUT: FallbackStrategy(max_retries=2, retry_delay=1.0),
            ErrorCategory.VALIDATION: FallbackStrategy(max_retries=0, retry_delay=0.0),
            ErrorCategory.INTERNAL: FallbackStrategy(max_retries=1, retry_delay=0.5)
        }
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ—à–∏–±–æ–∫
        self.error_stats = {
            "total_errors": 0,
            "errors_by_category": {category.value: 0 for category in ErrorCategory},
            "errors_by_severity": {severity.value: 0 for severity in ErrorSeverity},
            "retry_success_rate": 0.0,
            "fallback_usage_rate": 0.0
        }
        
        logger.info("üõ°Ô∏è ErrorHandler –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
    
    async def handle_error(self, error: Exception, channel_id: Optional[str] = None, 
                          context: Optional[Dict] = None) -> ErrorInfo:
        """
        –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ—à–∏–±–∫—É —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º retry –∏ fallback
        
        Args:
            error: –ò—Å–∫–ª—é—á–µ–Ω–∏–µ
            channel_id: ID –∫–∞–Ω–∞–ª–∞ (–µ—Å–ª–∏ –ø—Ä–∏–º–µ–Ω–∏–º–æ)
            context: –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç
            
        Returns:
            ErrorInfo: –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–π –æ—à–∏–±–∫–µ
        """
        try:
            # –ö–ª–∞—Å—Å–∏—Ñ–∏—Ü–∏—Ä—É–µ–º –æ—à–∏–±–∫—É
            error_info = self._classify_error(error, channel_id, context)
            
            # –õ–æ–≥–∏—Ä—É–µ–º –æ—à–∏–±–∫—É
            self._log_error(error_info)
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            self._update_error_stats(error_info)
            
            # –î–æ–±–∞–≤–ª—è–µ–º –≤ –∏—Å—Ç–æ—Ä–∏—é –∫–∞–Ω–∞–ª–∞
            if channel_id:
                if channel_id not in self.channel_errors:
                    self.channel_errors[channel_id] = []
                self.channel_errors[channel_id].append(error_info)
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç—Ä–∞—Ç–µ–≥–∏—é –æ–±—Ä–∞–±–æ—Ç–∫–∏
            strategy = self.fallback_strategies.get(error_info.category)
            
            if strategy and strategy.max_retries > 0:
                # –ü—ã—Ç–∞–µ–º—Å—è retry
                success = await self._retry_with_backoff(error_info, strategy)
                if success:
                    error_info.resolved = True
                    return error_info
            
            # –ï—Å–ª–∏ retry –Ω–µ –ø–æ–º–æ–≥, –∏—Å–ø–æ–ª—å–∑—É–µ–º fallback
            if strategy and strategy.fallback_action:
                await self._execute_fallback(error_info, strategy)
            
            return error_info
            
        except Exception as e:
            logger.error(f"‚ùå Error handling failed: {e}")
            # –°–æ–∑–¥–∞–µ–º –∫—Ä–∏—Ç–∏—á–µ—Å–∫—É—é –æ—à–∏–±–∫—É –¥–ª—è —Å–∞–º–æ–π —Å–∏—Å—Ç–µ–º—ã –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫
            critical_error = ErrorInfo(
                error_id=f"critical_{int(time.time() * 1000)}",
                category=ErrorCategory.INTERNAL,
                severity=ErrorSeverity.CRITICAL,
                message=f"Error handler failed: {str(e)}",
                details={"original_error": str(error)},
                timestamp=datetime.now(timezone.utc),
                channel_id=channel_id
            )
            return critical_error
    
    def _classify_error(self, error: Exception, channel_id: Optional[str], 
                       context: Optional[Dict]) -> ErrorInfo:
        """–ö–ª–∞—Å—Å–∏—Ñ–∏—Ü–∏—Ä—É–µ—Ç –æ—à–∏–±–∫—É –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏ —Å–µ—Ä—å–µ–∑–Ω–æ—Å—Ç–∏"""
        try:
            error_id = f"error_{int(time.time() * 1000)}"
            error_message = str(error)
            error_type = type(error).__name__
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é
            category = self._determine_category(error, context)
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–µ—Ä—å–µ–∑–Ω–æ—Å—Ç—å
            severity = self._determine_severity(error, category, context)
            
            # –°–æ–±–∏—Ä–∞–µ–º –¥–µ—Ç–∞–ª–∏
            details = {
                "error_type": error_type,
                "error_message": error_message,
                "context": context or {},
                "channel_id": channel_id
            }
            
            return ErrorInfo(
                error_id=error_id,
                category=category,
                severity=severity,
                message=error_message,
                details=details,
                timestamp=datetime.now(timezone.utc),
                channel_id=channel_id
            )
            
        except Exception as e:
            logger.error(f"‚ùå Error classification failed: {e}")
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –±–∞–∑–æ–≤—É—é –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—é
            return ErrorInfo(
                error_id=f"classification_failed_{int(time.time() * 1000)}",
                category=ErrorCategory.INTERNAL,
                severity=ErrorSeverity.HIGH,
                message=f"Error classification failed: {str(e)}",
                details={"original_error": str(error)},
                timestamp=datetime.now(timezone.utc),
                channel_id=channel_id
            )
    
    def _determine_category(self, error: Exception, context: Optional[Dict]) -> ErrorCategory:
        """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏—é –æ—à–∏–±–∫–∏"""
        error_message = str(error).lower()
        error_type = type(error).__name__
        
        # –°–µ—Ç–µ–≤—ã–µ –æ—à–∏–±–∫–∏
        if any(keyword in error_message for keyword in ["connection", "network", "timeout", "unreachable"]):
            return ErrorCategory.NETWORK
        
        # –û—à–∏–±–∫–∏ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
        if any(keyword in error_message for keyword in ["auth", "token", "credential", "unauthorized"]):
            return ErrorCategory.AUTHENTICATION
        
        # Rate limiting
        if any(keyword in error_message for keyword in ["rate limit", "too many requests", "quota"]):
            return ErrorCategory.RATE_LIMIT
        
        # –°–µ—Ä–≤–∏—Å –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω
        if any(keyword in error_message for keyword in ["service unavailable", "503", "502", "500"]):
            return ErrorCategory.SERVICE_UNAVAILABLE
        
        # Timeout
        if "timeout" in error_message or "TimeoutError" in error_type:
            return ErrorCategory.TIMEOUT
        
        # –í–∞–ª–∏–¥–∞—Ü–∏—è
        if any(keyword in error_message for keyword in ["validation", "invalid", "bad request", "400"]):
            return ErrorCategory.VALIDATION
        
        # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é - –≤–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞
        return ErrorCategory.INTERNAL
    
    def _determine_severity(self, error: Exception, category: ErrorCategory, 
                           context: Optional[Dict]) -> ErrorSeverity:
        """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç —Å–µ—Ä—å–µ–∑–Ω–æ—Å—Ç—å –æ—à–∏–±–∫–∏"""
        # –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –æ—à–∏–±–∫–∏
        if category in [ErrorCategory.AUTHENTICATION, ErrorCategory.SERVICE_UNAVAILABLE]:
            return ErrorSeverity.CRITICAL
        
        # –í—ã—Å–æ–∫–∏–µ –æ—à–∏–±–∫–∏
        if category in [ErrorCategory.NETWORK, ErrorCategory.TIMEOUT]:
            return ErrorSeverity.HIGH
        
        # –°—Ä–µ–¥–Ω–∏–µ –æ—à–∏–±–∫–∏
        if category in [ErrorCategory.RATE_LIMIT, ErrorCategory.INTERNAL]:
            return ErrorSeverity.MEDIUM
        
        # –ù–∏–∑–∫–∏–µ –æ—à–∏–±–∫–∏
        if category == ErrorCategory.VALIDATION:
            return ErrorSeverity.LOW
        
        return ErrorSeverity.MEDIUM
    
    def _log_error(self, error_info: ErrorInfo):
        """–õ–æ–≥–∏—Ä—É–µ—Ç –æ—à–∏–±–∫—É"""
        try:
            log_message = f"üö® {error_info.severity.value.upper()} ERROR [{error_info.category.value}]: {error_info.message}"
            
            if error_info.channel_id:
                log_message += f" (Channel: {error_info.channel_id})"
            
            if error_info.severity == ErrorSeverity.CRITICAL:
                logger.error(log_message, extra={"error_info": error_info})
            elif error_info.severity == ErrorSeverity.HIGH:
                logger.error(log_message)
            elif error_info.severity == ErrorSeverity.MEDIUM:
                logger.warning(log_message)
            else:
                logger.info(log_message)
                
        except Exception as e:
            logger.error(f"‚ùå Error logging failed: {e}")
    
    def _update_error_stats(self, error_info: ErrorInfo):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –æ—à–∏–±–æ–∫"""
        try:
            self.error_stats["total_errors"] += 1
            self.error_stats["errors_by_category"][error_info.category.value] += 1
            self.error_stats["errors_by_severity"][error_info.severity.value] += 1
        except Exception as e:
            logger.error(f"‚ùå Update error stats failed: {e}")
    
    async def _retry_with_backoff(self, error_info: ErrorInfo, strategy: FallbackStrategy) -> bool:
        """–ü—ã—Ç–∞–µ—Ç—Å—è –ø–æ–≤—Ç–æ—Ä–∏—Ç—å –æ–ø–µ—Ä–∞—Ü–∏—é —Å —ç–∫—Å–ø–æ–Ω–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–º backoff"""
        try:
            for attempt in range(strategy.max_retries):
                error_info.retry_count += 1
                
                # –≠–∫—Å–ø–æ–Ω–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–π backoff
                delay = strategy.retry_delay * (2 ** attempt)
                await asyncio.sleep(delay)
                
                logger.info(f"üîÑ Retry attempt {attempt + 1}/{strategy.max_retries} for {error_info.error_id}")
                
                # –í —Ä–µ–∞–ª—å–Ω–æ–π —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ –∑–¥–µ—Å—å –±—É–¥–µ—Ç –ø–æ–≤—Ç–æ—Ä–Ω—ã–π –≤—ã–∑–æ–≤ –æ–ø–µ—Ä–∞—Ü–∏–∏
                # success = await self._retry_operation(error_info)
                # if success:
                #     logger.info(f"‚úÖ Retry successful for {error_info.error_id}")
                #     return True
            
            logger.warning(f"‚ö†Ô∏è All retry attempts failed for {error_info.error_id}")
            return False
            
        except Exception as e:
            logger.error(f"‚ùå Retry with backoff failed: {e}")
            return False
    
    async def _execute_fallback(self, error_info: ErrorInfo, strategy: FallbackStrategy):
        """–í—ã–ø–æ–ª–Ω—è–µ—Ç fallback –¥–µ–π—Å—Ç–≤–∏–µ"""
        try:
            if strategy.fallback_action:
                logger.info(f"üîÑ Executing fallback for {error_info.error_id}")
                await strategy.fallback_action(error_info)
                logger.info(f"‚úÖ Fallback executed for {error_info.error_id}")
            else:
                logger.warning(f"‚ö†Ô∏è No fallback action defined for {error_info.category.value}")
                
        except Exception as e:
            logger.error(f"‚ùå Fallback execution failed: {e}")
    
    def get_channel_errors(self, channel_id: str) -> List[ErrorInfo]:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ—à–∏–±–∫–∏ –¥–ª—è –∫–∞–Ω–∞–ª–∞"""
        return self.channel_errors.get(channel_id, [])
    
    def get_error_stats(self) -> Dict:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –æ—à–∏–±–æ–∫"""
        return self.error_stats.copy()
    
    def clear_channel_errors(self, channel_id: str):
        """–û—á–∏—â–∞–µ—Ç –æ—à–∏–±–∫–∏ –∫–∞–Ω–∞–ª–∞"""
        if channel_id in self.channel_errors:
            del self.channel_errors[channel_id]
            logger.debug(f"üßπ Cleared errors for {channel_id}")
    
    def get_health_status(self) -> Dict:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç–∞—Ç—É—Å –∑–¥–æ—Ä–æ–≤—å—è —Å–∏—Å—Ç–µ–º—ã"""
        try:
            total_errors = self.error_stats["total_requests"]
            critical_errors = self.error_stats["errors_by_severity"][ErrorSeverity.CRITICAL.value]
            high_errors = self.error_stats["errors_by_severity"][ErrorSeverity.HIGH.value]
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–¥–æ—Ä–æ–≤—å—è
            if critical_errors > 0:
                health_status = "critical"
            elif high_errors > 5:
                health_status = "degraded"
            elif high_errors > 0:
                health_status = "warning"
            else:
                health_status = "healthy"
            
            return {
                "status": health_status,
                "total_errors": total_errors,
                "critical_errors": critical_errors,
                "high_errors": high_errors,
                "error_rate": (total_errors / max(total_errors, 1)) * 100,
                "last_updated": datetime.now(timezone.utc).isoformat()
            }
            
        except Exception as e:
            logger.error(f"‚ùå Get health status failed: {e}")
            return {"status": "unknown", "error": str(e)}

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –¥—Ä—É–≥–∏—Ö –º–æ–¥—É–ª—è—Ö
error_handler = ErrorHandler()

def get_error_handler() -> ErrorHandler:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≥–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä ErrorHandler"""
    return error_handler

