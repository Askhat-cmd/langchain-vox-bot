"""
Yandex SpeechKit TTS Service —Å gRPC Streaming
–°–≤–µ—Ä—Ö–±—ã—Å—Ç—Ä–∞—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å Yandex Cloud –¥–ª—è —Å–∏–Ω—Ç–µ–∑–∞ —Ä–µ—á–∏ (1-1.5 —Å–µ–∫)
"""

import os
import sys
import grpc
import subprocess
import hashlib
import logging
import asyncio
import wave
import io
from typing import Optional

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ gRPC —Ñ–∞–π–ª–∞–º
current_dir = os.path.dirname(os.path.abspath(__file__))
sys.path.append(current_dir)

try:
    from yandex.cloud.ai.tts.v3 import tts_service_pb2_grpc
    from yandex.cloud.ai.tts.v3 import tts_pb2
    # –ò–°–ü–†–ê–í–õ–ï–ù–û: –í—Å–µ –∫–ª–∞—Å—Å—ã –Ω–∞—Ö–æ–¥—è—Ç—Å—è –≤ tts_pb2
    GRPC_AVAILABLE = True
    logger = logging.getLogger(__name__)
    logger.info("‚úÖ gRPC –º–æ–¥—É–ª–∏ –¥–ª—è Yandex TTS –∑–∞–≥—Ä—É–∂–µ–Ω—ã")
    logger.info(f"üìã –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–ª–∞—Å—Å—ã: {[x for x in dir(tts_pb2) if 'utterance' in x.lower()]}")
except ImportError as e:
    GRPC_AVAILABLE = False
    logger = logging.getLogger(__name__)
    logger.warning(f"‚ö†Ô∏è gRPC –º–æ–¥—É–ª–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã: {e}")
    logger.info("üîÑ –ë—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è HTTP API")
    # Fallback –Ω–∞ HTTP API
    import requests

class YandexTTSService:
    def __init__(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–≤–µ—Ä—Ö–±—ã—Å—Ç—Ä–æ–≥–æ Yandex TTS —Å gRPC streaming"""
        self.oauth_token = os.getenv("OAUTH_TOKEN")  # –ò—Å–ø–æ–ª—å–∑—É–µ–º OAUTH_TOKEN –∏–∑ .env
        self.folder_id = os.getenv("YANDEX_FOLDER_ID")
        self.asterisk_sounds_dir = "/usr/share/asterisk/sounds/ru"
        
        # –ö–µ—à –¥–ª—è –∫–æ—Ä–æ—Ç–∫–∏—Ö —Ñ—Ä–∞–∑ (–¥–æ 100 —Å–∏–º–≤–æ–ª–æ–≤)
        self.tts_cache = {}
        
        # gRPC –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        self.grpc_channel = None
        self.tts_stub = None
        self.iam_token = None
        self.iam_token_expires = 0
        
        if not self.oauth_token or not self.folder_id:
            raise ValueError("–ù–µ –Ω–∞–π–¥–µ–Ω—ã OAUTH_TOKEN –∏–ª–∏ YANDEX_FOLDER_ID –≤ .env")
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º gRPC —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–Ω–æ
        if GRPC_AVAILABLE:
            self._init_grpc_connection()
        
        logger.info("üöÄ Yandex TTS Service —Å gRPC streaming –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
    
    def _create_wav_from_pcm(self, pcm_data: bytes, sample_rate: int = 8000, channels: int = 1, sample_width: int = 2) -> bytes:
        """
        –°–æ–∑–¥–∞–Ω–∏–µ WAV —Ñ–∞–π–ª–∞ –∏–∑ raw PCM –¥–∞–Ω–Ω—ã—Ö
        
        Args:
            pcm_data: Raw PCM –¥–∞–Ω–Ω—ã–µ (LINEAR16_PCM)
            sample_rate: –ß–∞—Å—Ç–æ—Ç–∞ –¥–∏—Å–∫—Ä–µ—Ç–∏–∑–∞—Ü–∏–∏ (8000 –¥–ª—è Asterisk)
            channels: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–∞–Ω–∞–ª–æ–≤ (1 = –º–æ–Ω–æ)
            sample_width: –®–∏—Ä–∏–Ω–∞ —Å—ç–º–ø–ª–∞ –≤ –±–∞–π—Ç–∞—Ö (2 = 16 –±–∏—Ç)
        
        Returns:
            bytes: WAV —Ñ–∞–π–ª —Å –∑–∞–≥–æ–ª–æ–≤–∫–∞–º–∏
        """
        wav_buffer = io.BytesIO()
        with wave.open(wav_buffer, 'wb') as wav_file:
            wav_file.setnchannels(channels)
            wav_file.setsampwidth(sample_width)
            wav_file.setframerate(sample_rate)
            wav_file.writeframes(pcm_data)
        
        wav_buffer.seek(0)
        return wav_buffer.read()
    
    def _init_grpc_connection(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è gRPC —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –¥–ª—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π —Å–∫–æ—Ä–æ—Å—Ç–∏"""
        try:
            # –°–æ–∑–¥–∞–µ–º –∑–∞—â–∏—â–µ–Ω–Ω–æ–µ gRPC —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–µ–π
            credentials = grpc.ssl_channel_credentials()
            self.grpc_channel = grpc.secure_channel(
                'tts.api.cloud.yandex.net:443', 
                credentials,
                options=[
                    ('grpc.keepalive_time_ms', 10000),
                    ('grpc.keepalive_timeout_ms', 5000),
                    ('grpc.keepalive_permit_without_calls', True),
                    ('grpc.http2.max_pings_without_data', 0),
                    ('grpc.http2.min_time_between_pings_ms', 10000),
                ]
            )
            self.tts_stub = tts_service_pb2_grpc.SynthesizerStub(self.grpc_channel)
            logger.info("‚úÖ gRPC —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å Yandex TTS —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")
        except Exception as e:
            logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å gRPC —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ: {e}")
            logger.info("üîÑ –ë—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è HTTP API –∫–∞–∫ fallback")
            self.grpc_channel = None
            self.tts_stub = None
    
    def _get_fresh_iam_token(self) -> str:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–≤–µ–∂–µ–≥–æ IAM —Ç–æ–∫–µ–Ω–∞ –∏–∑ OAuth —Ç–æ–∫–µ–Ω–∞ —Å –∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ–º"""
        import time
        import requests
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∏—Å—Ç–µ–∫ –ª–∏ —Ç–æ–∫–µ–Ω (12 —á–∞—Å–æ–≤ = 43200 —Å–µ–∫, –æ–±–Ω–æ–≤–ª—è–µ–º –∑–∞ —á–∞—Å –¥–æ –∏—Å—Ç–µ—á–µ–Ω–∏—è)
        if self.iam_token and time.time() < (self.iam_token_expires - 3600):
            return self.iam_token
        
        url = "https://iam.api.cloud.yandex.net/iam/v1/tokens"
        headers = {"Content-Type": "application/json"}
        data = {"yandexPassportOauthToken": self.oauth_token}
        
        try:
            response = requests.post(url, headers=headers, json=data, timeout=5)
            response.raise_for_status()
            
            token_data = response.json()
            self.iam_token = token_data["iamToken"]
            
            # –¢–æ–∫–µ–Ω –¥–µ–π—Å—Ç–≤—É–µ—Ç 12 —á–∞—Å–æ–≤
            import time
            self.iam_token_expires = time.time() + 43200
            
            logger.info("üîë IAM —Ç–æ–∫–µ–Ω –æ–±–Ω–æ–≤–ª–µ–Ω")
            return self.iam_token
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è IAM —Ç–æ–∫–µ–Ω–∞: {e}")
            raise
    
    async def text_to_speech_grpc(self, text: str, filename_prefix: str = "tts") -> str:
        """
        –°–≤–µ—Ä—Ö–±—ã—Å—Ç—Ä—ã–π —Å–∏–Ω—Ç–µ–∑ —Ä–µ—á–∏ —á–µ—Ä–µ–∑ gRPC streaming (1-1.5 —Å–µ–∫)
        """
        if not self.tts_stub:
            logger.warning("‚ö†Ô∏è gRPC –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º HTTP fallback")
            return await self.text_to_speech_http(text, filename_prefix)
        
        try:
            # –ü–æ–ª—É—á–∞–µ–º —Å–≤–µ–∂–∏–π IAM —Ç–æ–∫–µ–Ω
            iam_token = self._get_fresh_iam_token()
            
            # –°–æ–∑–¥–∞–µ–º –∑–∞–ø—Ä–æ—Å –¥–ª—è gRPC streaming —Å –ü–†–ê–í–ò–õ–¨–ù–´–ú —Ñ–æ—Ä–º–∞—Ç–æ–º –¥–ª—è Asterisk
            request = tts_pb2.UtteranceSynthesisRequest(
                text=text,
                output_audio_spec=tts_pb2.AudioFormatOptions(
                    # ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: RawAudio —Å LINEAR16_PCM 8000Hz –¥–ª—è Asterisk
                    raw_audio=tts_pb2.RawAudio(
                        audio_encoding=tts_pb2.RawAudio.AudioEncoding.LINEAR16_PCM,
                        sample_rate_hertz=8000  # –ö–†–ò–¢–ò–ß–ù–û: 8kHz –¥–ª—è —Ç–µ–ª–µ—Ñ–æ–Ω–∏–∏
                    )
                ),
                hints=[
                    tts_pb2.Hints(
                        voice="jane",  # –ë—ã—Å—Ç—Ä—ã–π –≥–æ–ª–æ—Å
                        speed=1.2      # –£—Å–∫–æ—Ä–µ–Ω–Ω–∞—è —Ä–µ—á—å
                    )
                ],
                loudness_normalization_type=tts_pb2.UtteranceSynthesisRequest.LoudnessNormalizationType.LUFS
            )
            
            # –í—ã–ø–æ–ª–Ω—è–µ–º gRPC streaming –∑–∞–ø—Ä–æ—Å
            metadata = [
                ('authorization', f'Bearer {iam_token}'),
                ('x-folder-id', self.folder_id)  # –ò–°–ü–†–ê–í–õ–ï–ù–û: –¥–æ–±–∞–≤–ª—è–µ–º folder_id
            ]
            
            logger.info(f"üöÄ gRPC TTS –∑–∞–ø—Ä–æ—Å: {text[:50]}...")
            
            # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Ç–æ–∫ raw PCM –¥–∞–Ω–Ω—ã—Ö
            response_stream = self.tts_stub.UtteranceSynthesis(request, metadata=metadata)
            
            # –°–æ–±–∏—Ä–∞–µ–º raw PCM —á–∞–Ω–∫–∏
            pcm_chunks = []
            for response in response_stream:
                if response.audio_chunk.data:
                    pcm_chunks.append(response.audio_chunk.data)
            
            if not pcm_chunks:
                logger.error("‚ùå –ü—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç –æ—Ç gRPC TTS")
                return None
            
            # –û–±—ä–µ–¥–∏–Ω—è–µ–º raw PCM –¥–∞–Ω–Ω—ã–µ
            raw_pcm = b''.join(pcm_chunks)
            
            # ‚úÖ –ö–†–ò–¢–ò–ß–ù–û: –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º raw PCM –≤ WAV –¥–ª—è Asterisk
            audio_data = self._create_wav_from_pcm(raw_pcm, sample_rate=8000, channels=1, sample_width=2)
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≥–æ—Ç–æ–≤—ã–π WAV —Ñ–∞–π–ª 8kHz
            cache_key = hashlib.md5(text.encode()).hexdigest()
            wav_filename = f"{filename_prefix}_{cache_key}.wav"
            wav_path = os.path.join(self.asterisk_sounds_dir, wav_filename)
            
            with open(wav_path, "wb") as f:
                f.write(audio_data)
            
            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞ –¥–ª—è Asterisk
            subprocess.run(["chown", "asterisk:asterisk", wav_path], check=True, capture_output=True)
            subprocess.run(["chmod", "644", wav_path], check=True, capture_output=True)
            
            logger.info(f"‚ö° gRPC TTS –≥–æ—Ç–æ–≤ (8kHz WAV): {wav_filename}, —Ä–∞–∑–º–µ—Ä={len(audio_data)} bytes")
            
            # –ö–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–∫–ª—é—á–µ–Ω–æ –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
            # if len(text) < 100:
            #     self.tts_cache[hashlib.md5(text.encode()).hexdigest()] = wav_path
            
            return wav_path
            
        except grpc.RpcError as e:
            logger.error(f"‚ùå gRPC –æ—à–∏–±–∫–∞: {e.code()}: {e.details()}")
            # Fallback –Ω–∞ HTTP API
            return await self.text_to_speech_http(text, filename_prefix)
        except Exception as e:
            logger.error(f"‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ gRPC TTS: {e}")
            # Fallback –Ω–∞ HTTP API
            return await self.text_to_speech_http(text, filename_prefix)
    
    async def text_to_speech_http(self, text: str, filename_prefix: str = "tts") -> str:
        """
        Fallback HTTP API –¥–ª—è —Å–∏–Ω—Ç–µ–∑–∞ —Ä–µ—á–∏
        """
        import requests
        
        try:
            # –ü–æ–ª—É—á–∞–µ–º —Å–≤–µ–∂–∏–π IAM —Ç–æ–∫–µ–Ω
            iam_token = self._get_fresh_iam_token()
            
            # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ–π —Å–∫–æ—Ä–æ—Å—Ç–∏
            url = "https://tts.api.cloud.yandex.net/speech/v1/tts:synthesize"
            headers = {"Authorization": f"Bearer {iam_token}"}
            
            data = {
                "text": text,
                "lang": "ru-RU",
                "folderId": self.folder_id,
                "voice": "jane",  # –ë—ã—Å—Ç—Ä—ã–π –≥–æ–ª–æ—Å
                "emotion": "neutral",
                "speed": "1.2",  # –£—Å–∫–æ—Ä–µ–Ω–Ω–∞—è —Ä–µ—á—å
                "format": "lpcm",
                "sampleRateHertz": "8000"
            }
            
            logger.info(f"üé§ HTTP TTS –∑–∞–ø—Ä–æ—Å: {text[:50]}...")
            
            # –í—ã–ø–æ–ª–Ω—è–µ–º –∑–∞–ø—Ä–æ—Å –∫ TTS API
            response = requests.post(url, headers=headers, data=data, timeout=10)
            response.raise_for_status()
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º raw LPCM –¥–∞–Ω–Ω—ã–µ
            cache_key = hashlib.md5(text.encode()).hexdigest()
            raw_filename = f"{filename_prefix}_{cache_key}.raw"
            raw_path = os.path.join("/tmp", raw_filename)
            
            with open(raw_path, "wb") as f:
                f.write(response.content)
            
            # –í–û–°–°–¢–ê–ù–û–í–õ–ï–ù–û: –û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–∞—è sox –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –∏–∑ –∞—Ä—Ö–∏–≤–Ω–æ–π –≤–µ—Ä—Å–∏–∏
            wav_filename = f"{filename_prefix}_{cache_key}.wav"
            wav_path = os.path.join(self.asterisk_sounds_dir, wav_filename)
            
            # sox –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è: raw LPCM -> 8kHz mono WAV
            sox_cmd = [
                "sox", "-t", "raw", "-r", "8000", "-e", "signed-integer", "-b", "16", "-c", "1",
                raw_path, "-t", "wav", wav_path
            ]
            
            subprocess.run(sox_cmd, check=True, capture_output=True)
            
            # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π raw —Ñ–∞–π–ª
            os.remove(raw_path)
            
            logger.info(f"‚úÖ HTTP TTS –≥–æ—Ç–æ–≤: {wav_filename}")
            
            # –ö–†–ò–¢–ò–ß–ï–°–ö–û–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –û—Ç–∫–ª—é—á–∞–µ–º –∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
            # –ö–µ—à–∏—Ä—É–µ–º –∫–æ—Ä–æ—Ç–∫–∏–µ —Ñ—Ä–∞–∑—ã
            if False:  # –û—Ç–∫–ª—é—á–∞–µ–º –∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ
                self.tts_cache[cache_key] = wav_path
            
            return wav_path
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ HTTP TTS: {e}")
            return None
    
    async def text_to_speech(self, text: str, filename: str) -> Optional[str]:
        """
        –û—Å–Ω–æ–≤–Ω–æ–π –º–µ—Ç–æ–¥ —Å–∏–Ω—Ç–µ–∑–∞ —Ä–µ—á–∏ - –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≤—ã–±–∏—Ä–∞–µ—Ç –ª—É—á—à–∏–π —Å–ø–æ—Å–æ–±
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏–º—è —Ñ–∞–π–ª–∞ –±–µ–∑ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º –∫–æ–¥–æ–º
        """
        if not text.strip():
            logger.warning("‚ö†Ô∏è –ü—É—Å—Ç–æ–π —Ç–µ–∫—Å—Ç –¥–ª—è TTS")
            return None
        
        # –ö–†–ò–¢–ò–ß–ï–°–ö–û–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –û—Ç–∫–ª—é—á–∞–µ–º –∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–µ—à –¥–ª—è –∫–æ—Ä–æ—Ç–∫–∏—Ö —Ñ—Ä–∞–∑
        cache_key = hashlib.md5(text.encode()).hexdigest()
        if False:  # –û—Ç–∫–ª—é—á–∞–µ–º –∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ
            cached_path = self.tts_cache[cache_key]
            if os.path.exists(cached_path):
                logger.info(f"üéØ –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫–µ—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–π TTS –¥–ª—è: {text[:30]}...")
                # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∏–º—è —Ñ–∞–π–ª–∞ –±–µ–∑ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è –∏ –ø—É—Ç–∏
                return os.path.splitext(os.path.basename(cached_path))[0]
        
        # –ö–†–ò–¢–ò–ß–ï–°–ö–û–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –∏—Å–ø–æ–ª—å–∑—É–µ–º HTTP TTS (–∫–∞–∫ –±—ã–ª–æ –¥–æ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–π)
        # –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç: HTTP API (—Ä–∞–±–æ—á–∏–π) -> gRPC streaming (–ø—Ä–æ–±–ª–µ–º–Ω—ã–π)
        if False:  # –û—Ç–∫–ª—é—á–∞–µ–º gRPC –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
            full_path = await self.text_to_speech_grpc(text, filename)
        else:
            full_path = await self.text_to_speech_http(text, filename)
        
        if full_path and os.path.exists(full_path):
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∏–º—è —Ñ–∞–π–ª–∞ –±–µ–∑ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è –∏ –ø—É—Ç–∏ –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
            # –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º –∫–∞–∫ .wav, —Ç–∞–∫ –∏ .gsm, .ulaw, .alaw —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è
            filename = os.path.basename(full_path)
            if filename.endswith('.gsm'):
                return filename[:-4]  # —É–±–∏—Ä–∞–µ–º .gsm
            elif filename.endswith('.ulaw'):
                return filename[:-5]  # —É–±–∏—Ä–∞–µ–º .ulaw
            elif filename.endswith('.alaw'):
                return filename[:-5]  # —É–±–∏—Ä–∞–µ–º .alaw
            elif filename.endswith('.wav'):
                return filename[:-4]  # —É–±–∏—Ä–∞–µ–º .wav
            else:
                return filename
        else:
            return None
    
    def __del__(self):
        """–ó–∞–∫—Ä—ã–≤–∞–µ–º gRPC —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –ø—Ä–∏ —É–Ω–∏—á—Ç–æ–∂–µ–Ω–∏–∏ –æ–±—ä–µ–∫—Ç–∞"""
        if self.grpc_channel:
            self.grpc_channel.close()

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä —Å–µ—Ä–≤–∏—Å–∞
_yandex_tts_service = None

def get_yandex_tts_service() -> YandexTTSService:
    """–§–∞–±—Ä–∏–∫–∞ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Å–≤–µ—Ä—Ö–±—ã—Å—Ç—Ä–æ–≥–æ TTS —Å–µ—Ä–≤–∏—Å–∞"""
    global _yandex_tts_service
    if _yandex_tts_service is None:
        _yandex_tts_service = YandexTTSService()
    return _yandex_tts_service