"""
Yandex SpeechKit ASR (Automatic Speech Recognition) —Å–µ—Ä–≤–∏—Å –¥–ª—è —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è —Ä–µ—á–∏.
–ò—Å–ø–æ–ª—å–∑—É–µ—Ç Yandex SpeechKit API –¥–ª—è –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è –∞—É–¥–∏–æ –≤ —Ç–µ–∫—Å—Ç.
"""
import os
import logging
import aiohttp
import aiofiles
import json
from typing import Optional
from datetime import datetime, timedelta
from dotenv import load_dotenv

load_dotenv()

logger = logging.getLogger(__name__)

class YandexASRService:
    def __init__(self):
        self.oauth_token = os.getenv("OAUTH_TOKEN")
        self.folder_id = os.getenv("YANDEX_FOLDER_ID")
        self.iam_token = None
        self.token_expires_at = None
        
        if not self.oauth_token:
            raise ValueError("OAUTH_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è")
        if not self.folder_id:
            raise ValueError("YANDEX_FOLDER_ID –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è")
        
        self.language = os.getenv("ASR_LANGUAGE", "ru-RU")
        self.model = os.getenv("ASR_MODEL", "general")
        self.base_url = "https://stt.api.cloud.yandex.net/speech/v1/stt:recognize"
        
        logger.info(f"Yandex ASR Service –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω: language={self.language}, model={self.model}")
        logger.info("üîÑ IAM —Ç–æ–∫–µ–Ω –±—É–¥–µ—Ç –æ–±–Ω–æ–≤–ª—è—Ç—å—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∫–∞–∂–¥—ã–µ 12 —á–∞—Å–æ–≤")

    async def _get_iam_token(self):
        """–ü–æ–ª—É—á–∞–µ—Ç –∞–∫—Ç—É–∞–ª—å–Ω—ã–π IAM —Ç–æ–∫–µ–Ω, –æ–±–Ω–æ–≤–ª—è—è –µ–≥–æ –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏"""
        if self.token_needs_refresh():
            await self._refresh_iam_token()
        return self.iam_token

    def token_needs_refresh(self):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –Ω—É–∂–Ω–æ –ª–∏ –æ–±–Ω–æ–≤–∏—Ç—å IAM —Ç–æ–∫–µ–Ω"""
        if not self.iam_token or not self.token_expires_at:
            return True
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞ 30 –º–∏–Ω—É—Ç –¥–æ –∏—Å—Ç–µ—á–µ–Ω–∏—è
        refresh_time = self.token_expires_at - timedelta(minutes=30)
        
        # –ü—Ä–∏–≤–æ–¥–∏–º –∫ –æ–¥–Ω–æ–º—É —á–∞—Å–æ–≤–æ–º—É –ø–æ—è—Å—É –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
        now = datetime.now()
        if self.token_expires_at.tzinfo is not None:
            # –ï—Å–ª–∏ —Ç–æ–∫–µ–Ω —Å —á–∞—Å–æ–≤—ã–º –ø–æ—è—Å–æ–º, –ø—Ä–∏–≤–æ–¥–∏–º —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è –∫ UTC
            from datetime import timezone
            now = now.replace(tzinfo=timezone.utc)
        
        return now >= refresh_time

    async def _refresh_iam_token(self):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç IAM —Ç–æ–∫–µ–Ω –∏–∑ OAuth —Ç–æ–∫–µ–Ω–∞"""
        try:
            url = "https://iam.api.cloud.yandex.net/iam/v1/tokens"
            payload = {"yandexPassportOauthToken": self.oauth_token}
            headers = {"Content-Type": "application/json"}
            
            async with aiohttp.ClientSession() as session:
                async with session.post(url, json=payload, headers=headers) as response:
                    if response.status == 200:
                        data = await response.json()
                        self.iam_token = data["iamToken"]
                        
                        # –¢–æ–∫–µ–Ω –¥–µ–π—Å—Ç–≤—É–µ—Ç 12 —á–∞—Å–æ–≤
                        expires_at = data.get("expiresAt")
                        if expires_at:
                            self.token_expires_at = datetime.fromisoformat(expires_at.replace('Z', '+00:00'))
                        else:
                            self.token_expires_at = datetime.now() + timedelta(hours=12)
                        
                        logger.info(f"‚úÖ IAM —Ç–æ–∫–µ–Ω –æ–±–Ω–æ–≤–ª–µ–Ω! –î–µ–π—Å—Ç–≤—É–µ—Ç –¥–æ: {self.token_expires_at}")
                    else:
                        error_text = await response.text()
                        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è IAM —Ç–æ–∫–µ–Ω–∞: {response.status} - {error_text}")
                        raise Exception(f"IAM token refresh failed: {response.status}")
                        
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è IAM —Ç–æ–∫–µ–Ω–∞: {e}")
            raise

    async def speech_to_text(self, audio_path: str, prompt: Optional[str] = None) -> str:
        """
        –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç –∞—É–¥–∏–æ —Ñ–∞–π–ª –≤ —Ç–µ–∫—Å—Ç –∏—Å–ø–æ–ª—å–∑—É—è Yandex SpeechKit.
        
        Args:
            audio_path: –ü—É—Ç—å –∫ –∞—É–¥–∏–æ —Ñ–∞–π–ª—É
            prompt: –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –ø—Ä–æ–º–ø—Ç –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è –∫–∞—á–µ—Å—Ç–≤–∞ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è
            
        Returns:
            str: –†–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç
        """
        if not os.path.exists(audio_path):
            raise FileNotFoundError(f"–ê—É–¥–∏–æ —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {audio_path}")
        
        try:
            # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—ã–π IAM —Ç–æ–∫–µ–Ω (—Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ–º)
            iam_token = await self._get_iam_token()
            
            # Yandex SpeechKit STT API endpoint
            url = "https://stt.api.cloud.yandex.net/speech/v1/stt:recognize"
            
            # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏
            headers = {
                "Authorization": f"Bearer {iam_token}",
                "x-folder-id": self.folder_id,
                "Content-Type": "audio/x-pcm;bit=16;rate=8000"
            }
            
            # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
            params = {
                "lang": self.language,
                "format": "lpcm",
                "sampleRateHertz": "8000",
                "encoding": "LINEAR16_PCM",
                "folderId": self.folder_id
            }
            
            if prompt:
                params["profanityFilter"] = "true"
                params["literateText"] = "true"
            
            # –ß–∏—Ç–∞–µ–º –∞—É–¥–∏–æ —Ñ–∞–π–ª
            async with aiofiles.open(audio_path, 'rb') as f:
                audio_data = await f.read()
            
            logger.info(f"üé§ Yandex ASR –∑–∞–ø—Ä–æ—Å: {len(audio_data)} bytes, language={self.language}")
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –∫ Yandex SpeechKit
            async with aiohttp.ClientSession() as session:
                async with session.post(
                    url,
                    headers=headers,
                    params=params,
                    data=audio_data,
                    timeout=aiohttp.ClientTimeout(total=30)
                ) as response:
                    
                    if response.status == 200:
                        result = await response.json()
                        recognized_text = result.get("result", "").strip()
                        
                        if recognized_text:
                            logger.info(f"‚úÖ Yandex ASR —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–æ: '{recognized_text}'")
                            return recognized_text
                        else:
                            logger.warning("‚ö†Ô∏è Yandex ASR –≤–µ—Ä–Ω—É–ª –ø—É—Å—Ç–æ–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç")
                            return ""
                    else:
                        error_text = await response.text()
                        logger.error(f"‚ùå Yandex ASR –æ—à–∏–±–∫–∞ {response.status}: {error_text}")
                        raise Exception(f"Yandex ASR API error: {response.status} - {error_text}")
                        
        except aiohttp.ClientError as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ HTTP –∑–∞–ø—Ä–æ—Å–∞ –∫ Yandex ASR: {e}")
            raise Exception(f"Yandex ASR HTTP error: {e}")
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ Yandex ASR: {e}")
            raise Exception(f"Yandex ASR error: {e}")

    async def test_connection(self) -> bool:
        """
        –¢–µ—Å—Ç–∏—Ä—É–µ—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å Yandex SpeechKit.
        
        Returns:
            bool: True –µ—Å–ª–∏ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Ä–∞–±–æ—Ç–∞–µ—Ç
        """
        try:
            # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π –∞—É–¥–∏–æ —Ñ–∞–π–ª (1 —Å–µ–∫—É–Ω–¥–∞ —Ç–∏—à–∏–Ω—ã)
            test_audio_path = "/tmp/test_yandex_asr.wav"
            
            # –°–æ–∑–¥–∞–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π WAV —Ñ–∞–π–ª —Å –∑–∞–≥–æ–ª–æ–≤–∫–∞–º–∏
            wav_header = self._create_wav_header(8000, 8000, 1, 16)  # 1 —Å–µ–∫—É–Ω–¥–∞, 8kHz, –º–æ–Ω–æ, 16-bit
            silence_data = b'\x00' * 8000  # 1 —Å–µ–∫—É–Ω–¥–∞ —Ç–∏—à–∏–Ω—ã
            
            async with aiofiles.open(test_audio_path, 'wb') as f:
                await f.write(wav_header + silence_data)
            
            # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ
            result = await self.speech_to_text(test_audio_path)
            
            # –û—á–∏—â–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª
            if os.path.exists(test_audio_path):
                os.remove(test_audio_path)
            
            logger.info(f"‚úÖ Yandex ASR —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Ä–∞–±–æ—Ç–∞–µ—Ç, —Ä–µ–∑—É–ª—å—Ç–∞—Ç: '{result}'")
            return True
            
        except Exception as e:
            logger.error(f"‚ùå Yandex ASR —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç: {e}")
            return False

    def _create_wav_header(self, sample_rate: int, data_size: int, channels: int, bits_per_sample: int) -> bytes:
        """–°–æ–∑–¥–∞–µ—Ç WAV –∑–∞–≥–æ–ª–æ–≤–æ–∫ –¥–ª—è –∞—É–¥–∏–æ —Ñ–∞–π–ª–∞."""
        byte_rate = sample_rate * channels * bits_per_sample // 8
        block_align = channels * bits_per_sample // 8
        
        header = b'RIFF'
        header += (data_size + 36).to_bytes(4, 'little')  # ChunkSize
        header += b'WAVE'
        header += b'fmt '
        header += (16).to_bytes(4, 'little')  # Subchunk1Size
        header += (1).to_bytes(2, 'little')   # AudioFormat (PCM)
        header += channels.to_bytes(2, 'little')
        header += sample_rate.to_bytes(4, 'little')
        header += byte_rate.to_bytes(4, 'little')
        header += block_align.to_bytes(2, 'little')
        header += bits_per_sample.to_bytes(2, 'little')
        header += b'data'
        header += data_size.to_bytes(4, 'little')
        
        return header

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä —Å–µ—Ä–≤–∏—Å–∞
yandex_asr_service = None

def get_yandex_asr_service() -> YandexASRService:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≥–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä Yandex ASR —Å–µ—Ä–≤–∏—Å–∞."""
    global yandex_asr_service
    if yandex_asr_service is None:
        yandex_asr_service = YandexASRService()
    return yandex_asr_service

# –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
if __name__ == "__main__":
    import asyncio
    
    async def test_yandex_asr():
        service = YandexASRService()
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
        if await service.test_connection():
            print("‚úÖ Yandex ASR —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Ä–∞–±–æ—Ç–∞–µ—Ç")
        else:
            print("‚ùå Yandex ASR —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç")
    
    asyncio.run(test_yandex_asr())
