"""
TTS (Text-to-Speech) —Å–µ—Ä–≤–∏—Å –¥–ª—è –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è —Ç–µ–∫—Å—Ç–∞ –≤ –∞—É–¥–∏–æ —Ñ–∞–π–ª—ã.
–ò—Å–ø–æ–ª—å–∑—É–µ—Ç OpenAI TTS API –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ä–µ—á–∏.
"""
import os
import logging
import aiohttp
import aiofiles
import subprocess
import asyncio
from typing import Optional
from dotenv import load_dotenv

load_dotenv()

logger = logging.getLogger(__name__)

class TTSService:
    def __init__(self):
        self.api_key = os.getenv("OPENAI_API_KEY")
        if not self.api_key:
            raise ValueError("OPENAI_API_KEY –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è")
        
        self.voice = os.getenv("TTS_VOICE", "alloy")  # alloy, echo, fable, onyx, nova, shimmer
        self.model = os.getenv("TTS_MODEL", "tts-1")  # tts-1 –∏–ª–∏ tts-1-hd
        self.audio_dir = os.getenv("TTS_AUDIO_DIR", "data/audio")
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –ø—É—Ç—å Asterisk –¥–ª—è –∑–≤—É–∫–æ–≤
        self.asterisk_sounds_dir = "/var/lib/asterisk/sounds/ru"
        
        # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –¥–ª—è –∞—É–¥–∏–æ —Ñ–∞–π–ª–æ–≤
        os.makedirs(self.audio_dir, exist_ok=True)
        os.makedirs(self.asterisk_sounds_dir, exist_ok=True)
        
        logger.info(f"TTS Service –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω: voice={self.voice}, model={self.model}")

    async def text_to_speech(self, text: str, filename: Optional[str] = None) -> str:
        """
        –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç —Ç–µ–∫—Å—Ç –≤ —Ä–µ—á—å, –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç –¥–ª—è Asterisk –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏–º—è —Ñ–∞–π–ª–∞ –¥–ª—è ARI.
        
        Args:
            text: –¢–µ–∫—Å—Ç –¥–ª—è –æ–∑–≤—É—á–∏–≤–∞–Ω–∏—è
            filename: –ò–º—è —Ñ–∞–π–ª–∞ (–±–µ–∑ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è). –ï—Å–ª–∏ –Ω–µ —É–∫–∞–∑–∞–Ω–æ, –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏
            
        Returns:
            str: –ò–º—è —Ñ–∞–π–ª–∞ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ ARI (–±–µ–∑ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è –∏ –ø—É—Ç–∏)
        """
        if not text.strip():
            raise ValueError("–¢–µ–∫—Å—Ç –¥–ª—è –æ–∑–≤—É—á–∏–≤–∞–Ω–∏—è –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º")
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∏–º—è —Ñ–∞–π–ª–∞, –µ—Å–ª–∏ –Ω–µ —É–∫–∞–∑–∞–Ω–æ
        if not filename:
            import hashlib
            text_hash = hashlib.md5(text.encode()).hexdigest()[:8]
            filename = f"tts_{text_hash}"
        
        # –ü—É—Ç–∏ –∫ —Ñ–∞–π–ª–∞–º: —Å–æ–∑–¥–∞–µ–º —Ç–æ–ª—å–∫–æ WAV –¥–ª—è Asterisk
        temp_audio_path = os.path.join(self.audio_dir, f"{filename}.wav")
        dest_wav_path = os.path.join(self.asterisk_sounds_dir, f"{filename}.wav")
        
        # –ï—Å–ª–∏ —Ñ–∞–π–ª —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ Asterisk, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∏–º—è
        if os.path.exists(dest_wav_path):
            logger.info(f"–ê—É–¥–∏–æ —Ñ–∞–π–ª —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ Asterisk: {dest_wav_path}")
            return filename
        
        try:
            # 1. –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ä–µ—á—å —á–µ—Ä–µ–∑ OpenAI TTS API
            url = "https://api.openai.com/v1/audio/speech"
            headers = {
                "Authorization": f"Bearer {self.api_key}",
                "Content-Type": "application/json"
            }
            data = {
                "model": self.model,
                "input": text,
                "voice": self.voice,
                "response_format": "wav"
            }
            
            logger.info(f"–ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ä–µ—á—å –¥–ª—è —Ç–µ–∫—Å—Ç–∞: '{text[:50]}...'")
            
            async with aiohttp.ClientSession() as session:
                async with session.post(url, headers=headers, json=data) as response:
                    if response.status == 200:
                        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
                        async with aiofiles.open(temp_audio_path, 'wb') as f:
                            async for chunk in response.content.iter_chunked(8192):
                                await f.write(chunk)
                        
                        logger.info(f"‚úÖ –í—Ä–µ–º–µ–Ω–Ω—ã–π –∞—É–¥–∏–æ —Ñ–∞–π–ª —Å–æ–∑–¥–∞–Ω: {temp_audio_path}")
                    else:
                        error_text = await response.text()
                        logger.error(f"‚ùå –û—à–∏–±–∫–∞ TTS API: {response.status} - {error_text}")
                        raise Exception(f"TTS API error: {response.status} - {error_text}")
            
            # 2. –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –¥–ª—è Asterisk (WAV 8kHz mono)
            await self._convert_wav(temp_audio_path, dest_wav_path)
            
            logger.info(f"‚úÖ –ê—É–¥–∏–æ –≥–æ—Ç–æ–≤–æ –¥–ª—è Asterisk: {filename}")
            return filename
                        
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ä–µ—á–∏: {e}", exc_info=True)
            raise

    async def _convert_wav(self, input_path: str, output_path: str):
        """–ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç –≤—Ä–µ–º–µ–Ω–Ω—ã–π WAV –≤ WAV 8kHz mono –¥–ª—è Asterisk."""
        try:
            # –ö–æ–º–∞–Ω–¥–∞ sox –¥–ª—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ –≤ WAV 8kHz mono
            # –£–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã - Asterisk —Å–∞–º —Ä–∞–∑–±–µ—Ä–µ—Ç—Å—è —Å —Ñ–æ—Ä–º–∞—Ç–æ–º
            cmd = [
                "sox", input_path, 
                "-r", "8000",      # Sample rate 8kHz
                "-c", "1",         # Mono
                output_path
            ]
            
            logger.info(f"–ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ WAV: {input_path} ‚Üí {output_path}")
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º sox –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ
            process = await asyncio.create_subprocess_exec(
                *cmd,
                stdout=asyncio.subprocess.PIPE,
                stderr=asyncio.subprocess.PIPE
            )
            
            stdout, stderr = await process.communicate()
            
            if process.returncode == 0:
                logger.info(f"‚úÖ WAV –≥–æ—Ç–æ–≤: {output_path}")
                
                # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
                if os.path.exists(input_path):
                    os.remove(input_path)
                    
            else:
                error_msg = stderr.decode() if stderr else "Unknown error"
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ (WAV) sox: {error_msg}")
                raise Exception(f"Sox conversion failed (wav): {error_msg}")
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ WAV: {e}")
            raise

    async def cleanup_old_files(self, max_files: int = 100):
        """
        –£–¥–∞–ª—è–µ—Ç —Å—Ç–∞—Ä—ã–µ –∞—É–¥–∏–æ —Ñ–∞–π–ª—ã, –æ—Å—Ç–∞–≤–ª—è—è —Ç–æ–ª—å–∫–æ max_files —Å–∞–º—ã—Ö –Ω–æ–≤—ã—Ö.
        """
        try:
            files = []
            for filename in os.listdir(self.audio_dir):
                if filename.endswith('.wav'):
                    filepath = os.path.join(self.audio_dir, filename)
                    mtime = os.path.getmtime(filepath)
                    files.append((filepath, mtime))
            
            # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –≤—Ä–µ–º–µ–Ω–∏ –º–æ–¥–∏—Ñ–∏–∫–∞—Ü–∏–∏ (–Ω–æ–≤—ã–µ –ø–µ—Ä–≤—ã–º–∏)
            files.sort(key=lambda x: x[1], reverse=True)
            
            # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ —Ñ–∞–π–ª—ã
            for filepath, _ in files[max_files:]:
                os.remove(filepath)
                logger.info(f"üóëÔ∏è –£–¥–∞–ª–µ–Ω —Å—Ç–∞—Ä—ã–π –∞—É–¥–∏–æ —Ñ–∞–π–ª: {filepath}")
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ —Å—Ç–∞—Ä—ã—Ö —Ñ–∞–π–ª–æ–≤: {e}")

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä —Å–µ—Ä–≤–∏—Å–∞
tts_service = None

def get_tts_service() -> TTSService:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≥–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä TTS —Å–µ—Ä–≤–∏—Å–∞."""
    global tts_service
    if tts_service is None:
        tts_service = TTSService()
    return tts_service

# –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
if __name__ == "__main__":
    import asyncio
    
    async def test_tts():
        service = TTSService()
        
        test_text = "–ü—Ä–∏–≤–µ—Ç! –≠—Ç–æ —Ç–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–±–æ—Ç—ã TTS —Å–µ—Ä–≤–∏—Å–∞."
        
        try:
            audio_path = await service.text_to_speech(test_text, "test_greeting")
            print(f"‚úÖ –¢–µ—Å—Ç –ø—Ä–æ–π–¥–µ–Ω! –ê—É–¥–∏–æ —Ñ–∞–π–ª: {audio_path}")
        except Exception as e:
            print(f"‚ùå –¢–µ—Å—Ç –Ω–µ –ø—Ä–æ–π–¥–µ–Ω: {e}")
    
    asyncio.run(test_tts())
