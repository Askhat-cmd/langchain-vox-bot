"""
TTS Adapter - –£–º–Ω—ã–π –∞–¥–∞–ø—Ç–µ—Ä —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º fallback
–ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ –¥–ª—è –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è 1.1 —Å–µ–∫—É–Ω–¥—ã –æ—Ç–≤–µ—Ç–∞
"""

import asyncio
import time
import logging
from typing import Optional, Dict, Any

from .yandex_grpc_tts import YandexGrpcTTS
from .yandex_tts_service import YandexTTSService

logger = logging.getLogger(__name__)

class TTSAdapter:
    """
    –£–º–Ω—ã–π TTS –∞–¥–∞–ø—Ç–µ—Ä —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º fallback
    - Primary: gRPC TTS (–±—ã—Å—Ç—Ä—ã–π, <250–º—Å)
    - Fallback: HTTP TTS (–Ω–∞–¥–µ–∂–Ω—ã–π, 700–º—Å)
    """
    
    def __init__(self):
        self.grpc_tts = YandexGrpcTTS()
        self.http_tts = YandexTTSService()  # –°—É—â–µ—Å—Ç–≤—É—é—â–∏–π HTTP TTS
        self.grpc_healthy = True
        self.fallback_count = 0
        self.success_count = 0
        
        # –ú–µ—Ç—Ä–∏–∫–∏ –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
        self.metrics = {
            "grpc_success_count": 0,
            "grpc_error_count": 0,
            "http_fallback_count": 0,
            "grpc_latency_sum": 0,
            "grpc_latency_count": 0
        }
        
        logger.info("üöÄ TTSAdapter –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω —Å gRPC + HTTP fallback")
        
    async def initialize(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –æ–±–æ–∏—Ö TTS —Å–µ—Ä–≤–∏—Å–æ–≤"""
        try:
            await self.grpc_tts.initialize()
            logger.info("‚úÖ TTSAdapter initialized with gRPC + HTTP fallback")
        except Exception as e:
            logger.error(f"‚ùå gRPC TTS init failed: {e}")
            self.grpc_healthy = False
            logger.info("üîÑ TTSAdapter –±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ HTTP TTS")
        
    async def synthesize(self, text: str) -> bytes:
        """
        –£–º–Ω—ã–π —Å–∏–Ω—Ç–µ–∑ —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º fallback
        """
        if self.grpc_healthy:
            try:
                start_time = time.time()
                audio_data = await self.grpc_tts.synthesize_chunk_fast(text)
                elapsed = time.time() - start_time
                
                # –û–±–Ω–æ–≤–ª—è–µ–º –º–µ—Ç—Ä–∏–∫–∏
                self.metrics["grpc_success_count"] += 1
                self.metrics["grpc_latency_sum"] += elapsed
                self.metrics["grpc_latency_count"] += 1
                self.success_count += 1
                
                # –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º –∑–¥–æ—Ä–æ–≤—å–µ gRPC
                if self.success_count % 10 == 0:
                    await self._check_grpc_health()
                
                logger.info(f"‚úÖ gRPC TTS success: {elapsed:.2f}s")
                return audio_data
                
            except Exception as e:
                logger.warning(f"gRPC TTS failed: {e}, falling back to HTTP")
                self.grpc_healthy = False
                self.metrics["grpc_error_count"] += 1
                self.fallback_count += 1
                self.metrics["http_fallback_count"] += 1
                
                # Fallback –Ω–∞ HTTP TTS
                return await self._http_fallback(text)
        else:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º HTTP TTS
            return await self._http_fallback(text)
    
    async def _http_fallback(self, text: str) -> bytes:
        """Fallback –Ω–∞ HTTP TTS"""
        try:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π HTTP TTS —Å–µ—Ä–≤–∏—Å
            # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∞—É–¥–∏–æ –¥–∞–Ω–Ω—ã—Ö
            import tempfile
            import os
            
            with tempfile.NamedTemporaryFile(suffix='.wav', delete=False) as temp_file:
                temp_path = temp_file.name
            
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∞—É–¥–∏–æ —á–µ—Ä–µ–∑ HTTP TTS
            result = await self.http_tts.text_to_speech(text, "fallback")
            
            if result:
                # –ß–∏—Ç–∞–µ–º —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ñ–∞–π–ª
                wav_path = os.path.join(self.http_tts.asterisk_sounds_dir, f"{result}.wav")
                if os.path.exists(wav_path):
                    with open(wav_path, 'rb') as f:
                        audio_data = f.read()
                    
                    # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
                    os.unlink(wav_path)
                    return audio_data
            
            logger.error("‚ùå HTTP TTS fallback failed")
            return b""
            
        except Exception as e:
            logger.error(f"‚ùå HTTP TTS fallback error: {e}")
            return b""
    
    async def _check_grpc_health(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è gRPC —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è"""
        try:
            # –ü—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
            test_audio = await self.grpc_tts.synthesize_chunk_fast("—Ç–µ—Å—Ç")
            if len(test_audio) > 0:
                self.grpc_healthy = True
                logger.info("‚úÖ gRPC TTS health check passed")
        except Exception as e:
            logger.warning(f"gRPC TTS health check failed: {e}")
            self.grpc_healthy = False
    
    def get_metrics(self) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –º–µ—Ç—Ä–∏–∫ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏"""
        total_requests = (self.metrics["grpc_success_count"] + 
                         self.metrics["grpc_error_count"] + 
                         self.metrics["http_fallback_count"])
        
        grpc_success_rate = (self.metrics["grpc_success_count"] / total_requests 
                           if total_requests > 0 else 0)
        
        avg_grpc_latency = (self.metrics["grpc_latency_sum"] / self.metrics["grpc_latency_count"] 
                          if self.metrics["grpc_latency_count"] > 0 else 0)
        
        fallback_rate = (self.metrics["http_fallback_count"] / total_requests 
                        if total_requests > 0 else 0)
        
        return {
            "grpc_success_rate": grpc_success_rate,
            "avg_grpc_latency": avg_grpc_latency,
            "fallback_rate": fallback_rate,
            "grpc_healthy": self.grpc_healthy,
            "total_requests": total_requests
        }
    
    async def synthesize_chunk_fast(self, text: str) -> Optional[bytes]:
        """
        –ë—ã—Å—Ç—Ä—ã–π —Å–∏–Ω—Ç–µ–∑ –¥–ª—è —á–∞–Ω–∫–æ–≤ —Å –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–º –Ω–∞ —Å–∫–æ—Ä–æ—Å—Ç—å
        –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è ParallelTTSProcessor –¥–ª—è –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏
        """
        try:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º gRPC –¥–ª—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π —Å–∫–æ—Ä–æ—Å—Ç–∏
            if self.grpc_healthy:
                start_time = time.time()
                audio_data = await self.grpc_tts.synthesize(text)
                latency = time.time() - start_time
                
                if audio_data:
                    self.metrics["grpc_success_count"] += 1
                    self.metrics["grpc_latency_sum"] += latency
                    self.metrics["grpc_latency_count"] += 1
                    
                    # –õ–æ–≥–∏—Ä—É–µ–º –±—ã—Å—Ç—Ä—ã–µ —á–∞–Ω–∫–∏
                    if latency < 0.5:
                        logger.info(f"‚ö° Fast chunk TTS: {latency:.3f}s for '{text[:30]}...'")
                    else:
                        logger.warning(f"üêå Slow chunk TTS: {latency:.3f}s for '{text[:30]}...'")
                    
                    return audio_data
                else:
                    raise Exception("gRPC TTS returned None")
            else:
                raise Exception("gRPC TTS not healthy")
                
        except Exception as e:
            logger.error(f"‚ùå Chunk TTS error: {e}")
            self.metrics["grpc_error_count"] += 1
            
            # Fallback –Ω–∞ HTTP TTS
            try:
                logger.info("üîÑ Chunk TTS fallback to HTTP")
                audio_data = await self.http_tts.synthesize(text)
                self.metrics["http_fallback_count"] += 1
                return audio_data
            except Exception as e2:
                logger.error(f"‚ùå HTTP fallback also failed: {e2}")
                return None

    async def close(self):
        """–ó–∞–∫—Ä—ã—Ç–∏–µ –≤—Å–µ—Ö —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π"""
        if self.grpc_tts:
            await self.grpc_tts.close()
        logger.info("‚úÖ TTSAdapter closed")

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –∞–¥–∞–ø—Ç–µ—Ä–∞
_tts_adapter = None

async def get_tts_adapter() -> TTSAdapter:
    """–§–∞–±—Ä–∏–∫–∞ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è TTS –∞–¥–∞–ø—Ç–µ—Ä–∞"""
    global _tts_adapter
    if _tts_adapter is None:
        _tts_adapter = TTSAdapter()
        await _tts_adapter.initialize()
    return _tts_adapter

