#!/usr/bin/env python3
"""
SequentialTTSProcessor - –†–ï–ê–õ–¨–ù–ê–Ø –æ–±—Ä–∞–±–æ—Ç–∫–∞ —á–∞–Ω–∫–æ–≤ —Å –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ–º —á–µ—Ä–µ–∑ ARI
–ó–∞–º–µ–Ω–∏—Ç–µ–ª—å ParallelTTSProcessor —Å –∑–∞–≥–ª—É—à–∫–∞–º–∏ –Ω–∞ —Ä–µ–∞–ª—å–Ω–æ–µ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ
"""

import asyncio
import logging
import time
from typing import Optional, Dict, Any
from datetime import datetime

logger = logging.getLogger(__name__)

class SequentialTTSProcessor:
    """
    Sequential TTS Processor —Å –†–ï–ê–õ–¨–ù–´–ú –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ–º —á–µ—Ä–µ–∑ ARI
    
    –ö–ª—é—á–µ–≤—ã–µ –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏:
    - ‚úÖ –†–µ–∞–ª—å–Ω–æ–µ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ —á–µ—Ä–µ–∑ ARI (–Ω–µ –∑–∞–≥–ª—É—à–∫–∏)
    - ‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞–Ω–∞–ª–æ–≤ –ø–µ—Ä–µ–¥ –∫–∞–∂–¥–æ–π –æ–ø–µ—Ä–∞—Ü–∏–µ–π
    - ‚úÖ –ü–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–ª—è —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏
    - ‚úÖ –ù–µ–º–µ–¥–ª–µ–Ω–Ω–æ–µ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ –∫–∞–∂–¥–æ–≥–æ —á–∞–Ω–∫–∞
    - ‚úÖ Hold/Unhold –∫–∞–Ω–∞–ª–æ–≤ –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –∑–∞–∫—Ä—ã—Ç–∏—è
    """
    
    def __init__(self, tts_service, ari_client):
        self.tts_service = tts_service
        self.ari_client = ari_client
        self.active_channels = {}  # –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤
        logger.info("üîÑ SequentialTTSProcessor –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
    
    async def process_chunk_immediate(self, channel_id: str, chunk_data: Dict[str, Any]):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —á–∞–Ω–∫ —Å —É–∂–µ —É–¥–µ—Ä–∂–∞–Ω–Ω—ã–º –∫–∞–Ω–∞–ª–æ–º"""
        try:
            chunk_text = chunk_data.get("text", "")
            chunk_index = chunk_data.get("index", 0)
            is_first = chunk_data.get("is_first", False)

            if not chunk_text:
                logger.warning(f"‚ö†Ô∏è –ü—É—Å—Ç–æ–π —Ç–µ–∫—Å—Ç –≤ —á–∞–Ω–∫–µ {chunk_index}")
                return

            logger.info(f"üöÄ Sequential processing chunk {chunk_index}: '{chunk_text[:50]}...'")

            # TTS —Å–∏–Ω—Ç–µ–∑
            tts_start = time.time()
            audio_data = await self._synthesize_chunk(chunk_text)
            tts_time = time.time() - tts_start

            if audio_data:
                logger.info(f"‚úÖ Sequential TTS chunk {chunk_index}: {tts_time:.2f}s")
                
                # –†–ï–ê–õ–¨–ù–û–ï –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ —á–µ—Ä–µ–∑ ARI
                playback_start = time.time()
                playback_id = await self._play_audio_real(channel_id, audio_data, chunk_index)
                playback_time = time.time() - playback_start

                if playback_id:
                    logger.info(f"‚úÖ REAL ARI playback started: {playback_id} for chunk {chunk_index}")
                    
                    if is_first:
                        total_time = tts_time + playback_time
                        logger.info(f"üéØ FIRST AUDIO LATENCY: {total_time:.2f}s")
                else:
                    logger.error(f"‚ùå ARI playback failed for chunk {chunk_index}")
            else:
                logger.error(f"‚ùå TTS synthesis failed for chunk {chunk_index}")

        except Exception as e:
            logger.error(f"‚ùå Sequential TTS error chunk {chunk_index}: {e}")
    
    
    async def _synthesize_chunk(self, text: str) -> Optional[bytes]:
        """–°–∏–Ω—Ç–µ–∑–∏—Ä—É–µ—Ç –∞—É–¥–∏–æ –¥–ª—è —á–∞–Ω–∫–∞"""
        try:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º gRPC TTS –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ —Å–∏–Ω—Ç–µ–∑–∞
            if hasattr(self.tts_service, 'synthesize_chunk_fast'):
                return await self.tts_service.synthesize_chunk_fast(text)
            else:
                # Fallback –Ω–∞ –æ–±—ã—á–Ω—ã–π —Å–∏–Ω—Ç–µ–∑
                return await self.tts_service.synthesize(text)
        except Exception as e:
            logger.error(f"‚ùå TTS synthesis error: {e}")
            return None
    
    async def _play_audio_real(self, channel_id: str, audio_data: bytes, chunk_index: int) -> Optional[str]:
        """
        –†–ï–ê–õ–¨–ù–û–ï –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ –∞—É–¥–∏–æ —á–µ—Ä–µ–∑ ARI
        
        –≠—Ç–æ –∫–ª—é—á–µ–≤–æ–µ –æ—Ç–ª–∏—á–∏–µ –æ—Ç ParallelTTSProcessor —Å –∑–∞–≥–ª—É—à–∫–∞–º–∏!
        """
        try:
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∞—É–¥–∏–æ –¥–∞–Ω–Ω—ã–µ –≤–æ –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
            timestamp = datetime.now().strftime('%H%M%S%f')[:-3]
            temp_filename = f"chunk_{channel_id}_{chunk_index}_{timestamp}.wav"
            temp_path = f"/var/lib/asterisk/sounds/{temp_filename}"
            
            # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
            import os
            os.makedirs(os.path.dirname(temp_path), exist_ok=True)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö
            header = audio_data[:12]
            if header.startswith(b'RIFF') and b'WAVE' in header:
                # –£–∂–µ –≥–æ—Ç–æ–≤—ã–π WAV —Ñ–∞–π–ª
                with open(temp_path, 'wb') as f:
                    f.write(audio_data)
            else:
                # Raw LPCM - –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ WAV
                await self._convert_lpcm_to_wav(audio_data, temp_path)
            
            # –†–ï–ê–õ–¨–ù–û–ï –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ —á–µ—Ä–µ–∑ ARI
            # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞–Ω–∞–ª–∞ –ø–µ—Ä–µ–¥ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ–º
            if not await self.ari_client.channel_exists(channel_id):
                logger.warning(f"‚ö†Ô∏è –ö–∞–Ω–∞–ª {channel_id} –∏—Å—á–µ–∑ –ø–µ—Ä–µ–¥ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ–º chunk {chunk_index}")
                return None
            
            playback_id = await self.ari_client.play_sound(channel_id, temp_filename[:-4], lang=None)
            
            if playback_id:
                logger.info(f"üîä REAL ARI playback: {playback_id} for chunk {chunk_index}")
                
                # –û—á–∏—â–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª —á–µ—Ä–µ–∑ –Ω–µ–∫–æ—Ç–æ—Ä–æ–µ –≤—Ä–µ–º—è
                asyncio.create_task(self._cleanup_temp_file(temp_path, delay=10.0))
                
                return playback_id
            else:
                logger.error(f"‚ùå ARI playback failed for chunk {chunk_index}")
                return None
                    
        except Exception as e:
            logger.error(f"‚ùå Real audio playback error for chunk {chunk_index}: {e}")
            return None
    
    async def _convert_lpcm_to_wav(self, lpcm_data: bytes, output_path: str):
        """–ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç raw LPCM –≤ WAV —Ñ–∞–π–ª"""
        try:
            import wave
            
            sample_rate = 8000  # 8kHz –¥–ª—è Asterisk
            channels = 1        # mono
            sample_width = 2    # 16-bit
            
            with wave.open(output_path, 'wb') as wav_file:
                wav_file.setnchannels(channels)
                wav_file.setsampwidth(sample_width)
                wav_file.setframerate(sample_rate)
                wav_file.writeframes(lpcm_data)
                
            logger.debug(f"üîÑ LPCM –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–Ω –≤ WAV: {output_path}")
            
        except Exception as e:
            logger.error(f"‚ùå LPCM to WAV conversion error: {e}")
            # Fallback: —Å–æ—Ö—Ä–∞–Ω—è–µ–º –∫–∞–∫ –µ—Å—Ç—å
            with open(output_path, 'wb') as f:
                f.write(lpcm_data)
    
    async def _cleanup_temp_file(self, file_path: str, delay: float = 10.0):
        """–û—á–∏—â–∞–µ—Ç –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª –ø–æ—Å–ª–µ –∑–∞–¥–µ—Ä–∂–∫–∏"""
        try:
            await asyncio.sleep(delay)
            import os
            if os.path.exists(file_path):
                os.remove(file_path)
                logger.debug(f"üóëÔ∏è –£–¥–∞–ª–µ–Ω –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª: {file_path}")
        except Exception as e:
            logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª {file_path}: {e}")
    
    async def clear_all_queues(self, channel_id: str):
        """–û—á–∏—â–∞–µ—Ç –≤—Å–µ –æ—á–µ—Ä–µ–¥–∏ –¥–ª—è –∫–∞–Ω–∞–ª–∞ (–¥–ª—è barge-in)"""
        try:
            if channel_id in self.active_channels:
                # Unhold –∫–∞–Ω–∞–ª –µ—Å–ª–∏ –æ–Ω –±—ã–ª —É–¥–µ—Ä–∂–∞–Ω
                if self.active_channels[channel_id].get("is_held"):
                    await self._unhold_channel(channel_id)
                
                # –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∫–∞–Ω–∞–ª–∞
                del self.active_channels[channel_id]
                
            logger.info(f"üßπ Cleared all queues for channel {channel_id}")
            
        except Exception as e:
            logger.error(f"‚ùå Clear queues error for {channel_id}: {e}")
    
    def get_metrics(self, channel_id: str) -> Dict[str, Any]:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –º–µ—Ç—Ä–∏–∫–∏ –¥–ª—è –∫–∞–Ω–∞–ª–∞"""
        return self.active_channels.get(channel_id, {})
