import aiohttp
import asyncio
import json
import logging
from typing import Optional

logger = logging.getLogger(__name__)

class AsteriskARIClient:
    def __init__(self, host="localhost", port=8088, username="asterisk", password="asterisk123"):
        self.base_url = f"http://{host}:{port}/ari"
        self.auth = aiohttp.BasicAuth(username, password)
        self.session = None
        
    async def __aenter__(self):
        self.session = aiohttp.ClientSession(auth=self.auth)
        return self
        
    async def __aexit__(self, exc_type, exc_val, exc_tb):
        if self.session:
            await self.session.close()
    
    async def answer_channel(self, channel_id):
        """–û—Ç–≤–µ—á–∞–µ—Ç –Ω–∞ –∫–∞–Ω–∞–ª –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π —Ä–∞–±–æ—Ç—ã ARI playback"""
        try:
            url = f"{self.base_url}/channels/{channel_id}/answer"
            async with self.session.post(url) as response:
                if response.status == 204:
                    logger.info(f"‚úÖ –ö–∞–Ω–∞–ª {channel_id} —É—Å–ø–µ—à–Ω–æ –æ—Ç–≤–µ—á–µ–Ω")
                    return True
                else:
                    error_text = await response.text()
                    logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –∫–∞–Ω–∞–ª: {response.status} - {error_text}")
                    return False
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –∫–∞–Ω–∞–ª {channel_id}: {e}")
            return False
    
    async def play_sound(self, channel_id, sound_id, lang="ru"):
        """
        –ü—Ä–æ–∏–≥—Ä—ã–≤–∞–µ—Ç –∑–≤—É–∫–æ–≤–æ–π —Ñ–∞–π–ª –Ω–∞ –∫–∞–Ω–∞–ª–µ.
        
        Args:
            channel_id: ID –∫–∞–Ω–∞–ª–∞
            sound_id: –ò–º—è –∑–≤—É–∫–æ–≤–æ–≥–æ —Ñ–∞–π–ª–∞ (–±–µ–∑ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è)
            lang: –Ø–∑—ã–∫ (–ø–∞–ø–∫–∞ –≤ sounds/)
        """
        # ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –ù–ï –ø—Ä–æ–≤–µ—Ä—è–µ–º channel_exists() –∑–¥–µ—Å—å!
        # –ü—Ä–∏—á–∏–Ω–∞: ARI –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç False –∫–æ–≥–¥–∞ –∫–∞–Ω–∞–ª –∑–∞–Ω—è—Ç (VAD recording)
        # –ü—É—Å—Ç—å ARI —Å–∞–º –≤–µ—Ä–Ω–µ—Ç –æ—à–∏–±–∫—É, –µ—Å–ª–∏ –∫–∞–Ω–∞–ª –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
            
        try:
            url = f"{self.base_url}/channels/{channel_id}/play"
            # –ò–°–ü–†–ê–í–õ–ï–ù–û: –£–±–∏—Ä–∞–µ–º –ø–æ–¥–ø–∞–ø–∫—É ru/ - Asterisk —Å–∞–º –Ω–∞–π–¥–µ—Ç —Ñ–∞–π–ª –ø–æ –∏–º–µ–Ω–∏
            media = f"sound:{sound_id}"
            data = {"media": media}
            
            logger.info(f"–ü—Ä–æ–∏–≥—Ä—ã–≤–∞–µ–º –∑–≤—É–∫: {media} –Ω–∞ –∫–∞–Ω–∞–ª–µ {channel_id}")
            
            async with self.session.post(url, json=data) as response:
                # –î–ï–¢–ê–õ–¨–ù–û–ï –õ–û–ì–ò–†–û–í–ê–ù–ò–ï: –õ–æ–≥–∏—Ä—É–µ–º –ø–æ–ª–Ω—ã–π –æ—Ç–≤–µ—Ç ARI –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
                response_text = await response.text()
                logger.info(f"üîç ARI Response: status={response.status}, body={response_text}")
                
                # ARI –º–æ–∂–µ—Ç –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å 200 OK –∏–ª–∏ 201 Created/202 Accepted –ø—Ä–∏ —É—Å–ø–µ—à–Ω–æ–º —Å–æ–∑–¥–∞–Ω–∏–∏ playback
                if response.status in (200, 201, 202):
                    try:
                        result = json.loads(response_text)
                        playback_id = result.get('id')
                        logger.info(f"‚úÖ –ü—Ä–æ–∏–≥—Ä—ã–≤–∞–Ω–∏–µ –ø—Ä–∏–Ω—è—Ç–æ ARI (status={response.status}), playback_id={playback_id}")
                        return playback_id or True
                    except Exception as e:
                        logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å JSON –æ—Ç–≤–µ—Ç: {e}, raw: {response_text}")
                        return True  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º True –µ—Å–ª–∏ —Å—Ç–∞—Ç—É—Å OK
                else:
                    logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–∏–≥—Ä—ã–≤–∞–Ω–∏—è: {response.status} - {response_text}")
                    logger.warning(
                        "ARI play_sound: status=%s body=%s",
                        response.status,
                        await response.text()
                    )
                    return None
                    
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–∏–≥—Ä—ã–≤–∞–Ω–∏–∏ –∑–≤—É–∫–∞: {e}")
            return None

    async def start_recording(self, channel_id, filename, max_duration=15):
        """
        –ó–∞–ø—É—Å–∫–∞–µ—Ç –∑–∞–ø–∏—Å—å —Å –∫–∞–Ω–∞–ª–∞.
        
        Args:
            channel_id: ID –∫–∞–Ω–∞–ª–∞
            filename: –ò–º—è —Ñ–∞–π–ª–∞ –¥–ª—è –∑–∞–ø–∏—Å–∏ (–±–µ–∑ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è)
            max_duration: –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
        """
        # üéØ –≠–¢–ê–ü 2.3: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è –∫–∞–Ω–∞–ª–∞ –ø–µ—Ä–µ–¥ –∑–∞–ø–∏—Å—å—é
        if not await self.channel_exists(channel_id):
            logger.warning(f"‚ö†Ô∏è –ö–∞–Ω–∞–ª {channel_id} –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –∑–∞–ø–∏—Å—å")
            return False
            
        try:
            url = f"{self.base_url}/channels/{channel_id}/record"
            data = {
                "name": filename,
                "format": "wav",
                "maxDurationSeconds": max_duration,
                "beep": False,
                "terminateOn": "#",  # –ó–∞–≤–µ—Ä—à–∏—Ç—å –∑–∞–ø–∏—Å—å –ø–æ –Ω–∞–∂–∞—Ç–∏—é #
                "ifExists": "overwrite"
            }
            
            logger.info(f"–ó–∞–ø—É—Å–∫–∞–µ–º –∑–∞–ø–∏—Å—å: {filename} –Ω–∞ –∫–∞–Ω–∞–ª–µ {channel_id}")
            
            async with self.session.post(url, json=data) as response:
                # ARI –º–æ–∂–µ—Ç –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å 200 OK –∏–ª–∏ 201 Created –ø—Ä–∏ —É—Å–ø–µ—à–Ω–æ–º —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–ø–∏—Å–∏
                if response.status in (200, 201):
                    result = await response.json()
                    recording_id = result.get('name')
                    logger.info(f"‚úÖ –ó–∞–ø–∏—Å—å –∑–∞–ø—É—â–µ–Ω–∞: {recording_id}")
                    return recording_id
                else:
                    error_text = await response.text()
                    logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –∑–∞–ø–∏—Å–∏: {response.status} - {error_text}")
                    return None
                    
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –∑–∞–ø–∏—Å–∏: {e}")
            return None

    async def stop_recording(self, recording_id):
        """–û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –∑–∞–ø–∏—Å—å."""
        try:
            url = f"{self.base_url}/recordings/live/{recording_id}/stop"
            async with self.session.post(url) as response:
                return response.status == 200
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –∑–∞–ø–∏—Å–∏: {e}")
            return False

    async def hold_channel(self, channel_id):
        """
        –ö–†–ò–¢–ò–ß–ï–°–ö–û–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –£–±–∏—Ä–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è
        Asterisk –º–æ–∂–µ—Ç –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å –∫–∞–Ω–∞–ª –∫–∞–∫ "–Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π" –Ω–æ hold –≤—Å–µ —Ä–∞–≤–Ω–æ —Ä–∞–±–æ—Ç–∞–µ—Ç
        """
        try:
            url = f"{self.base_url}/channels/{channel_id}/hold"
            async with self.session.post(url) as response:
                if response.status in (200, 201, 204):
                    logger.info(f"üîí –ö–∞–Ω–∞–ª {channel_id} –ø–æ—Å—Ç–∞–≤–ª–µ–Ω –Ω–∞ hold")
                    return True
                else:
                    error_text = await response.text()
                    logger.warning(f"‚ö†Ô∏è Hold failed {channel_id}: {response.status} - {error_text}")
                    return False
        except Exception as e:
            logger.error(f"‚ùå Hold error {channel_id}: {e}")
            return False

    async def unhold_channel(self, channel_id):
        """–ö–†–ò–¢–ò–ß–ï–°–ö–û–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –£–±–∏—Ä–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è"""
        try:
            url = f"{self.base_url}/channels/{channel_id}/unhold"
            async with self.session.delete(url) as response:
                if response.status in (200, 201, 204):
                    logger.info(f"üîì –ö–∞–Ω–∞–ª {channel_id} —Å–Ω—è—Ç —Å hold")
                    return True
                else:
                    error_text = await response.text()
                    logger.warning(f"‚ö†Ô∏è Unhold failed {channel_id}: {response.status} - {error_text}")
                    return False
        except Exception as e:
            logger.error(f"‚ùå Unhold error {channel_id}: {e}")
            return False

    async def hangup_channel(self, channel_id):
        """–ó–∞–≤–µ—Ä—à–∞–µ—Ç –∑–≤–æ–Ω–æ–∫."""
        # üéØ –≠–¢–ê–ü 2.3: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è –∫–∞–Ω–∞–ª–∞ –ø–µ—Ä–µ–¥ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ–º
        if not await self.channel_exists(channel_id):
            logger.warning(f"‚ö†Ô∏è –ö–∞–Ω–∞–ª {channel_id} –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ")
            return False
            
        try:
            url = f"{self.base_url}/channels/{channel_id}"
            async with self.session.delete(url) as response:
                return response.status == 200
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∑–≤–æ–Ω–∫–∞: {e}")
            return False
    
    async def get_channels(self):
        """–ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∞–∫—Ç–∏–≤–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤."""
        try:
            url = f"{self.base_url}/channels"
            async with self.session.get(url) as response:
                if response.status == 200:
                    return await response.json()
                else:
                    logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∫–∞–Ω–∞–ª–æ–≤: {response.status}")
                    return []
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –∫–∞–Ω–∞–ª–æ–≤: {e}")
            return []
    
    async def channel_exists(self, channel_id):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –∫–∞–Ω–∞–ª –≤ Asterisk."""
        try:
            url = f"{self.base_url}/channels/{channel_id}"
            async with self.session.get(url) as response:
                return response.status == 200
        except Exception as e:
            logger.debug(f"–ö–∞–Ω–∞–ª {channel_id} –Ω–µ –Ω–∞–π–¥–µ–Ω: {e}")
            return False
    
    async def get_channel_info(self, channel_id):
        """–ü–æ–ª—É—á–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞–Ω–∞–ª–µ."""
        try:
            url = f"{self.base_url}/channels/{channel_id}"
            async with self.session.get(url) as response:
                if response.status == 200:
                    return await response.json()
                else:
                    return None
        except Exception as e:
            logger.debug(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–∞–Ω–∞–ª–µ {channel_id}: {e}")
            return None
    
    async def hold_channel(self, channel_id):
        """–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ —É–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –∫–∞–Ω–∞–ª –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏"""
        try:
            url = f"{self.base_url}/channels/{channel_id}/hold"
            async with self.session.post(url) as response:
                if response.status == 204:
                    logger.info(f"üîí –ö–∞–Ω–∞–ª {channel_id} —É—Å–ø–µ—à–Ω–æ —É–¥–µ—Ä–∂–∞–Ω")
                    return True
                else:
                    error_text = await response.text()
                    logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–µ—Ä–∂–∞—Ç—å –∫–∞–Ω–∞–ª {channel_id}: {response.status} - {error_text}")
                    return False
        except Exception as e:
            logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ —É–¥–µ—Ä–∂–∞–Ω–∏—è –∫–∞–Ω–∞–ª–∞ {channel_id}: {e}")
            return False
    
    async def unhold_channel(self, channel_id):
        """–°–Ω–∏–º–∞–µ—Ç —É–¥–µ—Ä–∂–∞–Ω–∏–µ –∫–∞–Ω–∞–ª–∞"""
        try:
            url = f"{self.base_url}/channels/{channel_id}/unhold"
            async with self.session.post(url) as response:
                if response.status == 204:
                    logger.info(f"üîì –ö–∞–Ω–∞–ª {channel_id} —É—Å–ø–µ—à–Ω–æ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω")
                    return True
                else:
                    error_text = await response.text()
                    logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –∫–∞–Ω–∞–ª {channel_id}: {response.status} - {error_text}")
                    return False
        except Exception as e:
            logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –∫–∞–Ω–∞–ª–∞ {channel_id}: {e}")
            return False

if __name__ == "__main__":
    async def test():
        async with AsteriskARIClient() as ari:
            url = f"{ari.base_url}/asterisk/info"
            async with ari.session.get(url) as response:
                if response.status == 200:
                    print("ARI connection successful!")
                else:
                    print(f"ARI connection failed: {response.status}")
    
    asyncio.run(test())