#!/usr/bin/env python3
"""
–¢–µ—Å—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ TTS —Ñ–∞–π–ª–æ–≤ —Å –Ω–æ–≤—ã–º ulaw —Ñ–æ—Ä–º–∞—Ç–æ–º
"""

import asyncio
import os
import sys
import logging
from dotenv import load_dotenv

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv('/root/Asterisk_bot/asterisk-vox-bot/.env')

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –ø—Ä–æ–µ–∫—Ç—É
sys.path.insert(0, '/root/Asterisk_bot/asterisk-vox-bot')

from app.backend.services.yandex_tts_service import get_yandex_tts_service

logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)

async def test_tts_generation():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏—é TTS —Ñ–∞–π–ª–æ–≤ —Å –Ω–æ–≤—ã–º ulaw —Ñ–æ—Ä–º–∞—Ç–æ–º"""
    
    try:
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º TTS —Å–µ—Ä–≤–∏—Å
        logger.info("üöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º Yandex TTS —Å–µ—Ä–≤–∏—Å...")
        tts_service = get_yandex_tts_service()
        
        # –¢–µ—Å—Ç–æ–≤—ã–π —Ç–µ–∫—Å—Ç
        test_text = "–ü—Ä–∏–≤–µ—Ç! –≠—Ç–æ —Ç–µ—Å—Ç –Ω–æ–≤–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∞ –∑–≤—É–∫–∞."
        logger.info(f"üé§ –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º TTS –¥–ª—è —Ç–µ–∫—Å—Ç–∞: '{test_text}'")
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º TTS
        filename = await tts_service.text_to_speech(test_text, "test_ulaw")
        
        if filename:
            logger.info(f"‚úÖ TTS —Ñ–∞–π–ª —Å–æ–∑–¥–∞–Ω: {filename}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ñ–∞–π–ª —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
            full_path = f"/var/lib/asterisk/sounds/ru/{filename}.ulaw"
            if os.path.exists(full_path):
                logger.info(f"‚úÖ ulaw —Ñ–∞–π–ª –Ω–∞–π–¥–µ–Ω: {full_path}")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞
                import stat
                file_stat = os.stat(full_path)
                logger.info(f"üìä –ü—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞: {stat.filemode(file_stat.st_mode)}")
                logger.info(f"üìä –í–ª–∞–¥–µ–ª–µ—Ü: {file_stat.st_uid}:{file_stat.st_gid}")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞
                file_size = os.path.getsize(full_path)
                logger.info(f"üìä –†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞: {file_size} –±–∞–π—Ç")
                
                return True
            else:
                logger.error(f"‚ùå ulaw —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {full_path}")
                return False
        else:
            logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å TTS —Ñ–∞–π–ª")
            return False
            
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è TTS: {e}")
        return False

if __name__ == "__main__":
    success = asyncio.run(test_tts_generation())
    if success:
        print("üéâ –¢–µ—Å—Ç TTS –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø—Ä–æ—à–µ–ª —É—Å–ø–µ—à–Ω–æ!")
    else:
        print("‚ùå –¢–µ—Å—Ç TTS –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –Ω–µ –ø—Ä–æ—à–µ–ª!")
