#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ VAD —Å–∏—Å—Ç–µ–º—ã.
–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Ä–∞–±–æ—Ç—É SimpleVADService –∏–∑–æ–ª–∏—Ä–æ–≤–∞–Ω–Ω–æ –æ—Ç Asterisk.
"""

import asyncio
import logging
import sys
import os
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞ –º–æ–¥—É–ª–µ–π –ø—Ä–æ–µ–∫—Ç–∞
current_dir = Path(__file__).parent
project_root = current_dir / "asterisk-vox-bot"
sys.path.insert(0, str(project_root))

from app.backend.services.simple_vad_service import SimpleVADService

# –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

async def test_vad_basic():
    """–ë–∞–∑–æ–≤—ã–π —Ç–µ—Å—Ç VAD —Å–µ—Ä–≤–∏—Å–∞."""
    logger.info("üß™ –ù–∞—á–∏–Ω–∞–µ–º –±–∞–∑–æ–≤—ã–π —Ç–µ—Å—Ç VAD —Å–µ—Ä–≤–∏—Å–∞")
    
    # –°–æ–∑–¥–∞–µ–º VAD —Å–µ—Ä–≤–∏—Å
    vad = SimpleVADService(
        silence_timeout=2.0,
        min_recording_time=1.0,
        max_recording_time=10.0,
        debug_logging=True
    )
    
    # Callback –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    async def test_callback(channel_id: str, recording_id: str, reason: str):
        logger.info(f"üéØ VAD Callback: channel={channel_id}, recording={recording_id}, reason={reason}")
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –∑–∞–ø—É—Å–∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
    channel_id = "test_channel_001"
    recording_id = "test_recording_001"
    
    success = await vad.start_monitoring(channel_id, recording_id, test_callback)
    logger.info(f"‚úÖ –ó–∞–ø—É—Å–∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞: {success}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∞–∫—Ç–∏–≤–µ–Ω
    is_monitoring = vad.is_monitoring(channel_id)
    logger.info(f"‚úÖ –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∞–∫—Ç–∏–≤–µ–Ω: {is_monitoring}")
    
    # –°–∏–º—É–ª–∏—Ä—É–µ–º –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    logger.info("üé§ –°–∏–º—É–ª–∏—Ä—É–µ–º –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è...")
    for i in range(5):
        await vad.update_activity(channel_id)
        await asyncio.sleep(0.5)
        logger.info(f"   –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å {i+1}/5")
    
    # –°–∏–º—É–ª–∏—Ä—É–µ–º —Ç–∏—à–∏–Ω—É
    logger.info("üîá –°–∏–º—É–ª–∏—Ä—É–µ–º —Ç–∏—à–∏–Ω—É (–¥–æ–ª–∂–Ω–æ —Å—Ä–∞–±–æ—Ç–∞—Ç—å —á–µ—Ä–µ–∑ 2 —Å–µ–∫—É–Ω–¥—ã)...")
    await asyncio.sleep(3.0)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    stats = vad.get_monitoring_stats(channel_id)
    if stats:
        logger.info(f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞: {stats}")
    else:
        logger.info("üìä –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∑–∞–≤–µ—Ä—à–µ–Ω")
    
    logger.info("‚úÖ –ë–∞–∑–æ–≤—ã–π —Ç–µ—Å—Ç VAD –∑–∞–≤–µ—Ä—à–µ–Ω")

async def test_vad_minimum_time():
    """–¢–µ—Å—Ç –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ –∑–∞–ø–∏—Å–∏."""
    logger.info("üß™ –¢–µ—Å—Ç –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ –∑–∞–ø–∏—Å–∏")
    
    vad = SimpleVADService(
        silence_timeout=1.0,
        min_recording_time=3.0,  # –ú–∏–Ω–∏–º—É–º 3 —Å–µ–∫—É–Ω–¥—ã
        max_recording_time=10.0,
        debug_logging=True
    )
    
    async def test_callback(channel_id: str, recording_id: str, reason: str):
        logger.info(f"üéØ VAD Callback: channel={channel_id}, recording={recording_id}, reason={reason}")
    
    channel_id = "test_channel_002"
    recording_id = "test_recording_002"
    
    await vad.start_monitoring(channel_id, recording_id, test_callback)
    
    # –ö–æ—Ä–æ—Ç–∫–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å (–º–µ–Ω—å—à–µ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏)
    logger.info("üé§ –ö–æ—Ä–æ—Ç–∫–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å (1 —Å–µ–∫—É–Ω–¥–∞)...")
    await vad.update_activity(channel_id)
    await asyncio.sleep(1.0)
    
    # –¢–∏—à–∏–Ω–∞ (–¥–æ–ª–∂–Ω–æ –ù–ï —Å—Ä–∞–±–æ—Ç–∞—Ç—å –∏–∑-–∑–∞ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏)
    logger.info("üîá –¢–∏—à–∏–Ω–∞ (–Ω–µ –¥–æ–ª–∂–Ω–æ —Å—Ä–∞–±–æ—Ç–∞—Ç—å –∏–∑-–∑–∞ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏)...")
    await asyncio.sleep(2.0)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –≤—Å–µ –µ—â–µ –∞–∫—Ç–∏–≤–µ–Ω
    is_monitoring = vad.is_monitoring(channel_id)
    logger.info(f"‚úÖ –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –≤—Å–µ –µ—â–µ –∞–∫—Ç–∏–≤–µ–Ω: {is_monitoring}")
    
    # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—Ä—É—á–Ω—É—é
    await vad.stop_monitoring(channel_id)
    logger.info("‚úÖ –¢–µ—Å—Ç –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ –∑–∞–≤–µ—Ä—à–µ–Ω")

async def test_vad_maximum_time():
    """–¢–µ—Å—Ç –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ –∑–∞–ø–∏—Å–∏ (fallback)."""
    logger.info("üß™ –¢–µ—Å—Ç –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ –∑–∞–ø–∏—Å–∏")
    
    vad = SimpleVADService(
        silence_timeout=5.0,  # –î–ª–∏–Ω–Ω—ã–π —Ç–∞–π–º–∞—É—Ç —Ç–∏—à–∏–Ω—ã
        min_recording_time=1.0,
        max_recording_time=3.0,  # –ö–æ—Ä–æ—Ç–∫–æ–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è
        debug_logging=True
    )
    
    async def test_callback(channel_id: str, recording_id: str, reason: str):
        logger.info(f"üéØ VAD Callback: channel={channel_id}, recording={recording_id}, reason={reason}")
    
    channel_id = "test_channel_003"
    recording_id = "test_recording_003"
    
    await vad.start_monitoring(channel_id, recording_id, test_callback)
    
    # –û–¥–Ω–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –≤ –Ω–∞—á–∞–ª–µ
    await vad.update_activity(channel_id)
    
    # –ñ–¥–µ–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è (–¥–æ–ª–∂–Ω–æ —Å—Ä–∞–±–æ—Ç–∞—Ç—å fallback)
    logger.info("‚è∞ –ñ–¥–µ–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è (3 —Å–µ–∫—É–Ω–¥—ã)...")
    await asyncio.sleep(4.0)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∑–∞–≤–µ—Ä—à–µ–Ω
    is_monitoring = vad.is_monitoring(channel_id)
    logger.info(f"‚úÖ –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∑–∞–≤–µ—Ä—à–µ–Ω: {not is_monitoring}")
    
    logger.info("‚úÖ –¢–µ—Å—Ç –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ –∑–∞–≤–µ—Ä—à–µ–Ω")

async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è."""
    logger.info("üöÄ –ù–∞—á–∏–Ω–∞–µ–º —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ VAD —Å–∏—Å—Ç–µ–º—ã")
    
    try:
        # –ë–∞–∑–æ–≤—ã–π —Ç–µ—Å—Ç
        await test_vad_basic()
        await asyncio.sleep(1)
        
        # –¢–µ—Å—Ç –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏
        await test_vad_minimum_time()
        await asyncio.sleep(1)
        
        # –¢–µ—Å—Ç –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏
        await test_vad_maximum_time()
        
        logger.info("üéâ –í—Å–µ —Ç–µ—Å—Ç—ã VAD –∑–∞–≤–µ—Ä—à–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!")
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–∞—Ö VAD: {e}", exc_info=True)

if __name__ == "__main__":
    asyncio.run(main())
