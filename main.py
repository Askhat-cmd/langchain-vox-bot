"""
–û—Å–Ω–æ–≤–Ω–æ–π —Ñ–∞–π–ª –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è.
- WebSocket-—Å–µ—Ä–≤–µ—Ä –¥–ª—è –æ–±—â–µ–Ω–∏—è —Å Voximplant
- API –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ª–æ–≥–æ–≤
- –°—Ç–∞—Ç–∏–∫–∞ –¥–ª—è UI –ª–æ–≥–æ–≤
"""
import os, logging, uuid, json, asyncio, io
from datetime import datetime, timezone
from typing import Dict, Any, List

from fastapi import FastAPI, WebSocket, WebSocketDisconnect, Query, status
from fastapi.responses import HTMLResponse, JSONResponse, StreamingResponse
from fastapi.staticfiles import StaticFiles
from dotenv import load_dotenv

from Agent import Agent
from log_storage import insert_log, query_logs, to_csv, delete_all_logs

# --- –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è ---

load_dotenv()
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

app = FastAPI()
app.mount("/logs-ui", StaticFiles(directory="logs-ui", html=True), name="logs-ui")

try:
    agent = Agent()
    logger.info("–ê–≥–µ–Ω—Ç '–ú–µ—Ç—Ä–æ—Ç–µ—Å—Ç' —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω.")
except Exception as e:
    logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –∞–≥–µ–Ω—Ç–∞ '–ú–µ—Ç—Ä–æ—Ç–µ—Å—Ç': {e}", exc_info=True)
    agent = None

# --- –ì–ª–æ–±–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∑–≤–æ–Ω–∫–∞–º–∏ ---
active_calls: Dict[str, Dict[str, Any]] = {}

# --- –†–æ—É—Ç—ã ---

@app.get("/")
async def root():
    return HTMLResponse(
        "<h3>–ë—ç–∫–µ–Ω–¥ '–ú–µ—Ç—Ä–æ—Ç—ç—Å—Ç' –∞–∫—Ç–∏–≤–µ–Ω.<br>"
        "‚Ä¢ WebSocket¬†‚Äî¬†<code>/ws</code><br>"
        "‚Ä¢ UI –ª–æ–≥–æ–≤¬†‚Äî¬†<code>/logs-ui/</code></h3>"
    )

@app.get("/logs")
async def get_logs(q: str | None = None,
                   date_from: str | None = None,
                   date_to: str | None = None,
                   status: str | None = None):
    rows = await query_logs({"from": date_from, "to": date_to, "status": status})
    if q:
        q_low = q.lower()
        filtered_rows = []
        for r in rows:
            if q_low in (r.get("callerId") or "").lower():
                filtered_rows.append(r)
                continue
            try:
                transcript = json.loads(r["transcript_json"])
                for turn in transcript:
                    if q_low in turn.get("text", "").lower():
                        filtered_rows.append(r)
                        break
            except (json.JSONDecodeError, AttributeError):
                continue
        rows = filtered_rows
    return JSONResponse(content=rows)

@app.delete("/logs")
async def clear_logs():
    """
    –£–¥–∞–ª—è–µ—Ç –≤—Å–µ –ª–æ–≥–∏.
    """
    try:
        await delete_all_logs()
        logger.info("üóëÔ∏è –í—Å–µ –ª–æ–≥–∏ –±—ã–ª–∏ —É–¥–∞–ª–µ–Ω—ã.")
        return JSONResponse(content={"message": "–í—Å–µ –ª–æ–≥–∏ —É–¥–∞–ª–µ–Ω—ã"}, status_code=status.HTTP_200_OK)
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –ª–æ–≥–æ–≤: {e}", exc_info=True)
        return JSONResponse(content={"error": str(e)}, status_code=status.HTTP_500_INTERNAL_SERVER_ERROR)

@app.get("/logs/csv")
async def get_logs_csv():
    rows = await query_logs({})
    csv_data_str = await to_csv(rows)
    # –ö–æ–¥–∏—Ä—É–µ–º –≤ utf-8-sig, —á—Ç–æ–±—ã Excel –ø—Ä–∞–≤–∏–ª—å–Ω–æ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–ª –∫–∏—Ä–∏–ª–ª–∏—Ü—É (–¥–æ–±–∞–≤–ª—è–µ—Ç—Å—è BOM)
    response_bytes = csv_data_str.encode('utf-8-sig')
    return StreamingResponse(
        io.BytesIO(response_bytes),
        media_type="text/csv",
        headers={"Content-Disposition": 'attachment; filename="call_logs.csv"'}
    )

@app.get("/kb")
async def get_knowledge_base():
    """
    –û—Ç–¥–∞–µ—Ç —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–∞ –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π.
    """
    kb_path = "–ú–µ—Ç—Ä–æ—Ç–µ—Å—Ç_–°–ê–ô–¢.txt"
    try:
        with open(kb_path, 'r', encoding='utf-8') as f:
            content = f.read()
        return JSONResponse(content={"text": content})
    except FileNotFoundError:
        return JSONResponse(content={"error": "–§–∞–π–ª –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω"}, status_code=status.HTTP_404_NOT_FOUND)
    except Exception as e:
        return JSONResponse(content={"error": str(e)}, status_code=status.HTTP_500_INTERNAL_SERVER_ERROR)

@app.websocket("/ws")
async def websocket_endpoint(websocket: WebSocket, callerId: str = Query(None)):
    """
    –û—Å–Ω–æ–≤–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ WebSocket-—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π –æ—Ç Voximplant.
    - –£–ø—Ä–∞–≤–ª—è–µ—Ç –∂–∏–∑–Ω–µ–Ω–Ω—ã–º —Ü–∏–∫–ª–æ–º –∑–≤–æ–Ω–∫–∞.
    - –°–æ—Ö—Ä–∞–Ω—è–µ—Ç –ª–æ–≥ –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∑–≤–æ–Ω–∫–∞.
    """
    await websocket.accept()
    session_id = str(uuid.uuid4())
    start_time = datetime.now(timezone.utc)
    
    active_calls[session_id] = {
        "callerId": callerId,
        "startTime": start_time.isoformat(),
        "transcript": [],
        "status": "Initiated"
    }
    logger.info(f"–ù–æ–≤—ã–π –∑–≤–æ–Ω–æ–∫: Session ID: {session_id}, Caller ID: {callerId}")

    if not agent:
        await websocket.send_text("–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –∞–≥–µ–Ω—Ç–∞.")
        await websocket.close()
        del active_calls[session_id]
        return

    try:
        greeting = "–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, –í—ã –ø–æ–∑–≤–æ–Ω–∏–ª–∏ –≤ –∫–æ–º–ø–∞–Ω–∏—é ¬´–ú–µ—Ç—Ä–æ—Ç—ç—Å—Ç¬ª. –ß–µ–º —è –º–æ–≥—É –ø–æ–º–æ—á—å?"
        active_calls[session_id]["transcript"].append(
            {"speaker": "bot", "text": greeting, "timestamp": datetime.now(timezone.utc).isoformat()}
        )
        await websocket.send_text(greeting)

        while True:
            data = await websocket.receive_text()
            logger.info(f"–ü–æ–ª—É—á–µ–Ω –≤–æ–ø—Ä–æ—Å ({session_id}): {data}")
            active_calls[session_id]["transcript"].append(
                {"speaker": "user", "text": data, "timestamp": datetime.now(timezone.utc).isoformat()}
            )

            response_generator = agent.get_response_generator(data, session_id=session_id)
            
            full_response = ""
            for chunk in response_generator:
                if chunk:
                    await websocket.send_text(chunk)
                    full_response += chunk
            
            logger.info(f"–ü–æ–ª–Ω—ã–π –æ—Ç–≤–µ—Ç ({session_id}) –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω.")
            active_calls[session_id]["transcript"].append(
                {"speaker": "bot", "text": full_response, "timestamp": datetime.now(timezone.utc).isoformat()}
            )
            active_calls[session_id]["status"] = "InProgress"

    except WebSocketDisconnect:
        logger.info(f"–ö–ª–∏–µ–Ω—Ç ({session_id}) –æ—Ç–∫–ª—é—á–∏–ª—Å—è.")
        active_calls[session_id]["status"] = "Completed"
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ WS ({session_id}): {e}", exc_info=True)
        active_calls[session_id]["status"] = "Failed"
    finally:
        end_time = datetime.now(timezone.utc)
        call_log = active_calls.get(session_id)
        if call_log:
            log_record: Dict[str, Any] = {
                "id": session_id,
                "callerId": call_log["callerId"],
                "startTime": call_log["startTime"],
                "endTime": end_time.isoformat(),
                "status": call_log["status"],
                "transcript": call_log["transcript"],
            }
            try:
                await insert_log(log_record)
                logger.info(f"üíæ –õ–æ–≥ —Å–æ—Ö—Ä–∞–Ω—ë–Ω –¥–ª—è Session {session_id}")
            except Exception as err:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ insert_log: {err}", exc_info=True)
            
            del active_calls[session_id]
